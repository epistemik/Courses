
CSI 1101                   ASSIGNMENT #3

due date: 10:40 p.m., Wednesday, February 3, 1999
issue date: Monday, January 25, 1999.

VERY IMPORTANT:
    You must do this assignment INDIVIDUALLY and follow all the
    general instructions and programming standards for the course
   (see the course home page for these)

Marking Scheme
 10 marks -- programming standards
 25 marks -- question 1 (is_increasing)
 25 marks -- question 2 (destroy)
 25 marks -- question 3 (insert_increasing_rec)
 15 marks -- question 4 (insert_increasing_loop)
---------
100 marks total


PROGRAM HANDOUT
---------------
In this assignment you are given PART of the final program and your
job is to write the remaining parts of the program.  The program you
are given is in file a3.pas in the course directory.  Note that
three of the procedures in this program are the model solutions
for assignment #2 and therefore will not be given out until Thursday.

You MUST use the given parts of the program without changing them.

Be sure to change the comments at the beginning of the program and the
information in procedure identify_myself to correctly identify yourself.

You must the given procedures get_node and return_node for all your
memory management -- do not directly call Pascal's "new" or "dispose".


Question 1.
-----------
Write the Pascal function is_increasing( L) which returns TRUE
if the values in L are in increasing order (if Y is the next value
in the list after X, then Y must be greater than or equal to X).
The function should also return TRUE if L is empty or contains just one
element.

"is_increasing" must be RECURSIVE, it must contain no loop, and it
must not make unnecessary recursive calls.

The model solution is about 5 lines of code.


Question 2.
-----------
Write the Pascal procedure destroy( L ) which returns all of L's nodes.
"destroy" must be RECURSIVE, it must contain no loop, and
it must not call any procedure other than itself and return_node.

The model solution is about 3 lines of code.


Question 3.
-----------
Write the Pascal procedure insert_increasing_rec( L, V ).
List L is assumed to be in increasing order (you do not have to check that).
"insert_increasing_rec" inserts V into the correct position in L
so that L is still in increasing order after V has been inserted.

"insert_increasing_rec" must be RECURSIVE, it must contain no loop,
and the only procedures it may call are itself, "insert_at_front",
"insert_after_P", and "get_node".

The model solution is about 3 lines of code.

Question 4.
-----------
Write the Pascal procedure insert_increasing_loop( L, V ).
This does exactly the same thing as "insert_increasing_rec" but
it is NOT recursive - it uses a loop to find the correct place to
insert V.  The purpose of this question is to allow you to compare
the difficulty of designing a recursive and a non-recursive solution
for this problem.

"insert_increasing_loop" must use a loop, it must not be recursive,
and the only procedures it may call are "insert_at_front", "insert_after_P",
and "get_node".

The model solution is about 10 lines of code.


SUGGESTION ON HOW TO PROCEED
----------------------------
I suggest you do the questions in the order given (1-4).
Thoroughly test each one before proceeding to the next.

Note that question 4 is worth quite a lot fewer marks than
the other questions.  This does not mean it is easier - in fact,
you might find it trickier than the others.  It is worth fewer
marks because the focus of this assignment is recursion, and
so you should focus on questions 1-3 if you find yourself running
short of time.


SAMPLE OUTPUT
-------------
Here is an example of the output generated by a correctly working program.

CSI 1101-X (winter,1999).  Assignment #3.
Robert Holte, student# 0123456.
tutorial section DGD-99, t.a. = kenny

enter a list of reals, all values on one line
5 4 7 6 1 2
inserting this value:  5.0
at_front:                  5.0
increasing, recursively:   5.0
increasing, loop:          5.0

inserting this value:  4.0
at_front:                  4.0  5.0
increasing, recursively:   4.0  5.0
increasing, loop:          4.0  5.0

inserting this value:  7.0
at_front:                  7.0  4.0  5.0
increasing, recursively:   4.0  5.0  7.0
increasing, loop:          4.0  5.0  7.0

inserting this value:  6.0
at_front:                  6.0  7.0  4.0  5.0
increasing, recursively:   4.0  5.0  6.0  7.0
increasing, loop:          4.0  5.0  6.0  7.0

inserting this value:  1.0
at_front:                  1.0  6.0  7.0  4.0  5.0
increasing, recursively:   1.0  4.0  5.0  6.0  7.0
increasing, loop:          1.0  4.0  5.0  6.0  7.0

inserting this value:  2.0
at_front:                  2.0  1.0  6.0  7.0  4.0  5.0
increasing, recursively:   1.0  2.0  4.0  5.0  6.0  7.0
increasing, loop:          1.0  2.0  4.0  5.0  6.0  7.0

about to destroy the lists
Amount of dynamic memory allocated but not returned (should be 0) 0


