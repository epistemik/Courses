{ Mark Sattolo  428500     CSI-1100A  DGD-1  TA: Chris Lankester   Class Notes p.79, Question 4 }program  FindFactors_recursive (input,output);{ Recursive program to find the prime factors of a number < 100. }{ Data Dictionary	   Givens:  L, N - L is an array of N numbers.Intermediates:	J - an index to write out L.	  Results:	Answer - a boolean which is true if L is in increasing order,	  					 and false otherwise. }	  					 const	MaxSize = 27;type	MarkArray = array[1..MaxSize] of integer;	var	N, X, L, Z, R, K : integer;	Prime, F : MarkArray;	Data : text;	DataFile : string;{ ************************************************************************ }	function InArray(Prime:MarkArray; N,X:integer):boolean;	var  J : integer;		 found : boolean; 	begin		InArray := false;		found := false;		J := N;		while (not found) and (J >= 1) do			if Prime[J] = X then				begin				InArray := true;				found := true;				end			else				J := J-1;	end;	{ function InArray }	{ ************************************************************************ }	function DivArray(Prime:MarkArray; N,X :integer):integer;		var  J : integer;		 found : boolean;		begin		found := false;		J := 1;		while not found do			if X mod Prime[J] = 0 then				begin				DivArray := Prime[J];				found := true;				end			else				J := J+1;	end;	{ function DivArray }		{ ************************************************************************ }	procedure FindPrime(var Prime:MarkArray; N,X:integer; var L:integer; var F:MarkArray);	var  Y : integer;	{ K - an index in the prompt for values. }    	begin	{ procedure FindPrime }		if InArray(Prime, N, X) then			begin			L := L + 1;			F[L] := X;			end		else			begin			Y := DivArray(Prime, N, X);			L := L + 1;			F[L] := Y;			FindPrime(Prime, N, X div Y, L, F);			end;	end;	{ procedure FillArray }  {*************************************************************************************}  begin  { program }	{ set input parameters }	write('Please enter the maximum size of the number to factor: ');	readln(Z);	write('Enter the name of the file containing the prime numbers under ', Z, ': ');	readln(DataFile);	assign(Data, DataFile);	reset(Data);	write('Please enter the number of elements in ', DataFile, ' : ');	readln(N);	{ read in the data to Prime }	for K := 1 to N do		read(Data, Prime[K]);	Close(Data);		repeat	{ start input loop }		repeat			write('Please enter a number from 1 to ', Z, ' to factor [or negative to exit] : ');			readln(X);		until X <= Z;	     	if X > 0 then	begin 		writeln;		writeln('************************************************');		writeln('     CSI-1100 Class Notes p.79, Question 4 ');		writeln('************************************************');		writeln;		if X = 1 then			begin			L := 1;			F[L] := 1;			end		else			begin			L := 0;			for R := 1 to N do				F[R] := 0;			FindPrime(Prime, N, X, L, F);			end;					write('The factors of ', X, ' are:  ');		for R := 1 to L-1 do			write(F[R]:1, ' * ');		write(F[L]:1);		writeln;		writeln('===============================================================');		writeln;	end;	{ if Z > 0 }	until X < 0;	writeln;	writeln('PROGRAM ENDED');end.	{ program }