{ Mark Sattolo  428500     CSI-1100A  DGD-1  TA: Chris Lankester   1996 Final Exam, Question 5 }program  ListOrder_recursive (input,output);{ Recursive program to find if an array is in increasing order. }{ Data Dictionary	   Givens:  L, N - L is an array of N numbers.Intermediates:	J - an index to write out L.	  Results:	Answer - a boolean which is true if L is in increasing order,	  					 and false otherwise. }const	MaxSize = 27;type	MarkArray = array[1..MaxSize] of integer;	var	N, J, K, Occ, Occ2 : integer;	L : MarkArray;	Answer : boolean;{ ************************************************************************ }	procedure LastOccurrence(L:MarkArray; N,K:integer; var P:integer);	begin		if L[N] = K then			P := N		else			if N = 1 then				P := 0			else				LastOccurrence(L, N-1, K, P);	end;	{ procedure LastOccurrence }		{ ************************************************************************ }	procedure LastOcc2(L:MarkArray; N,K:integer; var P:integer);	begin		if N = 1 then			if L[N] = K then				P := N			else				P := 0		else			if L[N] = K then				P := N			else				LastOcc2(L, N-1, K, P);	end;	{ procedure LastOccurrence2 }		{ ************************************************************************ }	procedure ListOrder(L:MarkArray; N:integer; var Answer:boolean);	begin		if N <= 1 then			Answer := true		else			if L[N-1] <= L[N] then				ListOrder(L, N-1, Answer)			else				Answer := false;	end;	{ procedure ListOrder }		{ ************************************************************************ }	procedure FillArray(var ArrayName : MarkArray; var ArraySize : integer);	var		K : integer;	{ K - an index in the prompt for values. }    	begin	{ procedure FillArray }	repeat		write('Please enter the size [ from 1 to ', MaxSize, ' ] of the array?  ');    	readln(ArraySize);    	writeln;    until (ArraySize <= MaxSize) and (ArraySize > 0);    	for K := 1 to ArraySize do        	begin            	write('Please enter array value #', K, '?  ');            	read(ArrayName[K])         	end { for }	end;	{ procedure FillArray }  {*************************************************************************************}  begin  { program }repeat	{ start input loop }	{ Get the input values }	writeln('For the array to be searched,');	FillArray(L, N);	writeln;		{ body 1 }	ListOrder(L, N, Answer);			{ write out the results }	writeln;	writeln('************************************************');	writeln('     1996 Final Exam, Question 5');	writeln('************************************************');	writeln;	for J := 1 to N do 		write(L[J]:5, ' ');	writeln;	writeln;	write('IS ');	if not Answer then		write('NOT ');	writeln('in increasing order.');	writeln;	writeln('************************************************');	writeln('     1997 Final Exam, Question 4');	writeln('************************************************');	writeln;	{ body 2 }	write('Enter the number [ 666 to exit ] to find the last occurrence in the array: ');	readln(K);		LastOccurrence(L, N, K, Occ);	LastOcc2(L, N, K, Occ2);		{ output 2}		writeln;	writeln('LastOccurrence gives ', Occ, ' as the position of the final ', K, ' in: ');	writeln;	for J := 1 to N do 		write(L[J]:5, ' ');	writeln;	writeln;	writeln('LastOccurrence2 gives ', Occ2, ' as the position of the final ', K, ' in: ');	writeln;	for J := 1 to N do 		write(L[J]:5, ' ');	writeln;	writeln;	writeln('===============================================================');	writeln;until K = 666;end.	{ program }