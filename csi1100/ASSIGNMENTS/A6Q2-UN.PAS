{ Mark Sattolo  428500     CSI-1100A  DGD-1  TA: Chris Lankester   Assignment 6, Question 2	}program  UnderMRoot (input,output);{ Prompt for a positive integer ╡ 999 and check that the entry is  valid, then calculate and output the square root of this integer.  }{ Data Dictionary	Givens:	S - a string representing a positive integer ╡ 999.Intermediates:	FinalNum - the integer equivalent of a valid entry for S.				Digit1, Digit2, Digit3 - integers representing their respective						characters in a valid S, or equal to -1.				Good - a boolean which is true if S is equivalent to a positive					 	integer ╡ 999, and false otherwise. 				Good1, Good2, Good3 - booleans which are true if their respective						characters in S represent digits, and false otherwise.	Results:	Sroot - the square root of FinalNum.	}var	Sorig, S : string;	Sroot : real;	FinalNum, Digit1, Digit2, Digit3 : integer;	Good, Good1, Good2, Good3 : boolean;	{ еееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееее }	procedure ConvertToDigit(TestChar : char; var DigitValue : integer;						 	 var IsDigit : boolean);						 	{ Checks if a given character is equivalent to a digit: if so, returns this	  digit as an integer along with a true-valued boolean, otherwise sets the	  digit value to -1 and the boolean to false. }		{ Data Dictionary		Givens:	TestChar - the character to test for being a digit.		Results:  DigitValue - the integer equivalent if TestChar is a digit, or -1.				  IsDigit - a boolean which is true if TestChar is a digit, and 							false otherwise.	}	begin		if ord(TestChar) in [48..57] then			begin				DigitValue := ord(TestChar) - 48;				IsDigit := true			end	{ if }		else			begin				DigitValue := -1;				IsDigit := false			end;	{ else }	end;	{ procedure ConvertToDigit }{ еееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееее }begin	{ program }  repeat	{ start the loop }  	Good := false;		{ Read in the program's givens. }	write('Please enter a positive integer ╡ 999: ');	readln(Sorig);	S := Sorig;		{ Take off leading '+' sign }		if S[1] = '+' then		delete(S, 1, 1);		{ Take off any leading zeroes }		while ((length(S) > 1) and (S[1] = '0')) do		delete(S, 1, 1);			{ Check for length, non-zero S, and that chars are digits }		if ((length(S) = 1) and (S[1] <> '0'))  then		ConvertToDigit(S[1], FinalNum, Good)	else if length(S) = 2 then		begin			ConvertToDigit(S[1], Digit1, Good1);			ConvertToDigit(S[2], Digit2, Good2);			Good := Good1 and Good2;			if Good then				FinalNum := (Digit1 * 10) + Digit2;		end	{ else if length(S) = 2 }			else if length(S) = 3 then				begin					ConvertToDigit(S[1], Digit1, Good1);					ConvertToDigit(S[2], Digit2, Good2);					ConvertToDigit(S[3], Digit3, Good3);					Good := Good1 and Good2 and Good3;					if Good then						FinalNum := (Digit1 * 100) + (Digit2 * 10) + Digit3;				end;	{ else if length(S) = 3 }	if not Good then		begin			writeln;			writeln('Sorry, but "', Sorig, '" is NOT a positive integer ╡ 999!');			writeln;			writeln('------------------------------------------------------');			writeln;		end;	{ if not Good }  until Good;	{ finish the loop }  	  	{ perform the calculation }  	  	Sroot := SQRT(FinalNum);		{ write out the results }	writeln;	writeln('еееееееееееееееееееееееееееееееееееееееееееееееееееееее');	writeln('Mark Sattolo  428500');	writeln('CSI-1100A  DGD-1  TA: Chris Lankester');	writeln('Assignment 6, Question 2');	writeln('еееееееееееееееееееееееееееееееееееееееееееееееееееееее');	writeln;	writeln('The integer you entered was ', S:3);	writeln;	writeln('The square root of ', S, ' is ', Sroot:5:2);end.	{ program }