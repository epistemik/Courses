<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0065)http://www.site.uottawa.ca/ftppub/courses/Fall/csi3125/ass03.html -->
<HTML><HEAD><TITLE>CSI 3125 Assignment 3</TITLE>
<META content="text/html; charset=windows-1252" http-equiv=Content-Type>
<META content="MSHTML 5.00.3018.900" name=GENERATOR></HEAD>
<BODY background="CSI 3125 Assignment 3_files/baby.jpg" bgColor=white 
link=#800060 vLink=#800060>
<TABLE border=0 cellPadding=5 cellSpacing=0 width="100%">
  <TBODY>
  <TR>
    <TD align=right bgColor=gray colSpan=8 vAlign=center><A 
      href="http://www.site.uottawa.ca/ftppub/courses/Fall/csi3125/index.html"><IMG 
      align=left alt="CSI 3125 Home" border=0 
      src="CSI 3125 Assignment 3_files/3125.gif" valign="center"></A><FONT 
      color=white size=+3>CSI 3125 Assignment 3</FONT></TD></TR>
  <TR bgColor=#e0e0e0>
    <TD vAlign=top><FONT color=white>
      <CENTER><A 
      href="http://www.site.uottawa.ca/ftppub/courses/Fall/csi3125/3125outline.html"><IMG 
      alt=Syllabus border=0 
      src="CSI 3125 Assignment 3_files/course.gif"></A></CENTER></FONT></TD>
    <TD vAlign=top><FONT color=white>
      <CENTER><A 
      href="http://www.site.uottawa.ca/ftppub/courses/Fall/csi3125/faq.html"><IMG 
      alt=FAQ border=0 
      src="CSI 3125 Assignment 3_files/faq.gif"></A></CENTER></FONT></TD>
    <TD vAlign=top><FONT color=white>
      <CENTER><A 
      href="http://www.site.uottawa.ca/ftppub/courses/Fall/csi3125/dates.html"><IMG 
      alt="Important Dates" border=0 
      src="CSI 3125 Assignment 3_files/dates.gif"></A></CENTER></FONT></TD>
    <TD vAlign=top><FONT color=white>
      <CENTER><A 
      href="http://www.site.uottawa.ca/ftppub/courses/Fall/csi3125/rosters.html"><IMG 
      alt="Class lists" border=0 
      src="CSI 3125 Assignment 3_files/rosters.gif"></A><BR></CENTER></FONT></TD>
    <TD vAlign=top><FONT color=white>
      <CENTER><A 
      href="http://www.site.uottawa.ca/ftppub/courses/Fall/csi3125/marks.html"><IMG 
      alt=Marks border=0 
      src="CSI 3125 Assignment 3_files/marks.gif"></A></CENTER></FONT></TD>
    <TD vAlign=top><FONT color=white>
      <CENTER><A 
      href="http://www.site.uottawa.ca/ftppub/courses/Fall/csi3125/news.html"><IMG 
      alt=News border=0 
      src="CSI 3125 Assignment 3_files/news.gif"></A></CENTER></FONT></TD>
    <TD vAlign=top><FONT color=white>
      <CENTER><A 
      href="http://www.site.uottawa.ca/ftppub/courses/Fall/csi3125/goodies.html"><IMG 
      alt=Stuff border=0 
      src="CSI 3125 Assignment 3_files/gift.gif"></A></CENTER></FONT></TD>
    <TD vAlign=top><FONT color=white>
      <CENTER><A 
      href="http://www.site.uottawa.ca/ftppub/courses/Fall/csi3125/faq.html#when_to_email_prof"><IMG 
      alt="email the prof" border=0 
      src="CSI 3125 Assignment 3_files/kenny.gif"></A></CENTER></FONT></TD></TR></TBODY></TABLE>
<P>
<TABLE border=0>
  <TBODY>
  <TR>
    <TD align=right vAlign=top><I><B>Marks:</B></I></TD>
    <TD><B>10</B></TD></TR>
  <TR>
    <TD align=right vAlign=top><I><B>Due&nbsp;Time:</B></I></TD>
    <TD><B>Friday, December 03, 1999, 12:00pm (NOON!)</B></TD></TR>
  <TR>
    <TD></TD>
    <TD><I>Absolutely no late assignments will be accepted.</I></TD></TR>
  <TR>
    <TD align=right vAlign=top><I><B>Due&nbsp;Place:</B></I></TD>
    <TD><B>Locked box for CSI3125, 3rd floor MCD</B></TD></TR></TBODY></TABLE>
<P>
<HR>

<H2>Object-Oriented Programming: Containers and Other Stuff</H2>
<H3>The Story</H3>Making babies is not as easy as it seems. I don't have any 
babies myself, but I read about it in a book once. It takes two humans: one of 
them a female and one of them a male. The female is the one who actually 
<I>has</I> the baby but the male plays a role too. But that's not all... 
<UL>
  <LI>the female and male must be in a family 
  <LI>the female must be old enough 
  <UL>
    <LI>16 is probably old enough </LI></UL>
  <LI>the male must have enough "mojo" 
  <UL>
    <LI>every male is born with zero mojo 
    <LI>when a male ages by one year, he gains one mojo 
    <LI>18 is probably enough mojo to have a baby 
    <LI>when a female has a baby with a male, the male loses two mojo </LI></UL>
  <LI>if the female is old enough and the male has enough mojo then the female 
  has a new baby 
  <UL>
    <LI>if the last baby this female had was a female, the new baby will be a 
    male 
    <LI>if the last baby this female had was a male, the new baby will be a 
    female 
    <LI>if the new baby is a female, it will have the same colour eyes as the 
    father and the same colour hair as the mother 
    <LI>if the new baby is a male, it will have the same colour eyes as the 
    mother and the same colour hair as the father </LI></UL>
  <LI>there's a limit on the number of babies a female can have 
  <UL>
    <LI>after about 4 babies, the parents become too busy to have any more 
  </LI></UL></LI></UL>
<P>Or so I've heard.
<P>
<H3>The Assignment</H3>Write a program in C++ that simulates having babies. You 
should be able to complete the assignment by properly defining the five classes 
in the program below. Make sure your program is debugged and works properly 
before trying to make any babies yourself.
<P>
<H3>The Hints</H3>
<UL>
  <LI>look carefully at the program below: from it you can determine many of the 
  member functions and variables that you will have to define in your classes. 
  <LI>avoid using public data members in your classes 
  <LI>avoid using <TT>switch</TT> statements in your member functions 
  <LI>don't panic if you don't know what mojo is: just make sure that each baby 
  male starts with mojo=0 and add 1 every time the male ages by one year; and 
  make sure that a female can't have a baby if the male has less than 18 mojo. 
  <LI>some things are specific to females only (like having babies); some things 
  are specific to males only (like gaining and losing mojo); some things apply 
  to all humans (males and females); you should define your classes to reflect 
  these differences and commonalities 
  <LI>you can see from the sample output that some of the member functions are 
  writing messages to the screen </LI></UL>
<P>
<H3>Some Output</H3>Here is some sample output from my version of the program. 
The characters in bold are the characters that I typed in from the command line.
<P>
<TABLE border=1 cellPadding=2>
  <TBODY>
  <TR>
    <TD bgColor=white><PRE>{tamale1.site.uottawa.ca}kbarker(13) <B>makebabies</B>
girl: Brown eyes, auburn hair
boy: Blue eyes, brunette hair
Do you want to make babies? <B>y</B>
  mother too young
Do you want to make more babies? <B>y</B>
  not enough mojo... try again next year
Do you want to make more babies? <B>y</B>
  not enough mojo... try again next year
Do you want to make more babies? <B>y</B>
  having a baby!
Do you want to make more babies? <B>y</B>
  not enough mojo... try again next year
Do you want to make more babies? <B>y</B>
  having a baby!
Do you want to make more babies? <B>y</B>
  not enough mojo... try again next year
Do you want to make more babies? <B>y</B>
  having a baby!
Do you want to make more babies? <B>y</B>
  not enough mojo... try again next year
Do you want to make more babies? <B>y</B>
  having a baby!
Do you want to make more babies? <B>y</B>
  parents too busy
Do you want to make more babies? <B>y</B>
  parents too busy
Do you want to make more babies? <B>n</B>
4 children
girl: Blue eyes, auburn hair
boy: Brown eyes, brunette hair
girl: Blue eyes, auburn hair
boy: Brown eyes, brunette hair

{tamale1.site.uottawa.ca}kbarker(14)
</PRE></TD></TR></TBODY></TABLE>
<P>
<H3>The Warnings</H3>My solution to the program works in DOS when compiled with 
<I>Borland C++ 5.0A</I> and in Unix when compiled with <I>GNU g++</I>.
<P>
<H3>The Program</H3>Here is the program with the class definitions missing. You 
have to supply definitions for the five classes: 
<OL>
  <LI><TT>human</TT> 
  <LI><TT>male</TT> 
  <LI><TT>female</TT> 
  <LI><TT>children</TT> 
  <LI><TT>family</TT> </LI></OL>
<TABLE border=1 cellPadding=2>
  <TBODY>
  <TR>
    <TD bgColor=white><PRE>#include &lt;iostream.h&gt;

typedef enum { blue, brown, green, red } eye_colour;
typedef enum { auburn, blonde, brunette } hair_colour;
typedef enum { f, m } sex;

class human {

/* you must define the human class */

};

class male: public human {

/* you must define the male class */

};

class female: public human {

/* you must define the female class */

};

class child {

/* you must define the child class: child is the class used in the
   container class: family. Each child object has a pointer to an
   actual human and a pointer to the next child in the family      */

};

class family {

/* you must define the family class: family is a container class
   containing a pointer to a mother and a father, the number of
   children in the family, and a pointer to the children. Family
   objects can add new children and go through the list of children
   to print out their vital statistics (sex, eye colour, hair colour).  */

};

int main() {
  female eve;
  male adam;
  human *baby;
  family *theAppleFamily;
  char ch;
  int i;

  eve.set_eyes(brown);          /* set Eve's eye and hair colour           */
  eve.set_hair(auburn);
  adam.set_eyes(blue);          /* set Adam's eye and hair colour          */
  adam.set_hair(brunette);

  eve.print_vitals();           /* print out their vital statistics        */
  adam.print_vitals();

  for(i = 0; i &lt; 15; i++) {     /* nothing interesting happens when they   */
    eve.age();                  /* are young, so age them both by 15 years */
    adam.age();
  }

                                /* create a new family with Eve and Adam   */
  theAppleFamily = new family(&amp;eve, &amp;adam);

  cout &lt;&lt; "Do you want to make babies? ";
  cin &gt;&gt; ch;

  while(ch == 'y' || ch == 'Y') {
    baby = eve.have_baby(adam); /* Eve tries to have a baby with Adam      */

    if(baby) {                  /* If they were successful (baby != NULL)  */
      adam.lose_mojo();         /* Adam loses two mojos                    */
      theAppleFamily-&gt;add_child(baby);
                                /* and we add the baby to the family       */
    }

    eve.age();                  /* Adam and Eve get one year older         */
    adam.age();

    cout &lt;&lt; "Do you want to make more babies? ";
    cin &gt;&gt; ch;
  }

  theAppleFamily-&gt;print_children();
}
</PRE></TD></TR></TBODY></TABLE>
<P>
<TABLE bgColor=gray border=0 cellPadding=0 width="100%">
  <TBODY>
  <TR>
    <TD align=middle><FONT size=-5>&nbsp;</FONT></TD></TR></TBODY></TABLE><FONT 
size=-2><I>(last update November 16, 1999)</I></FONT> </P></BODY></HTML>
