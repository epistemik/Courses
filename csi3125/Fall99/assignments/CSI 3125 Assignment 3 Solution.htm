<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0065)http://www.site.uottawa.ca/ftppub/courses/Fall/csi3125/sol03.html -->
<HTML><HEAD><TITLE>CSI 3125 Assignment 3 Solution</TITLE>
<META content="text/html; charset=windows-1252" http-equiv=Content-Type>
<META content="MSHTML 5.00.3018.900" name=GENERATOR></HEAD>
<BODY bgColor=white link=#800060 vLink=#800060>
<TABLE border=0 cellPadding=5 cellSpacing=0 width="100%">
  <TBODY>
  <TR>
    <TD align=right bgColor=gray colSpan=8 vAlign=center><A 
      href="http://www.site.uottawa.ca/ftppub/courses/Fall/csi3125/index.html"><IMG 
      align=left alt="CSI 3125 Home" border=0 
      src="CSI 3125 Assignment 3 Solution_files/3125.gif" 
      valign="center"></A><FONT color=white size=+3>CSI 3125 Assignment 3 
      Solution</FONT></TD></TR>
  <TR bgColor=#e0e0e0>
    <TD vAlign=top><FONT color=white>
      <CENTER><A 
      href="http://www.site.uottawa.ca/ftppub/courses/Fall/csi3125/3125outline.html"><IMG 
      alt=Syllabus border=0 
      src="CSI 3125 Assignment 3 Solution_files/course.gif"></A></CENTER></FONT></TD>
    <TD vAlign=top><FONT color=white>
      <CENTER><A 
      href="http://www.site.uottawa.ca/ftppub/courses/Fall/csi3125/faq.html"><IMG 
      alt=FAQ border=0 
      src="CSI 3125 Assignment 3 Solution_files/faq.gif"></A></CENTER></FONT></TD>
    <TD vAlign=top><FONT color=white>
      <CENTER><A 
      href="http://www.site.uottawa.ca/ftppub/courses/Fall/csi3125/dates.html"><IMG 
      alt="Important Dates" border=0 
      src="CSI 3125 Assignment 3 Solution_files/dates.gif"></A></CENTER></FONT></TD>
    <TD vAlign=top><FONT color=white>
      <CENTER><A 
      href="http://www.site.uottawa.ca/ftppub/courses/Fall/csi3125/rosters.html"><IMG 
      alt="Class lists" border=0 
      src="CSI 3125 Assignment 3 Solution_files/rosters.gif"></A><BR></CENTER></FONT></TD>
    <TD vAlign=top><FONT color=white>
      <CENTER><A 
      href="http://www.site.uottawa.ca/ftppub/courses/Fall/csi3125/marks.html"><IMG 
      alt=Marks border=0 
      src="CSI 3125 Assignment 3 Solution_files/marks.gif"></A></CENTER></FONT></TD>
    <TD vAlign=top><FONT color=white>
      <CENTER><A 
      href="http://www.site.uottawa.ca/ftppub/courses/Fall/csi3125/news.html"><IMG 
      alt=News border=0 
      src="CSI 3125 Assignment 3 Solution_files/news.gif"></A></CENTER></FONT></TD>
    <TD vAlign=top><FONT color=white>
      <CENTER><A 
      href="http://www.site.uottawa.ca/ftppub/courses/Fall/csi3125/goodies.html"><IMG 
      alt=Stuff border=0 
      src="CSI 3125 Assignment 3 Solution_files/gift.gif"></A></CENTER></FONT></TD>
    <TD vAlign=top><FONT color=white>
      <CENTER><A 
      href="http://www.site.uottawa.ca/ftppub/courses/Fall/csi3125/faq.html#when_to_email_prof"><IMG 
      alt="email the prof" border=0 
      src="CSI 3125 Assignment 3 Solution_files/kenny.gif"></A></CENTER></FONT></TD></TR></TBODY></TABLE>
<P>Here is my solution to assignment 3. As usual, your mileage may vary.
<P>
<HR>

<P>
<TABLE border=1 cellPadding=2>
  <TBODY>
  <TR>
    <TD bgColor=white><PRE>#include &lt;iostream.h&gt;

typedef enum { blue, brown, green, red } eye_colour;
typedef enum { auburn, blonde, brunette } hair_colour;
typedef enum { f, m } sex;

class human {
  private: eye_colour ec;
           hair_colour hc;
           int a;
           sex s;
  public:
    human(): a(0) { }
    virtual void age() { a++; }
    void set_eyes(eye_colour C) { ec = C; }
    void set_hair(hair_colour C) { hc = C; }
    void set_sex(sex S1) { s = S1; }
    int get_age() { return a; }
    eye_colour get_eyes() { return ec; }
    hair_colour get_hair() { return hc; }
    sex get_sex() { return s; }
    void print_vitals() {
      if(s == f)
        cout &lt;&lt; "girl: ";
      else
        cout &lt;&lt; "boy: ";

      if(ec == blue) cout &lt;&lt; "Blue ";
      if(ec == brown) cout &lt;&lt; "Brown ";
      if(ec == green) cout &lt;&lt; "Green ";
      if(ec == red) cout &lt;&lt; "Red ";

      cout &lt;&lt; "eyes, ";

      if(hc == auburn) cout &lt;&lt; "auburn ";
      if(hc == blonde) cout &lt;&lt; "blonde ";
      if(hc == brunette) cout &lt;&lt; "brunette ";

      cout &lt;&lt; "hair\n";
    }

};

class male: public human {
  private: int mojo;
  private:
    void gain_mojo() { mojo++; }
  public:
    male(): mojo(0) { this-&gt;set_sex(m); }
    void lose_mojo() { mojo -= 2; }
    void age() { this-&gt;human::age(); gain_mojo(); }
    int got_mojo() { return (mojo &gt;= 18); }
};

class female: public human {
  private: int num_births;      /* the mother remembers how many babies she has */
           sex lastsex;         /* and what the sex of the last baby was */
  public:
    female(): num_births(0) {
      this-&gt;set_sex(f);
      lastsex = f;
    }
    human *have_baby(male father) {      /* pointer because may be boy or girl */
      if(this-&gt;get_age() &lt; 16) {         /* must be at least 16 */
        cout &lt;&lt; "  mother too young\n";
        return NULL;
      }
      if(num_births &gt; 3) {
        cout &lt;&lt; "  parents too busy\n";
        return NULL;
      }
      if(father.got_mojo()) {            /* the father must have mojo */
        human *baby;

        cout &lt;&lt; "  having a baby!\n";
        num_births++;
        if(lastsex == m) {
          lastsex = f;
          baby = new female;
          baby-&gt;set_eyes(father.get_eyes());
          baby-&gt;set_hair(this-&gt;get_hair());
          return baby;
        }
        else {
          lastsex = m;
          baby = new male;
          baby-&gt;set_eyes(this-&gt;get_eyes());
          baby-&gt;set_hair(father.get_hair());
          return baby;
        }
      }
      else {
        cout &lt;&lt; "  not enough mojo... try again next year\n";
        return NULL;
      }
    }
};

class child {
  friend class family;
  private: child *next_child;
           human *this_child;
  private:
    child(human *baby, child *children) {
      this_child = baby;
      next_child = children;
    }
};

class family {
  private: female *mother;
           male *father;
           int num_kids;
           child *kids;
           child *current_kid;
  public:
    family(female *mo, male *fa) {
      mother = mo;
      father = fa;
      num_kids = 0;
      kids = NULL;
      current_kid = NULL;
    }
    void add_child(human *baby) {
      kids = new child(baby, kids);
      current_kid = kids;
      num_kids++;
    }
    void print_children() {
      cout &lt;&lt; num_kids &lt;&lt; " children\n";
      current_kid = kids;
      while(current_kid) {
        human *this_kid = current_kid-&gt;this_child;
        this_kid-&gt;print_vitals();
        current_kid = current_kid-&gt;next_child;
      }
    }
};

int main() {
  female eve;
  male adam;
  human *baby;
  family *theAppleFamily;
  char ch;
  int i;

  eve.set_eyes(brown);          /* set Eve's eye and hair colour           */
  eve.set_hair(auburn);
  adam.set_eyes(blue);          /* set Adam's eye and hair colour          */
  adam.set_hair(brunette);

  eve.print_vitals();           /* print out their vital statistics        */
  adam.print_vitals();

  for(i = 0; i &lt; 15; i++) {     /* nothing interesting happens when they   */
    eve.age();                  /* are young, so age them both by 15 years */
    adam.age();
  }

                                /* create a new family with Eve and Adam   */
  theAppleFamily = new family(&amp;eve, &amp;adam);

  cout &lt;&lt; "Do you want to make babies? ";
  cin &gt;&gt; ch;

  while(ch == 'y' || ch == 'Y') {
    baby = eve.have_baby(adam); /* Eve tries to have a baby with Adam      */

    if(baby) {                  /* If they were successful (baby != NULL)  */
      adam.lose_mojo();         /* Adam loses two mojos                    */
      theAppleFamily-&gt;add_child(baby);
                                /* and we add the baby to the family       */
    }

    eve.age();                  /* Adam and Eve get one year older         */
    adam.age();

    cout &lt;&lt; "Do you want to make more babies? ";
    cin &gt;&gt; ch;
  }

  theAppleFamily-&gt;print_children();
}
</PRE></TD></TR></TBODY></TABLE>
<P>
<TABLE bgColor=gray border=0 cellPadding=0 width="100%">
  <TBODY>
  <TR>
    <TD align=middle><FONT size=-5>&nbsp;</FONT></TD></TR></TBODY></TABLE><FONT 
size=-2><I>(last update December 09, 1999)</I></FONT> </P></BODY></HTML>
