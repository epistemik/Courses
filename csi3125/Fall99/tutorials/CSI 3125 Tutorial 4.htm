<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0065)http://www.site.uottawa.ca/ftppub/courses/Fall/csi3125/tut04.html -->
<HTML><HEAD><TITLE>CSI 3125 Tutorial 4</TITLE>
<META content="text/html; charset=windows-1252" http-equiv=Content-Type>
<META content="MSHTML 5.00.3018.900" name=GENERATOR></HEAD>
<BODY bgColor=white link=#800060 vLink=#800060>
<TABLE border=0 cellPadding=5 cellSpacing=0 width="100%">
  <TBODY>
  <TR>
    <TD align=right bgColor=gray colSpan=8 vAlign=center><A 
      href="http://www.site.uottawa.ca/ftppub/courses/Fall/csi3125/index.html"><IMG 
      align=left alt="CSI 3125 Home" border=0 
      src="CSI 3125 Tutorial 4_files/3125.gif" valign="center"></A><FONT 
      color=white size=+3>CSI 3125 Tutorial 4</FONT></TD></TR>
  <TR bgColor=#e0e0e0>
    <TD vAlign=top><FONT color=white>
      <CENTER><A 
      href="http://www.site.uottawa.ca/ftppub/courses/Fall/csi3125/3125outline.html"><IMG 
      alt=Syllabus border=0 
      src="CSI 3125 Tutorial 4_files/course.gif"></A></CENTER></FONT></TD>
    <TD vAlign=top><FONT color=white>
      <CENTER><A 
      href="http://www.site.uottawa.ca/ftppub/courses/Fall/csi3125/faq.html"><IMG 
      alt=FAQ border=0 
      src="CSI 3125 Tutorial 4_files/faq.gif"></A></CENTER></FONT></TD>
    <TD vAlign=top><FONT color=white>
      <CENTER><A 
      href="http://www.site.uottawa.ca/ftppub/courses/Fall/csi3125/dates.html"><IMG 
      alt="Important Dates" border=0 
      src="CSI 3125 Tutorial 4_files/dates.gif"></A></CENTER></FONT></TD>
    <TD vAlign=top><FONT color=white>
      <CENTER><A 
      href="http://www.site.uottawa.ca/ftppub/courses/Fall/csi3125/rosters.html"><IMG 
      alt="Class lists" border=0 
      src="CSI 3125 Tutorial 4_files/rosters.gif"></A><BR></CENTER></FONT></TD>
    <TD vAlign=top><FONT color=white>
      <CENTER><A 
      href="http://www.site.uottawa.ca/ftppub/courses/Fall/csi3125/marks.html"><IMG 
      alt=Marks border=0 
      src="CSI 3125 Tutorial 4_files/marks.gif"></A></CENTER></FONT></TD>
    <TD vAlign=top><FONT color=white>
      <CENTER><A 
      href="http://www.site.uottawa.ca/ftppub/courses/Fall/csi3125/news.html"><IMG 
      alt=News border=0 
      src="CSI 3125 Tutorial 4_files/news.gif"></A></CENTER></FONT></TD>
    <TD vAlign=top><FONT color=white>
      <CENTER><A 
      href="http://www.site.uottawa.ca/ftppub/courses/Fall/csi3125/goodies.html"><IMG 
      alt=Stuff border=0 
      src="CSI 3125 Tutorial 4_files/gift.gif"></A></CENTER></FONT></TD>
    <TD vAlign=top><FONT color=white>
      <CENTER><A 
      href="http://www.site.uottawa.ca/ftppub/courses/Fall/csi3125/faq.html#when_to_email_prof"><IMG 
      alt="email the prof" border=0 
      src="CSI 3125 Tutorial 4_files/kenny.gif"></A></CENTER></FONT></TD></TR></TBODY></TABLE>
<P>Tutorial 4 is a review quiz for the midterm exam. I've tried to cover most of 
the major areas with these questions. But just because something doesn't appear 
here doesn't mean it won't be on the exam!
<P>The exam is: 
<UL>
  <LI>on Monday, November 01, 1999 
  <LI>in MCD 146 (the class room) 
  <LI>80 minutes long 
  <LI>mandatory 
  <LI>worth 25 marks toward the final mark for the course 
  <LI><I>closed</I> book, <I>closed</I> notes, <I>closed</I> everything else 
  <LI>free of calculations (meaning calculators aren't allowed) </LI></UL>
<HR>

<P>
<OL>
  <LI>What is abstraction?
  <P><FONT color=green>hiding certain complexities to allow a simplified view of 
  something; in programming languages, abstraction hides the details of 
  implementation of processes and data types</FONT>
  <P></P>
  <LI>What is orthogonality?
  <P><FONT color=green>the degree to which the elements of a programming 
  language can be freely combined; a language with very few restrictions on the 
  way constructs can be combined is highly orthogonal</FONT>
  <P></P>
  <LI>What is a compiler?
  <P><FONT color=green>a language processor (translator) that translates the 
  statements written in a source language to a target language; the source 
  language is usually a higher level programming language; with a compiler, all 
  statements in the source language program are translated into the target 
  language at the same time, before execution; translation and execution are 
  separate; once the program is translated it can be executed at will without 
  translating again</FONT>
  <P></P>
  <LI>What is an interpreter?
  <P><FONT color=green>a language processor (translator) that translates small 
  groups of statements in the source language and then executes them before 
  translating the rest of the program; translation and execution are 
  interweaved; the program statements are translated every time the program is 
  executed</FONT>
  <P></P>
  <LI>What is intermediate code?
  <P><FONT color=green>often a program is compiled from the source language to a 
  lower level language that is not the native machine language of the computer 
  running the program; instead the intermediate language is a generic, portable 
  low level language that is interpreted during program execution</FONT>
  <P></P>
  <LI>What is a language?
  <P><FONT color=green>a set of sentences built of words from a dictionary 
  combined according to a set of rules</FONT>
  <P></P>
  <LI>What is syntax?
  <P><FONT color=green>the rules that define the structure of combinations of 
  words forming legal sentences</FONT>
  <P></P>
  <LI>What is semantics?
  <P><FONT color=green>the meaning of words and combinations of words</FONT>
  <P></P>
  <LI>What are the four parts of a formal grammar?
  <P><FONT color=green>production rules (a.k.a. rewrite rules), terminal 
  symbols, nonterminal symbols, goal symbol (a.k.a. start symbol)</FONT>
  <P></P>
  <LI>What are the terminals, nonterminals and goal in the following grammar?
  <P><TT>S ::= C ? E : E<BR>C ::= ( C2 )<BR>C ::= C2<BR>C2 ::= t | f | E R 
  E<BR>E ::= E A E<BR>R ::= &gt; | &lt; | = | ^=<BR>A ::= + | - | * | /<BR>E ::= 
  X | Y | Z | N<BR>N ::= D { D }<BR>D ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 
  <BR></TT>
  <P><FONT color=green>terminals: 0 to 9, X, Y, Z, t, f, (, ), {, }, ?, :, +, -, 
  *, /, &gt;, &lt;, =, ^=<BR>nonterminals: D, N, E, A, R, C2, C, S<BR>goal: 
  S</FONT>
  <P></P>
  <LI>Do a top-down derivation of the sentence 
  <TT>(&nbsp;X&nbsp;*&nbsp;17&nbsp;^=&nbsp;Y&nbsp;)&nbsp;?&nbsp;42&nbsp;:&nbsp;Y&nbsp;/&nbsp;Z&nbsp;</TT>
  <P><FONT color=green><TT><U>S</U><BR><U>C</U> ? E : E<BR>( <U>C2</U> ) ? E : 
  E<BR>( <U>E</U> R E ) ? E : E<BR>( <U>E</U> A E R E ) ? E : E<BR>( X <U>A</U> 
  E R E ) ? E : E<BR>( X * <U>E</U> R E ) ? E : E<BR>( X * <U>N</U> R E ) ? E : 
  E<BR>( X * <U>D</U> D R E ) ? E : E<BR>( X * 1 <U>D</U> R E ) ? E : E<BR>( X * 
  17 <U>R</U> E ) ? E : E<BR>( X * 17 ^= <U>E</U> ) ? E : E<BR>( X * 17 ^= Y ) ? 
  <U>E</U> : E<BR>( X * 17 ^= Y ) ? <U>N</U> : E<BR>( X * 17 ^= Y ) ? <U>D</U> D 
  : E<BR>( X * 17 ^= Y ) ? 4 <U>D</U> : E<BR>( X * 17 ^= Y ) ? 42 : 
  <U>E</U><BR>( X * 17 ^= Y ) ? 42 : <U>E</U> A E<BR>( X * 17 ^= Y ) ? 42 : Y 
  <U>A</U> E<BR>( X * 17 ^= Y ) ? 42 : Y / <U>E</U><BR>( X * 17 ^= Y ) ? 42 : Y 
  / Z</TT> </FONT>
  <P></P>
  <LI>What is an ambiguous grammar?
  <P><FONT color=green>a grammar that can produce more than one parse tree for 
  at least one sentence in the language it describes</FONT>
  <P></P>
  <LI>Show that the grammar above is ambiguous.
  <P><FONT color=green>Here are two parse trees (pardon the format) for the 
  sentence <TT>t&nbsp;?&nbsp;X&nbsp;:&nbsp;X&nbsp;+&nbsp;Y&nbsp;*&nbsp;Z</TT><PRE>S --&gt; C --&gt; C2 --&gt; t
  `-&gt; ?
  `-&gt; E --&gt; X
  `-&gt; : 
  `-&gt; E --&gt; E --&gt; E --&gt; X
        |     `-&gt; A --&gt; +
        |     `-&gt; E --&gt; Y
        |
        `-&gt; A --&gt; *
        `-&gt; E --&gt; Z


S --&gt; C --&gt; C2 --&gt; t
  `-&gt; ?
  `-&gt; E --&gt; X
  `-&gt; : 
  `-&gt; E --&gt; E --&gt; X
        `-&gt; A --&gt; +
        `-&gt; E --&gt; E --&gt; Y
              `-&gt; A --&gt; *
              `-&gt; E --&gt; Z
</PRE></FONT>
  <LI>What are the six attributes of a variable in imperative languages?
  <P><FONT color=green>name, type, value, address, lifetime, scope</FONT>
  <P></P>
  <LI>What is aliasing?
  <P><FONT color=green>having more than one name to refer to the same 
  variable</FONT>
  <P></P>
  <LI>When are the three times that binding of a variable to its attributes can 
  take place?
  <P><FONT color=green>compile time, load time, run time</FONT>
  <P></P>
  <LI>What is a static variable?
  <P><FONT color=green>a variable whose address is bound at load time</FONT>
  <P></P>
  <LI>What is a dynamic variable?
  <P><FONT color=green>a variable whose address is bound at run time (such as a 
  variable created through dynamic memory allocation, or a local variable in a 
  subprogram, or a subprogram parameter, etc.)</FONT>
  <P></P>
  <LI>What is the scope of a variable?
  <P><FONT color=green>the set of statements in a program that have access to 
  the variable through its name</FONT>
  <P></P>
  <LI>What is the referencing environment of a statement?
  <P><FONT color=green>the set of names visible to the statement</FONT>
  <P></P>
  <LI>What is static scoping?
  <P><FONT color=green>a name is visible everywhere inside the block in which 
  the name is defined</FONT>
  <P></P>
  <LI>What is dynamic scoping?
  <P><FONT color=green>a name is visible within the block in which it is defined 
  and within any subprogram called from the statements inside the block in which 
  the name is defined</FONT>
  <P></P>
  <LI>What is a primitive data type?
  <P><FONT color=green>a data type not not defined in terms of some combination 
  of other types (the primitives are usually integer, float, character, boolean, 
  and sometimes a few others (bit, pointer, etc.))</FONT>
  <P></P>
  <LI>What is a complex data type?
  <P><FONT color=green>a data type that <I>is</I> defined in terms of some 
  combination of other types (array, string, record, union, enum, pointer, 
  etc.)</FONT>
  <P></P>
  <LI>What is an ordinal type?
  <P><FONT color=green>a type for which the operations of successor and 
  predecessor are well defined (integer, character, enum, etc.)</FONT>
  <P></P>
  <LI>In terms of memory allocation/subscript binding, what are the four kinds 
  of arrays?
  <P><FONT color=green>static (size fixed, static memory allocation), semistatic 
  (size fixed, dynamic memory allocation), semidynamic (size determined at 
  runtime but doesn't change during execution), dynamic (size can change during 
  execution)</FONT>
  <P></P>
  <LI>Given Row Major mapping, where in the array[2..10, 3..6] of boolean is 
  [4,4]?
  <P><FONT color=green>Row Major: Base + 9 bytes</FONT>
  <P></P>
  <LI>What is a dangling reference?
  <P><FONT color=green>the use of a pointer variable after its target variable 
  has had its address unbound</FONT>
  <P></P>
  <LI>What is garbage?
  <P><FONT color=green>a variable with a bound address that is not accessible 
  (because it has no name and there is no record of its address)</FONT>
  <P></P>
  <LI>What is type compatibility by name?
  <P><FONT color=green>two complex variables are compatible only if they are 
  both declared as instances of types with the exact same name</FONT>
  <P></P>
  <LI>What is compatibility by structure?
  <P><FONT color=green>two complex variables are compatible as long as all of 
  their components are pairwise compatible</FONT>
  <P></P>
  <LI>What is an operator precedence rule?
  <P><FONT color=green>a rule dictating the order in which different operators 
  are evaluated in expressions containing different operators</FONT>
  <P></P>
  <LI>What is an associativity rule?
  <P><FONT color=green>a rule dictating the order in which instances of 
  operators of equal precedence are evaluated (in expressions containing 
  operators of equal precedence)</FONT>
  <P></P>
  <LI>What is operator overloading?
  <P><FONT color=green>the use of the same operator symbol for more than one 
  operation (+ for both integer and floating point addition; - for subtraction 
  and set difference; * for multiplication and pointer dereferencing; 
  etc.)</FONT>
  <P></P>
  <LI>What is a side effect?
  <P><FONT color=green>the modification by a function of one of its parameters; 
  since functions can appear in expressions, a side effect changes the 
  interpretation of one of the participants in the expression (the parameter 
  being changed by the function)</FONT>
  <P></P>
  <LI>What are the three fundamental control mechanisms in imperative languages?
  <P><FONT color=green>sequence (begin...end), two-way selection (if-then-else), 
  iteration (while-do)</FONT>
  <P></P>
  <LI>The notes describe five parameter passing modes. What are they and how do 
  they work?
  <P><FONT color=green>
  <OL type=i>
    <LI>pass-by-value: the formal parameter is like a local variable that gets 
    initialized to the value of the actual parameter 
    <LI>pass-by-result: the formal parameter is like a local variable whose 
    final value in the subprogram is copied to the actual variable when the 
    subprogram terminates 
    <LI>pass-by-value-result: the formal parameter is like a local variable 
    initialized to the value of the actual parameter and whose value is copied 
    to the actual parameter when the subprogram terminates 
    <LI>pass-by-reference: the formal parameter is an alias for the actual 
    parameter 
    <LI>pass-by-name: the textual representation of the actual parameter 
    rewrites the formal parameter everywhere it appears in the subprogram 
  </LI></OL></FONT></LI></OL>
<P><B><I>
<CENTER>Good Luck!</CENTER></I></B>
<P>
<TABLE bgColor=gray border=0 cellPadding=0 width="100%">
  <TBODY>
  <TR>
    <TD align=middle><FONT size=-5>&nbsp;</FONT></TD></TR></TBODY></TABLE><FONT 
size=-2><I>(last update October 23, 1999)</I></FONT> </P></BODY></HTML>
