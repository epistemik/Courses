/*	Mark Sattolo  428500	CSI2165A,  J.Sayyad	Assignment #2*/has_addition( _ + _ ).has_addition(X) :- X =.. [_|[LHS,RHS]] , ( ( nonvar(LHS) , has_addition(LHS) ) ; ( nonvar(RHS) ,  has_addition(RHS) ) ).join( [] , X , X ). join( [H|T] , L1 , [H|T2] ) :- join( T, L1, T2 ).fold( [] , [] ).fold( [Single] , [Single] ).fold( [H|L ] , A) :- fold(L, B) , join( B , [H] , A ).variable_free( LHS + RHS ) :- nonvar(LHS) , variable_free(LHS) , nonvar(RHS) , variable_free(RHS).variable_free(Arg) :- atomic(Arg).%variable_free(Arg) :- nonvar(Arg), Arg =.. [Single].expr_2_list(Exp, [Exp]) :- var(Exp) ; atomic(Exp).expr_2_list(Exp, List) :- Exp =.. [ _|[ LHS , RHS ] ] ,  expr_2_list(LHS, LL) , expr_2_list(RHS, RL) , join( LL , RL , List ) ./*expr_2_list( LHS + RHS , X) :- expr_2_list(LHS, LL) , expr_2_list(RHS, RL) , join( LL , RL , X ).expr_2_list( LHS - RHS , X) :- expr_2_list(LHS, LL) , expr_2_list(RHS, RL) , join( LL , RL , X ).expr_2_list( LHS * RHS , X) :- expr_2_list(LHS, LL) , expr_2_list(RHS, RL) , join( LL , RL , X ).expr_2_list( LHS / RHS , X) :- expr_2_list(LHS, LL) , expr_2_list(RHS, RL) , join( LL , RL , X ).*//*find_vars([], []).find_vars([H|[] ], L) :- ( var(H) -> L = [H] ; L = [] ).find_vars([H|T], L) :- find_vars(T, TL), (var(H) -> join([H], TL, L) ; L = TL).find_non_vars([], []).find_non_vars([H|[] ], L) :- ( nonvar(H) -> L = [H] ; L = [] ).find_non_vars([H|T], L) :- find_non_vars(T, TL), (nonvar(H) -> join([H], TL, L) ; L = TL).shift_vars_right([] , [] ). shift_vars_right([X|[]] , [X] ).shift_vars_right([X|T] , L ) :- find_vars([X|T] , VL), find_non_vars([X|T] , NL), join(NL, VL, L).*/shift_vars_right([] , [] ). shift_vars_right([Single] , [Single] ). shift_vars_right([X|T] , L) :- var(X), join(VarList, [X], VarList), shift_vars_right(T, TL), join(VarList, TL, L).shift_vars_right([X|T] , L) :- nonvar(X), join(NonList, [X], NonList), shift_vars_right(T, TL), join(VarList, TL, L).shift_vars_right([X, Y|T] , [X|TA]) :- nonvar(X), shift_vars_right([Y|T] , TA).  unique([], []).unique([X] , [X]).unique([X, X] , [X] ).unique([X|T] , [X|TL]) :- unique(T, TL). member(X, [X|_]).member(X, [_|T]) :- member(X,T).intersection( [] , L , [] ).intersection( L , [] , [] ).%intersection( [Q] , [Q] , [Q] ).intersection( [H|T] , L , F ) :- not(member(H, L)), intersection( T , L , F ).intersection( [H|T] , L , F ) :- member(H, L), intersection( T , L , TF ), not(member(H, TF)), F = [H|TF].intersection( [H|T] , L , F ) :- member(H, L), intersection( T , L , TF ), member(H, TF), F=TF.max( [], no_max_in_empty_list ).max( [Max] , Max ) :- number(Max).max( [H|T] , L ) :- max( T , L2 ) , ( H >= L2 -> L = H ; L = L2 ) ./*WORKING VERSIONsupermax( [] , no_max_in_empty_list ).supermax( [Single] , Single ) :- number(Single).supermax( [ H|T ] , L ) :- ( number(H) -> HF = H ; supermax( H, HF ) ) , supermax( T, TF ) , ( atom(TF) -> L = HF ; ( atom(HF) -> L = TF ; ( HF >= TF -> L = HF ; L = TF ) ) ).*/is_list(List) :- nonvar(List), (List = [] ; List = [Head|Tail]).supermax( [] , no_max_in_empty_list ).%supermax( [Atom] , no_max_in_list_of_atoms ) :- atom(Atom).supermax( [Single] , Single ) :- number(Single).supermax( [ H|T ] , L ) :- ( atomic(H) -> HF = H ; supermax( H, HF ) ) , supermax( T, TF ) , ( atom(TF) -> ( atom(HF) -> L = no_max_in_list_of_atoms ; L=HF) ; ( atom(HF) -> L = TF ; ( HF >= TF -> L = HF ; L = TF ) ) ).