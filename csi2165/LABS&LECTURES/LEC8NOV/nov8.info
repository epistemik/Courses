% obtain sum of a list of integers     sum_int( [] , 0 ).     sum_int( [H|T] , Sum ) :- integer(H), sum_int(T, Tsum), Sum is H + Tsum.     sum_int( [_|T] , Sum ) :- sum_int(T, Sum).% count the number of atoms in a list     count(_ , [] , 0 ).     count( Atom , [H|T] , Count) :- atom(H), H = Atom,			                                                           count( Atom, T, Tcount), Count is Tcount + 1.     count( Atom , [_|T] , Count) :- count( Atom, T, Count ).% count atoms and integers in a list     % use 'is_list' as a sub-predicate            is_list(Arg) :- nonvar(Arg), ( Arg = [] ; Arg = [H|T] , is_list(T) ).     count_ai( [], 0 , 0 ).     count_ai([H|T], A, I) :- atom(H), count_ai(T, TA, I), A is TA + 1.     count_ai([H|T], A, I) :- integer(H), count_ai(T, A, TI), I is TI + 1.% use next clause to search inside nested lists     count_ai([H|T], A, I) :- is_list(H), count_ai(H, HA, HI), count_ai(T, TA, TI),                                           A is TA + HA , I is HI + TI.     count_ai([_|T], A, I) :- count_ai(T, A, I).% merge two sorted lists into a new sorted list     merge( [] , L , L ).     merge( L , [] , L ).     merge( [H1|T1] , [H2|T2] , [H1|L] ) :- H1 =< H2 , merge( T1 , [H2|T2] , L ).     merge( [H1|T1] , [H2|T2] , [H2|L] ) :- merge( T2 , [H1|T1] , L ).