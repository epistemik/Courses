join( [] , X , X ). join( [H|T] , L1 , [H|T2] ) :- join( T, L1, T2 ).has_addition( _ + _ ).has_addition(X) :- X =.. [_|[LHS,RHS]] , ( ( nonvar(LHS) , has_addition(LHS) ) ; ( nonvar(RHS) ,  has_addition(RHS) ) ).last_element([H|[]], H).last_element([H|T], L) :- last_element(T, L).fold( [A|[]] , [A] ).fold( [H|L ] , A) :- fold(L, B) , join( B , [H] , A ).variable_free(Arg) :- not(var(Arg)) , Arg =.. [H|[]].variable_free( LHS + RHS ) :- nonvar(LHS) , variable_free(LHS) , nonvar(RHS) , variable_free(RHS).expr_2_list(Arg, L) :- Arg =.. [H|[]] , L = [H].expr_2_list( LHS + RHS , X) :- expr_2_list(LHS, LL) , expr_2_list(RHS, RL) , join( LL , RL , X ).expr_2_list( LHS - RHS , X) :- expr_2_list(LHS, LL) , expr_2_list(RHS, RL) , join( LL , RL , X ).expr_2_list( LHS * RHS , X) :- expr_2_list(LHS, LL) , expr_2_list(RHS, RL) , join( LL , RL , X ).expr_2_list( LHS / RHS , X) :- expr_2_list(LHS, LL) , expr_2_list(RHS, RL) , join( LL , RL , X ).find_vars([], []).find_vars([H|[] ], L) :- ( var(H) -> L = [H] ; L = [] ).find_vars([H|T], L) :- find_vars(T, TL), (var(H) -> join([H], TL, L) ; L = TL).find_non_vars([], []).find_non_vars([H|[] ], L) :- ( nonvar(H) -> L = [H] ; L = [] ).find_non_vars([H|T], L) :- find_non_vars(T, TL), (nonvar(H) -> join([H], TL, L) ; L = TL).shift_vars_right([] , [] ). shift_vars_right([X|[]] , [X] ).shift_vars_right([X|T] , L ) :- find_vars([X|T] , VL), find_non_vars([X|T] , NL), join(NL, VL, L).  /*shift_vars_right([X|[]] , [X] ). shift_vars_right([X|T] , A) :- shift_vars_right(T, TA), ( var(X) -> join( TA , [X] , A ) ; join( [X] , TA , A ) ).*//*shift_vars_right([X|[]] , [X] ).shift_vars_right([X, Y|[]] , L ) :- (var(X) , nonvar(Y)) -> L = [Y, X] ; L = [X, Y].shift_vars_right([X, Y|T] , A) :- ( (var(X) -> join(T, X, AX) ; nonvar(Y) -> P = Y ,  shift_vars_right([Y|T], TB), join( [P], AB, F) , A = F.*/unique([], []).unique([X|[] ] , [X]).unique([X,Y|[]] , L ) :- X = Y -> L = [X,Y] ; L = [X].unique([X, Y|T] , L) :- unique([Y|T], TL), (X = Y -> L = TL ; join([X], TL, L) ). /*intersection( [] , L , [] ).intersection( L , [] , [] ).intersection( [Q] , [Q] , [Q] ). intersection( [H1|T1]  , [H2|T2] , F ) :- intersection( [H1] , T2, A ) , intersection( T1 , T2, B ) ,  intersection( [H2] , T1, C ) , join( A , B , M ) ,  join( C , M , K ) , ( H1 = H2 -> join([H1] , K, R) ; R = K ),  unique(R, F) .*/intersection( [] , L , [] ).intersection( L , [] , [] ).intersection( [Q] , [Q] , A ) :- atomic(Q) , A = [Q]. intersection( [H1|T1] , L1 , R ) :- intersection( [H1] , L1 , A ) , intersection( T1 , L1 , B ) , join( A , B , M ) , R = M. /*= [X|Y] , intersection([X], Y, Z), (Z = [] -> R = M ; R = Y )./*intersection( L2 , [H2|T2] , R ) :- intersection( [H2] , L2 , A ) , intersection( T2 , L2 , B ) , join( A , B , M ) , M = [X|Y] , intersection([X], Y, Z), (Z = [] -> R = M ; R = Y ).*/max( [H|[]] , H ).max( [H|T] , L ) :- max( T , L2 ) , ( H >= L2 -> L = H ; L = L2 ) .supermax( [] , X ).supermax( [ H|[] ] , L ) :- number(H) , L = H.supermax( [ H|T ] , L ) :- ( number(H) -> HF = H ; supermax( H, HF ) ) , ( number(T) -> TF = T ; supermax( T, TF ) ) , ( var(TF) -> L = HF ; ( var(HF) -> L = TF ; ( HF >= TF -> L = HF ; L = TF ) ) ).