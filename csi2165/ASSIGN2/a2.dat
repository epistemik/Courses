join( [] , X , X ). join( [H|T] , L1 , [H|T2] ) :- join( T, L1, T2 ).% has_addition(+(_,_).has_addition( _ + _ ).% has_addition(X(L(_,_),R(_,_))):-has_addition(L(_,_));has_addition(R(_,_))./* has_addition(X) :- has_addition(X) =.. has_addition([_|[LHS,RHS]]) , has_addition(LHS) ; has_addition(RHS). */has_addition(X) :- X =.. [_|[LHS,RHS]] , (has_addition(LHS) ; has_addition(RHS)).fold( [A|[]] , [A] ).fold( [H|[[T] , Y]] , A) :- join( [T] , [H] , K ) , join( [Y] , K , A ).%variable_free(Arg) :- var(Arg) , fail.variable_free(Arg) :- not(var(Arg)) , Arg =.. [H|[]].% variable_free( L + R ) :- nonvar(L) , L =.. [H|[]] , nonvar(R) , R =.. [H2|[]].variable_free( LHS + RHS ) :- nonvar(LHS) , variable_free(LHS) , nonvar(RHS) , variable_free(RHS).expr_2_list(Arg, L) :- Arg =.. [H|[]] , L = [H]./* expr_2_list( LHS + RHS , X) :- LHS =.. [LH|LT] , expr_2_list(LT, LL) , RHS =.. [RH|RT] , expr_2_list(RT, RL) , X =.. [LH, LL, RH, RL]. */expr_2_list( LHS + RHS , X) :- expr_2_list(LHS, LL) , expr_2_list(RHS, RL) , join( LL , RL , X ).shift_vars_right([X|[]] , [X] ). % A) :- var(X) ; ( nonvar(X) , X =.. [H|[]] ) , A = [X] .shift_vars_right([X|T] , A) :- shift_vars_right(T, TA), ( var(X) -> join( TA , [X] , A ) ; join( [X] , TA , A ) ).intersection( [] , L , [] ).intersection( L , [] , [] ).intersection( [Q] , [Q] , [Q] ). intersection( [H1|T1]  , [H2|T2] , R ) :- intersection( [H1] , T2, A ) , intersection( T1 , T2, B ) ,  intersection( [H2] , T1, C ) , join( A , B , M ) ,  join( C , M , K ) , ( H1 = H2 -> join([H1] , K, R ) ; R = K )./* intersection( [H1|T1] , [H2|T2] , R ) :- intersection( [H1] , T2, A ) , intersection( [H2] , T1, B ) , join( A, B, K) , ( H1 = H2 -> join([H1] , K, R ) ; R = K ). */