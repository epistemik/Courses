join( [] , X , X ). join( [H|T] , L1 , [H|T2] ) :- join( T, L1, T2 ).has_addition( _ + _ ).has_addition(X) :- X =.. [_|[LHS,RHS]] , ( ( nonvar(LHS) , has_addition(LHS) ) ; ( nonvar(RHS) ,  has_addition(RHS) ) ).%has_addition(X) :- X =.. [_|[LHS,RHS]] , (has_addition(LHS) ; has_addition(RHS)).%has_addition( [_|[ LHS , RHS ] ] ) :- has_addition( LHS ) ; has_addition( RHS ).fold( [A|[]] , [A] ).fold( [H|[[T] , Y]] , A) :- join( [T] , [H] , K ) , join( [Y] , K , A ).variable_free(Arg) :- not(var(Arg)) , Arg =.. [H|[]].variable_free( LHS + RHS ) :- nonvar(LHS) , variable_free(LHS) , nonvar(RHS) , variable_free(RHS).expr_2_list(Arg, L) :- Arg =.. [H|[]] , L = [H].expr_2_list( LHS + RHS , X) :- expr_2_list(LHS, LL) , expr_2_list(RHS, RL) , join( LL , RL , X )./*shift_vars_right([X|[]] , [X] ). shift_vars_right([X|T] , A) :- shift_vars_right(T, TA), ( var(X) -> join( TA , [X] , A ) ; join( [X] , TA , A ) ).*/shift_vars_right([X|[]] , [X] ).shift_vars_right([X, Y|[]] , L ) :- (var(X) , nonvar(Y)) -> L = [Y, X] ; L = [X, Y].shift_vars_right([X, Y|T] , A) :- ( (var(X) -> join(T, X, AX) ; nonvar(Y) -> P = Y ,  shift_vars_right([Y|T], TB), join( [P], AB, F) , A = F.intersection( [] , L , [] ).intersection( L , [] , [] ).intersection( [Q] , [Q] , [Q] ). intersection( [H1|T1]  , [H2|T2] , R ) :- intersection( [H1] , T2, A ) , intersection( T1 , T2, B ) ,  intersection( [H2] , T1, C ) , join( A , B , M ) ,  join( C , M , K ) , ( (H1 = H2 , not(intersection([H1] , K, X ) ) ) -> join([H1] , K, R ) ; R = K ).max( [H|[]] , H ).%max( [H|T] , L ) :- T \= [] , max( T , L2 ) , ( H >= L2 -> L = H ; L = L2 ) .%max( [H|[]] , H ).max( [H|T] , L ) :- max( T , L2 ) , ( H >= L2 -> L = H ; L = L2 ) ./*supermax( [] , 0 ).%supermax( [ H| [] ] , H ).supermax( [ H| [] ] , L ) :- number(H) , L = H.supermax( [ H, T ] , L ) :- number(H) , number(T) , (H > T -> L = H ; L = T ) .%supermax( [ H, T ] , L ) :- H =.. [P|[]] , T =.. [Q|[]] , (H > T -> L = H ; L = T ) .supermax( [H|T] , L ) :- not(H = [W|Y]) , supermax( T , L2 ) , ( H >= L2 -> L = H ; L = L2 ) .supermax([ H1| [ [H2|T2] | T1 ] ] , L ) :- supermax( T2 , LT2 ) , supermax( T1 , LT1 ) , (not(number(H1)) -> supermax( H1, H1a) ; H1a = H1 ) , ( LT2 > LT1 -> KT = LT2 ; KT = LT1 ) , ( H1 > H2 -> KH = H1 ; KH = H2 ) , ( KH > KT -> L = KH ; L = KT ).*/supermax( [] , X ).supermax( [ H|[] ] , L ) :- number(H) , L = H.supermax( [ H|T ] , L ) :- ( number(H) -> HF = H ; supermax( H, HF ) ) , ( number(T) -> TF = T ; supermax( T, TF ) ) , ( var(TF) -> L = HF ; ( var(HF) -> L = TF ; ( HF >= TF -> L = HF ; L = TF ) ) ).