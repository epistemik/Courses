split(Vname, List):- assert(varname(Vname)),                     ((not(atom(Vname)), !, stop);                      (!, process(Vname, List))),                     (retract(varname(Vname)); true).  %'; true' needed here?process(Vname, [Word|Rest]):- name(Vname, List),                              List=[H|T],!,                              (starter(H); !, stop),                              trim(List, TrimList),                              TrimList=[TrH|TrT],                              ((upper(TrH), List2=TrT); List2=TrimList),                              word(List2, WordL, NewList),!,                              ((upper(TrH), WordL2=[TrH|WordL]); WordL2=WordL),                              name(Word, WordL2),                              ((NewList=[], Rest=[]);                              (name(NewName, NewList),                              process(NewName, Rest))).% word/3% Splits List into the characters constituting one valid name and the remainder.word([95|T], [], T):- !.            % stop upon hitting an underscoreword([], [], []).                   % stop at end of listword([Char|T], C, Rest):- nonvalid(Char), !, stop.% word([Char1,U|T], Char1, [U|T]):- upper(Char1).word([Char|T], [], [Char|T]):- upper(Char).word([Char|T1], [Char|T2], Rest):- (lower(Char); digit(Char); !, stop),                                   word(T1, T2, Rest).           trim([H|T], TrimList):- (H=95, trim(T, TrimList)); TrimList=[H|T].stop:- retract(varname(Vname)),       write(Vname),       write(' is not a valid variable name'),       !, fail.upper(Char):- Char>=65, Char=<90.lower(Char):- Char>=97, Char=<122.digit(Char):- Char>=48, Char=<57.starter(Char):- Char=95; upper(Char); lower(Char).nonvalid(Char):- Char<48; Char>122; (Char>57, Char<65); (Char>90, Char<97).