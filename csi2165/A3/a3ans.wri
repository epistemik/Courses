Note: These are sample solutions, not necessarily the best.

			    CSI2165A/Assignment 3  (With Solutions) 

Issue date : Monday, November 15, 1999
Due date   : Friday, November 26, 1999, 5:00pm.

Hand In : Each student is required to do this assignment INDIVIDUALLY and to 
	  hand in the following:

(1) A 3.5" disk containing the Prolog program corresponding to the questions
    of the assignment. The file containing this program must be named 
    `assign3.ari', and must be the ONLY file on the disk. 

(2) A printout of `assign3.ari' .

(3) A printout of the queries you applied to test your solutions. Try providing
    queries that represent 'good' test cases, i.e. they are likely to expose an error,
    if any.

Place the above items in a suitable envelope, with the following information 
clearly marked on the outside of the envelope: complete name, student number,
assignment number and course number (CSI2165A). Deposit your envelope in 
the LOCKED BOX marked `CSI 2165A' beside the reception desk on the third 
floor of MacDonald Hall. 

IMPORTANT: your Prolog program must conform to the programming standards 
	   described in  file stndrds.txt which is in directory assignments
           of the CSI2165B course directory. 

MARKING SCHEME: 10% of the marks are allocated to programming standards,
                while the remaining 90% will be divided among the questions
                of the assignment.

-----------------------------------------------------------------------

1- Define the predicate depth(L, D) that returns the maximum level of nesting in
   in a list L.

Example:
	
?- depth([],D).	
D = 1
yes
	
?- depth([a,[d],[c,[f]],[a,[b,c,[d,[f]]]]],D).	
D = 5
yes

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The depth of an empty list is one:
depth([], 1). % The depth of an empty list is one

% When the head of the list is itself a list, then the depth of the list is 
% the maximum of the depth of Head +1 and the depth of Tail
depth([Head|Tail], Depth) :- is_list(Head),
		   	     depth(Head, HeadDepth),
		   	     HeadDepth2 is HeadDepth + 1,
		   	     depth(Tail, TailDepth),
		   	     max(HeadDepth2, TailDepth, Depth), !.

% If the head is not a list, then the depth of the list is the depth of Tail
depth([_|Tail], Depth) :- depth(Tail, Depth), !.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

2- Extend the definition of predicate supermax/2 from assignment 2 so that it can also handle
the cases that some of the elements in the nested lists are not numbers.

Examples:

?- supermax([[[[[13],12]]]], M).
M = 13
yes

?- supermax([[[[[],12]]]], M).
M = 12
yes

?- supermax([[[[12]]]], M).
M = 12
yes

?- supermax([[2, -4, [3, 8, [],6], s, [[],[[[12,[]]]]]], 7, 4], M).
M = 12
yes
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% one element list
supermax([H], H) :- not(is_list(H)).
supermax([H], HM) :- is_list(H),
	             supermax(H, HM), !.

% general cases
supermax([H|T], M) :- not(is_list(H)),
		      supermax(T, TM),!,
		      ((H > TM, M = H); M = TM).

supermax([H|T], M) :- is_list(H),
	              supermax(H, HM),
		      supermax(T, TM),
		      mymax(HM, TM, M), !.

% Exceptional cases where the maximum in the head or tail is undefined
% This happens when some of the elements are empty lists
supermax([_|T], M) :- supermax(T, M), !.
supermax([H|_], M) :- is_list(H),supermax(H, M), !.
supermax([H|_], H) :- number(H), !.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

3- Define the following Prolog predicates:

a) only_non_zero(List, Item, N) that is true if Item is the N'th element of List while all other
   elements of List are zero.

Examples:

?- only_non_zero([0, 0, a, 0], a, 3).
yes

?- only_non_zero([0, 0, a, 0], a, 2).
no  

?- only_non_zero([1, 0, a, 0], a, 3).
no 

?- only_non_zero([0, 0, b, 0], a, 3).
no

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% all_zero(List) is true when List is a list that only contains 0's

all_zero([0]).
all_zero([0|Tail]) :- all_zero(Tail).

% Element is the number in position 1

only_non_zero([Element], Element, 1).

% The head is Element in position one, make sure the rest of the list
% is all zero 

only_non_zero([Element|Rest], Element, 1) :- all_zero(Rest).

% The head is not the element that we are looking for, but the position
% is also not 1, and the head is a 0. In this case decrement the position
% index and continue with the tail

only_non_zero([0|Rest], Element, N) :- N2 is N -1,
                                  only_non_zero(Rest, Element, N2).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

b) One way of representing a matrix in Prolog is by means of a list of lists (which 
   is then a particular case of a list of many levels). A matrix can be represented
   as a list of its rows, while each row in turn is represented as a list of numbers.

   For example:

		-	  -
		| 1	2 |
		| 3	4 |		<==> 	[[1, 2], [3, 4]]
		-	  -

		-	  	  -
		| 1	2	3 |
		| 4	5	6 |	<==> 	[[1, 2, 3], [4, 5, 6], [7, 8, 9]]
		| 7	8	9 |
		-	  	  -

    Define the predicate identity(Matrix) which is true if Matrix is an identity matrix. 
    An identity matrix is a matrix whose elements are all zero, except for those on the
    main diagonal which are one.
    Hint: use only_non_zero/3.

    For example:

	  	-	  -	-		  -
		| 1	0 |	| 1	0	0 |
		| 0	1 |	| 0	1	0 |
		-	  -	| 0	0	1 |
				-		  -
Example queries :

?- identity([[1, 0], [0, 1]]).
yes
	
?- identity([1]).
yes
	
?- identity([[0, 1], [1, 0]]).
no
	
?- identity([[1, 0, 0], [0, 1, 0], [0, 0, 1]]).
yes

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% MINIMAL Checking to see if a List represent a square matrix. A matrix
% is square if the number of rows and columns in the matrix is the same.

square(Matrix, Rows) :- length(Matrix, Rows), no_of_columns(Matrix, Rows).

% The head of the list must be a list of length Columns, and the elements
% in the tail too.
no_of_columns([Head|Tail], Columns) :- is_list(Head),
				       length(Head, Columns),
                                       no_of_columns(Tail, Columns), !.

% The only element of the list must be a list of length Columns
no_of_columns([List], Columns) :- is_list(List), length(List, Columns).

% This is a special case added just for convenience
identity([1]):- !.
 
% Find the number of rows in the matix and then check to see that the
% only non zero element in each row is the element on the main diagonal
% of the matrix 

identity(Matrix) :- length(Matrix, Rows),
                    identity2(Matrix, 1, Rows), !.


% To check the 1 in the lower rightmost elemnt of the matrix 
identity2([Head], N, N) :-  only_non_zero(Head, 1, N), !. 
                             
% Checking to see if the only non-zero elements of the matrix are 1's 
% that are on the main diagonal of the matrix
identity2([Head|Rest], Counter, N) :- Counter < N, 
                                      only_non_zero(Head, 1, Counter),
                                      Counter2 is Counter + 1,
                                      identity2(Rest, Counter2, N).                              %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	
c) Define the predicate add(Matrix1, Matrix2, Result) that adds two matrices Matrix1 and 
   Matrix2 and instantiates Result to the result of this addition. 

Example queries :
	
?- add([[1, 2], [0, 1]], [[1, 1], [1, 2], [1, 3]], Result).
no
	
?- add([[1, 2], [0, 1]], [[1, 1], [1, 2]], Result).
Result = [[2, 3], [1, 3]] 
	
?- add([[1, 2, 3], [0, 1, 1], [0, 0, 0]], [[1, 1, 1], [1, 2, 1], [1, 1, 1]], Result).
Result = [[2,3,4],[1,3,2],[1,1,1]]
	
?- add([[1, 2], [0, 1]], [[1, 1, 1], [1, 2, 1]], Result).
no	
	
?- add([[1, 1, 1]], [[2, 2, 2]], R).
Result = [[3,3,3]]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Make sure that the two matrices can be added, then add them using the helper
% predicate add2

add(M1, M2, Result) :- length(M1, R1),
		       length(M2, R1),
		       no_of_columns(M1, C1),
		       no_of_columns(M2, C1),
		       add2(M1, M2, Result).

% Stoping condition or base case
add2([Row1], [Row2], [Row]) :- add_rows(Row1, Row2, Row), !.

% Add row by row and genrate the corresponding sum row in Result
add2([H1|Tail1], [H2|Tail2], [H|Tail]) :- add_rows(H1, H2, H),
					  add2(Tail1, Tail2, Tail).

% Predicate to add a single row of each matrix and generate the corresponding
% sum row
add_rows([N1], [N2], [N]) :- N is N1 + N2, !.
add_rows([H1|T1], [H2|T2], [H|T]) :- H is H1 + H2,
				     add_rows(T1, T2, T).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


4- Define predicate last_atom(L, A) that returns the last atom in the list L of many
   levels.
	
Example:
?- last_atom([a,f,[d,[f,g,[h,[j]]]]],A).	
A = j

Remember while [] is representing an empty list, itself is an atom. Make sure you handle 
properly the case where the last element is []. For instance:

?- last_atom([[s,f,[g,[]]],[]],A).
A = g % not [].

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% This predicate should be treated carefully to handle the case where the 
% last element is []:


% If the list contains only one element (it is not empty list), and that element
% itself is a list, then find the last atom in that list.

last_atom([Element], LastElement) :- is_list(Element),
				     last_atom(Element, LastElement), !.

% If you reach here it means that the list only has one element and that
% element is not a list. In this case the last element is the only element
% in the list.

last_atom([Element], Element):- !.


% This is the catchall case that ignores the head and tries to identify the
% last element in the tail.

last_atom([_|Tail], Element) :- last_atom(Tail, Element).




% Here is another propsed solution for this predicate, by somebody else. It is 
% trickier and gives a yes answer even when the first parameter is not a list !. 
% Neverthless it has its own merits, so I am including it here. 
  

% This rule will process the tail as long as it is not empty list.
% Note that the order of the rules is important here

last_atom2([_|T], A) :- last_atom2(T, A), !.

% This rule will actualy be executed when you are prossesing the last item
% in the list (H). Note again that the order of the rules is important here
% H can be a list or another term

last_atom2([H|_], A) :- last_atom2(H, A), !.

% This rule will eventually be activated when rule 2 reaches the last atom

last_atom2(A, A) :- atomic(A), A \== [].
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

5- Define the predicate super_reverse(L1, L2) that returns in L2 the reverse of nested list
   L1. Note that each sub list in L2 is the reverse of the corresponding sub list in L1, to 
   any depth. 
	
Examples:

?- super_reverse([d, s, [f, [a]]], L).
L = [[[a], f], s, d]
yes

?- super_reverse([d, g, [f], [d, [a, b]], a, d], L).
L = [d, a, [[b, a], d], [f], g, d]
yes

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The reverse of an empty list is an empty list:

super_reverse([], []).

% If the head of the list itself is a list, then reverse of the list can 
% be obtained by concatenating the reverse of the tail and the reverse of 
% the head.

super_reverse([Head|Tail], ReverseList) :- is_list(Head),
			   		   super_reverse(Head, HeadReverse),
			   		   super_reverse(Tail, TailReverse),
			   		   conc(TailReverse, [HeadReverse], ReverseList), !.

% If you reach here the head is not a list, in this case reverse the tail
% and append the head to this reversed tail.

super_reverse([Head|Tail], ReverseList) :- super_reverse(Tail, ReverseTail),
		           		   conc(ReverseTail, [Head], ReverseList).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

6- Define predicate remove_numbers/2 which takes a nested list, which may contain numbers,
   as its first arguments and returns a similar list but without the numbers.

Examples:

?- remove_numbers([a, b, [[[c,4],5]], 8, t, [[y]]], A).
A = [a,b,[[[c]]],t,[[y]]]
yes

?- remove_numbers([a, b, [[[c,4],[[[5]]]]], 8, t, [[y]]], A).
A = [a,b,[[[c],[[[]]]]],t,[[y]]]
yes

?- remove_numbers([a, b, [[[c,4],[[[5]]]]], 8, t, 65], A).
A = [a,b,[[[c],[[[]]]]],t]
yes

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Removing numbers from an empty list
remove_numbers([], []):-!.
% When you have seen a number
remove_numbers([H|T], A) :- number(H), remove_numbers(T, A), !.  
% When you have seen a non-list and non-number
remove_numbers([H|T], [H|NT]) :- not(number(H)), not(is_list(H)),
                                 remove_numbers(T, NT), !.  
% The head is a list, make sure you remove numbers in it
remove_numbers([H|T], [NH|NT]) :- is_list(H), 
			          remove_numbers(H, NH),
                                  remove_numbers(T, NT), !.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

7. Define the predicate list_struct(List, Struct) that converts List which is a list of many 
   levels to a structure. The functor of Struct is the head of List, and the arguments of Struct,
   if any, are the elements in the tail of list converted to structures if necessary, i.e. if an
   argument is a list it must be converted to a structure. Please note that in the resulting 
   structure some of the arguments may be lists as shown in the example. This is the case
   when the head of a list is not an atom e.g; it is a list itself . As you know to be able to
    convert a list to a structure using univ(=..) the head of the list must be an atom.

Examples:

?- list_struct([a, [b, o, l], c, [d, s, [f, a]]], A).
A =  a(b(o,l),c,d(s,f(a)))
yes

?- list_struct([a, [b, o, l], c, [d, s, [[f, a]]]], A).
A = a(b(o,l),c,d(s,[f(a)]))
yes

?- list_struct([a, [b, o, l], c, [d, s, [[f, [[[a]]]]]]], A).
A = a(b(o,l),c,d(s,[f([[a]])]))
yes

?- list_struct([[a], [b, o, l], c, [d, s, [f, a]]], A). %[a] is not an atom
no

?- list_struct([a, [[b], o, l], c], A).
A = a([b,o,l],c)
yes

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Make sure that the original list has an atom as its head because this is
%going to be the functor of the answer. Process the list using list_struct2 to
% create the answer.

list_struct([H|Tail], ST) :-
	atom(H), 
	H \= [],
	list_struct2([H|Tail], ST).

% list_struct2 takes a list and returns a list or a structure corresponding to
% it, whichever applicable

% When the head itself is a list process the head then process the rest of the
% arguments of the eventual structure
%
list_struct2([H|Tail], [H2|ST]) :-
	is_list(H),
	list_struct2(H, H2),
	process_args(Tail, ST).

% When the head is not a list it will be the functor of the returned structure.
% Create the arguments of the returned structure. Put these together and create
% the final structure using univ.

list_struct2([H|Tail], Ans) :-
	not(is_list(H)),
	process_args(Tail, ST),
	Ans =.. [H|ST].

% process_args only processes the arguments of the returned structure.

% When the argument list is empty.
process_args([], []):- !.

% If an argument is a list then process it using list_struct2. Then process the
% rest of the arguments. 	
process_args([H|Tail], [HS|Tail2]) :-
	is_list(H),
	list_struct2(H, HS),
	process_args(Tail, Tail2).

% if an argument is not a list pass it directly to the answer. Process the rest
% of the arguments
process_args([H|Tail], [H|Tail2]) :-
	not(is_list(H)),
	process_args(Tail, Tail2).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


8- Define predicate structure_member(O, S) which will search for object O in a structure
   S. Note that O can be one of the components of S, or a component within another component
   of S, such as another list or structure, at any depth.
 
?- structure_member(2, s(a, b([4, 2], y))).
yes

?- structure_member(2, s(a, b([4, a(2)], y))).
yes

?- structure_member(x, s(a, b([4, a(2)], y))).
no

?- structure_member(x, s(a, b([4, a(2)], b(a(c, d(x)))), y)).
yes

?- structure_member(x, s(a, b([4, a(2)], b(a(c, d([x])))), y)).
yes
	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Convert the structure to a list and then process the component part of that list
structure_member(O, S) :- S =.. [_|Args],
    		          structure_list_member(O, Args).
% simple scan and test
structure_list_member(O, [O|_]):- !.
structure_list_member(O, [X|T]):- structure_member(O, X), !.
structure_list_member(O, [_|T]):- structure_list_member(O, T), !.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 
	
	   




	
