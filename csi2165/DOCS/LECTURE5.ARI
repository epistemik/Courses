:- dynamic plays/2.:- dynamic fibonacci_opt/2.:- dynamic likes/2./* Assert example */plays(carol,bass).plays(benny,banjo).plays(mike,guitar)./*:- plays(Person,Instrument).:- assert(plays(ken,piano)).:- plays(Person,Instrument).*//* Retract example - it uses the database written above,   with the modifications done to it by asserting the fact   plays(ken,piano)    *//*:- retract(plays(Person,Instrument)).:- plays(Person,Instrument).:- retract(plays(mike,guitar)).:- plays(Person,Instrument).*//* Example of Assert - Reducing the Complexity of a Program *//* Generating the Nth number in the Fibonacci sequence.   The standard recursive solution */fibonacci(1, 1) :- !.fibonacci(2, 1) :- !.fibonacci(N, FibN) :- N > 0,	N1 is N-1,	N2 is N-2,	fibonacci(N1,FibN1),	fibonacci(N2,FibN2),	FibN is FibN1 + FibN2.	/* The counter */init_counter(Counter) :- 	CounterClause =.. [Counter,0],		asserta(CounterClause).	incr_counter(Counter) :-	CounterClause =.. [Counter,Value],	retract(CounterClause),	NewValue is Value + 1,	NewCounterClause =.. [Counter,NewValue],	asserta(NewCounterClause).	/* Generating the Nth number in the Fibonacci sequence, and    counting the recursive calls */   fibonacci_cnt(1, 1).fibonacci_cnt(2, 1).fibonacci_cnt(N, FibN) :- 	incr_counter(rec_calls),	N1 is N-1,	N2 is N-2,	fibonacci_cnt(N1,FibN1),	fibonacci_cnt(N2,FibN2),	FibN is FibN1 + FibN2.   		/* The optimized version of the above predicate. Still counting   the recursive calls, for comparison with the unoptimized version */   fibonacci_opt(1, 1) :- !.fibonacci_opt(2, 1) :- !.fibonacci_opt(N, FibN) :- N > 0,	incr_counter(rec_calls),	N1 is N-1,	N2 is N-2,	fibonacci_opt(N1,FibN1),	fibonacci_opt(N2,FibN2),	FibN is FibN1 + FibN2,	asserta(fibonacci_opt(N,FibN)).		/* RETRACT - example */likes(john,apples).likes(john,2165).likes(john,mary).all_he_likes(X) :-	likes(X,Y),	write(X),write(' likes '),write(Y),nl,	fail.all_he_likes(_).find_all_he_likes_1(X,[Y|Rest]) :-	retract(likes(X,Y)),	find_all_he_likes_1(X,Rest).find_all_he_likes_1(_,[]).find_all_he_likes_2(X,[Y|Rest]) :-	retract(likes(X,Y)),	find_all_he_likes_2(X,Rest),	asserta(likes(X,Y)).find_all_he_likes_2(_,[])./* FINDALL - our implementation */my_findall(X,G,_) :-	asserta(found(mark)),	call(G),	asserta(found(X)),	fail.my_findall(_,_,L) :-	collect_all([],M),	!, L = M.	collect_all(S,L) :-	get_next(X), !,	collect_all([X|S],L).collect_all(L,L).get_next(X) :- retract(found(X)), !, X \== mark./* RETRACT - example - reversing a list *//* First version - no retract */reverse([],[]).reverse([H|T],RevList) :-	reverse(T,RevTail),	append(RevTail,[H],RevList).	/* Second version - using the database operations assert/1 and retract/1 */reverse_db_op([],[]).reverse_db_op([H|T],[X|Rev]) :-	assertz(list_elem(H)),	reverse_db_op(T,Rev),	retract(list_elem(X)).      		/* This predicate will retract all the other facts I have in the database */      retractall(Functor,Arity) :-	functor(Fact,Functor,Arity),	retract_facts(Fact).	retract_facts(Fact) :-	retract(Fact),	fail.retract_facts(_).				      		/* INPUT / OUTPUT  -   reading a sentence from the standard input */get_sentence(Sentence) :-	get0(FirstChar),	get_characters(FirstChar,Sentence).	get_characters(46,[46]) :- !.get_characters(Char,[Char|RestOfSentence]) :-	get0(NextChar),	get_characters(NextChar,RestOfSentence).	/* INPUT / OUTPUT - character output - reading a password */getpasswd(Password) :-	get0_noecho(FirstChar),	getpwchars(FirstChar,Password).	getpwchars(13,[]) :- !.getpwchars(Char,[Char|RestOfPassword]) :-	put(42),	get0_noecho(NextChar),	getpwchars(NextChar,RestOfPassword).	/* INPUT / OUTPUT  -  term output */nice_writing :-	likes(X,Y),	write_nicely(likes,X,Y),	fail.nice_writing.write_nicely(Functor,X,Y) :-	convert(X,NewX),	write(NewX),write(' '),write(Functor),write(' '), write(Y), write('.'), nl,	!.	convert(X,NewX) :-	name(X,[First|Rest]),	upper(First,Capital),	name(NewX,[Capital|Rest]).	upper(First,Capital) :- Capital is First - 32./* INPUT / OUTPUT  -  file input/output */use_files :-	see('facts.pl'),	tell('see_tell_ex'),	write_facts,	seen,	told.	write_facts :-	read(Fact),	Fact =.. [Name,X,Y],	write_nicely(Name,X,Y),	write_facts.write_facts.		