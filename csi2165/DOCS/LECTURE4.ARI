is_list([]).is_list([_|_]).is_structure(Arg) :- functor(Arg,_,N), N > 0./* and a bit of recursion */member(X,[X|_]).member(X,[_|Tail]) :- member(X,Tail).list_length([],0).list_length([_|Tail],ListLength) :-	list_length(Tail,TailLength),	ListLength is TailLength + 1./*	append([],L,L).append([H|Tail],L,[H|ResTail]) :-	append(Tail,L,ResTail).*//* Backtracking */halve(L,FirstHalf,SecondHalf) :-	append(FirstHalf,SecondHalf,L),	length(FirstHalf,HalfLength),	length(SecondHalf,HalfLength)./* Using 'fail' */	likes(john,apples).likes(john,csi2165).likes(john,mary).all_he_likes(Y) :- 	likes(Y,X),	write(X),nl,	fail.	all_he_likes(_).	write_member(List) :-	member(X,List),	write(X),write(' '),	fail.write_member(_).decompose(List) :-	append(FirstPart,SecondPart,List),	write('first part : '), write(FirstPart), nl,	write('second part : '), write(SecondPart), nl, nl,	fail.decompose(_)./* Using 'cut' */vowel(a).vowel(e).vowel(i).vowel(o).vowel(u).consonant(X) :- vowel(X), !, fail.consonant(_).		o(paper).o(scissors).o(rock).p(fred,wilma).p(barney,betty).b(X,Y,Z) :-	o(X),		p(Y,Z).		factorial(0,1) :- !.factorial(1,1) :- !.factorial(N,Result) :-	N1 is N-1,	factorial(N1,PrevResult),	Result is PrevResult * N.	%member(X,[X|_]) :- !.%member(X,[_|Tail]) :- !.number_of_parents(adam,0) :- !.number_of_parents(eve,0) :- !.number_of_parents(_,2).	/* Negation */negate_goal(Goal) :-	Goal,	!,	fail.negate_goal(_).%consonant(X) :- \+ vowel(X).	likes(ken,beer).likes(rob,beer).likes(mom,juice).	/* Clause Ordering */delete_all_1(E,[],[]).delete_all_1(E,[E|Tail],List) :-	delete_all_1(E,Tail,List).delete_all_1(E,[NotE|Tail],[NotE|NewTail]) :-	delete_all_1(E,Tail,NewTail).	delete_all_2(E,[],[]).delete_all_2(E,[NotE|Tail],[NotE|NewTail]) :-	delete_all_2(E,Tail,NewTail).delete_all_2(E,[E|Tail],List) :-	delete_all_2(E,Tail,List).		delete_all_3(E,[],[]).delete_all_3(E,[NotE|Tail],[NotE|NewTail]) :-	E \== NotE,	delete_all_3(E,Tail,NewTail).delete_all_3(E,[E|Tail],List) :-	delete_all_3(E,Tail,List).		/* Clause Ordering as Control */person(adam,[tv,	'21-25',p1]).person(beth,[reading,	'16-20',p2]).person(carl,[music,	'31-35',p1]).person(dave,[reading,	'36-40',p2]).person(edna,[music,	'31-35',p2]).person(fred,[music,	'26-30',p1]).person(anna,[sports,	'31-35',p1]).person(hank,[sports,	'26-30',p1]).match_person(Person1,Person2,HowWellTheyMatch) :-	person(Person1,Profile1),	person(Person2,Profile2),	Person1 \== Person2,	compare_profiles(Profile1,Profile2,HowWellTheyMatch).	compare_profiles([Int,Age,Type],[Int,Age,Type],perfect).compare_profiles([Int,_,Type],[Int,_,Type],good).compare_profiles([_,Age,Type],[_,Age,Type],ok).compare_profiles([_,_,Type],[_,_,Type],basic).