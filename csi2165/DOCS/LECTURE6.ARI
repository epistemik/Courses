/* creating a new tree */new_tree(Node, t( Node, nil, nil))./* Inserting a node in the left subtree and in the right subtree */ins_left( New, Node, t( Node, LT, RT), t( Node, t(New, LT, nil), RT) ).ins_left( New, Node, t( Root, LT, RT), t( Root, NewLT, RT) ) :-	Root \= Node,	ins_left( New, Node, LT, NewLT).ins_left( New, Node, t( Root, LT, RT), t( Root, LT, NewRT) ) :-	Root \= Node,	ins_left( New, Node, RT, NewRT).ins_right( New, Node, t( Node, LT, RT), t( Node, LT, t(New, RT, nil)) ).ins_right( New, Node, t( Root, LT, RT), t( Root, LT, NewRT) ) :-	Root \= Node,	ins_right( New, Node, RT, NewRT).ins_right( New, Node, t( Root, LT, RT), t( Root, NewLT, RT) ) :-	Root \= Node,	ins_right( New, Node, LT, NewLT)./* Traversing a binary tree */	pre_order( nil, []).pre_order( t( Node, LT, RT), [Node|Rest]) :-	pre_order( LT, LeftNodes),	pre_order( RT, RightNodes),	append( LeftNodes, RightNodes, Rest).in_order( nil, []).in_order( t( Node, LT, RT), NodesList) :-	in_order( LT, LeftNodes),	in_order( RT, RightNodes),	append( LeftNodes, [Node|RightNodes], NodesList).post_order( nil, []).post_order( t( Node, LT, RT), NodesList) :-	post_order( LT, LeftNodes),	post_order( RT, RightNodes),	append( LeftNodes, RightNodes, List),	append( List, [Node], NodesList)./* Search through a tree for a subtree that has a   certain element as root: */search_tree( Root, t( Root, LT, RT), t( Root, LT, RT) ).search_tree( Node, t( Root, LT, _), SubTree) :-	Node \= Root,	search_tree( Node, LT, SubTree).search_tree( Node, t( Root, _, RT), SubTree) :-	Node \= Root,	search_tree(Node, RT, SubTree)./* creating a new Binary Search Tree */new_bst(Node, bst(Node, nil, nil))./* Inserting a node in a Binary Search Tree (BST) */		insert( Node, nil, bst( Node, nil, nil)).insert( Node, bst( Node, LT, RT), bst( Node, LT, RT)).insert(Node, bst( Root, LT, RT), bst( Root, NewLT, RT)) :-	Node < Root,	insert(Node, LT, NewLT).insert( Node, bst( Root, LT, RT), bst( Root, LT, NewRT)) :-	Node > Root,	insert( Node, RT, NewRT)./* Delete a node from a binary search tree: */delete( Node, bst( Node, nil, nil), nil) :- !.delete( Node, bst( Node, nil, RT), RT) :- !.delete( Node, bst( Node, LT, RT), bst( MaxOfLT, NewLT, RT) ) :-	delete_max(LT, NewLT, MaxOfLT).delete( Node, bst( Root, LT, RT), bst(Root, NewLT, RT) ) :-	Node < Root,	delete( Node, LT, NewLT).delete( Node, bst( Root, LT, RT), bst( Root, LT, NewRT) ) :-	Node > Root,	delete( Node, RT, NewRT).delete_max( bst( Root, LT, nil), LT, Root).delete_max( bst( Root, LT, RT), bst( Root, LT, NewRT), Max) :-	RT \== nil,	delete_max( RT, NewRT, Max).append([],L,L).append([H|T],L,[H|Rest]) :- append(T,L,Rest).