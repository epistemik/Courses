{VERSION 2 3 "IBM INTEL NT" "2.3" }
{USTYLETAB {CSTYLE "Maple Input" -1 0 "Courier" 0 0 128 0 128 1 0 1 0 
0 1 0 0 0 0 }{CSTYLE "2D Math" -1 2 "Times" 0 1 186 136 0 0 0 0 2 0 0 
0 0 0 0 }{CSTYLE "2D Output" 2 20 "" 0 0 0 128 128 1 0 0 0 0 0 0 0 0 
0 }{PSTYLE "Normal" -1 0 1 {CSTYLE "" -1 -1 "" 0 1 0 0 0 0 0 0 0 0 0 
0 0 0 0 }0 0 0 -1 -1 -1 0 0 0 0 0 0 -1 0 }{PSTYLE "Text Output" -1 2 
1 {CSTYLE "" -1 -1 "Courier" 1 10 0 0 255 1 0 0 0 0 0 1 3 0 0 }1 0 0 
-1 -1 -1 0 0 0 0 0 0 -1 0 }{PSTYLE "" 2 6 1 {CSTYLE "" -1 -1 "" 0 1 
186 136 0 0 0 0 0 0 0 0 2 0 0 }0 0 0 -1 -1 -1 0 0 0 0 0 0 -1 0 }
{PSTYLE "Maple Output" 0 11 1 {CSTYLE "" -1 -1 "" 0 1 0 0 152 0 0 0 0 
0 0 0 0 0 0 }3 3 0 -1 -1 -1 0 0 0 0 0 0 -1 0 }{PSTYLE "" 11 12 1 
{CSTYLE "" -1 -1 "" 0 1 46 46 44 0 0 0 0 0 0 0 0 0 0 }1 0 0 -1 -1 -1 
0 0 0 0 0 0 -1 0 }}
{SECT 0 {EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 8 "restart;" }}}{EXCHG 
{PARA 0 "> " 0 "" {MPLTEXT 1 0 786 "# NEWTON'S INTERPOLATORY DIVIDED-D
IFFERENCE FORMULA ALGORITHM 3.2        #\n# To obtain the divided-diff
erence coefficients of the                    # interpolatory polynomi
al P on the (n+1) distinct numbers x(0),          # x(1), ..., x(n) fo
r the function f:                                    #\n# INPUT:   num
bers x(0), x(1), ..., x(n); values f(x(0)), f(x(1)),          #       \+
   ..., f(x(n)) as the first column Q(0,0), Q(1,0), ...,          #   \+
 Q(N,0) OF Q, or may be computed if function f is supplied.\n#        \+
                                                                   # O
UTPUT:  the numbers Q(0,0), Q(1,1), ..., Q(N,N) where\n#          P(x)
 = Q(0,0) + Q(1,1)*(x-x(0)) + Q(2,2)*(x-x(0))*             #          \+
(x-x(1)) +... + Q(N,N)*(x-x(0))*(x-x(1))*...*(x-x(N-1))." }}{PARA 0 ">
 " 0 "" {MPLTEXT 1 0 69 "alg032 := proc() local OK, FLAG, N, I, X, Q, \+
A, NAME, INP, F, OUP, J;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 57 "printf(
`Newtons form of the interpolation polynomial\\n`);" }}{PARA 0 "> " 0 
"" {MPLTEXT 1 0 12 "OK := FALSE;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 19 
"while OK = FALSE do" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 36 "printf(`Cho
ice of input method:\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 50 "print
f(`1. Input entry by entry from keyboard\\n`);" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 43 "printf(`2. Input data from a text file\\n`);" }}
{PARA 0 "> " 0 "" {MPLTEXT 1 0 48 "printf(`3. Generate data using a fu
nction F\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 37 "printf(`Choose 1,
 2, or 3 please\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 23 "FLAG := sc
anf(`%d`)[1];" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 40 "if FLAG = 1 or FLA
G = 2 or FLAG = 3 then" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 11 "OK := TRU
E;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "fi;" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 3 "od;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 16 "if FLAG = 1 \+
then" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 12 "OK := FALSE;" }}{PARA 0 "> \+
" 0 "" {MPLTEXT 1 0 19 "while OK = FALSE do" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 20 "printf(`Input n\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 
1 0 20 "N := scanf(`%d`)[1];" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 13 "if \+
N > 0 then" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 11 "OK := TRUE;" }}{PARA 
0 "> " 0 "" {MPLTEXT 1 0 20 "for I from 0 to N do" }}{PARA 0 "> " 0 "
" {MPLTEXT 1 0 42 "printf(`Input X(%d) and F(X(%d)) `, I, I);" }}
{PARA 0 "> " 0 "" {MPLTEXT 1 0 31 "printf(`separated by space\\n`);" }
}{PARA 0 "> " 0 "" {MPLTEXT 1 0 23 "X[I] := scanf(`%f`)[1];" }}{PARA 
0 "> " 0 "" {MPLTEXT 1 0 25 "Q[I,0] := scanf(`%f`)[1];" }}{PARA 0 "> \+
" 0 "" {MPLTEXT 1 0 3 "od;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 5 "else \+
" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 46 "printf(`Number must be a positi
ve integer\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "fi;" }}{PARA 0 "
> " 0 "" {MPLTEXT 1 0 3 "od;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "fi;
" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 16 "if FLAG = 2 then" }}{PARA 0 "> \+
" 0 "" {MPLTEXT 1 0 72 "printf(`Has a text file been created with the \+
data in two columns ?\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 25 "prin
tf(`Enter Y or N\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 22 "A := scan
f(`\\n%c`)[1];" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 22 "if A = Y or A = y
 then" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 45 "printf(`Input the file nam
e in the form - `);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 29 "printf(`driv
e:\\\\name.ext\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 40 "printf(`For
 example:   A:\\\\DATA.DTA\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 23 
"NAME := scanf(`%s`)[1];" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 29 "INP := \+
fopen(NAME,READ,TEXT);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 12 "OK := FAL
SE;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 19 "while OK = FALSE do" }}
{PARA 0 "> " 0 "" {MPLTEXT 1 0 21 "printf(`Input n\\n`); " }}{PARA 0 "
> " 0 "" {MPLTEXT 1 0 20 "N := scanf(`%d`)[1];" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 31 "if N > 0 then                  " }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 20 "for I from 0 to N do" }}{PARA 0 "> " 0 "" {MPLTEXT 1 
0 29 "X[I] := fscanf(INP, `%f`)[1];" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 
31 "Q[I,0] := fscanf(INP, `%f`)[1];" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 
3 "od;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 12 "fclose(INP);" }}{PARA 0 "
> " 0 "" {MPLTEXT 1 0 11 "OK := TRUE;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 
0 4 "else" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 45 "printf(`Number must be
 a positive integer\\n`)" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "fi;" }}
{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "od;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 
0 4 "else" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 54 "printf(`Please create \+
the input file in two column `);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 39 
"printf(`form with the X values and\\n`);" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 54 "printf(`F(X) values in the corresponding columns.\\n`
);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 54 "printf(`The program will end \+
so the input file can `);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 24 "printf
(`be created.\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 12 "OK := FALSE;
" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "fi;" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 3 "fi;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 16 "if FLAG = 3 \+
then" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 50 "printf(`Input the function \+
F(x) in terms of x\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 30 "printf(
`For example: cos(x)`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 20 "F := sca
nf(`%a`)[1];" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 18 "F := unapply(F,x);
" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 12 "OK := FALSE;" }}{PARA 0 "> " 0 
"" {MPLTEXT 1 0 19 "while OK = FALSE do" }}{PARA 0 "> " 0 "" {MPLTEXT 
1 0 20 "printf(`Input n\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 20 "N \+
:= scanf(`%d`)[1];" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 13 "if N > 0 then
" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 20 "for I from 0 to N do" }}{PARA 
0 "> " 0 "" {MPLTEXT 1 0 27 "printf(`Input X(%d)\\n`, I);" }}{PARA 0 "
> " 0 "" {MPLTEXT 1 0 23 "X[I] := scanf(`%f`)[1];" }}{PARA 0 "> " 0 "
" {MPLTEXT 1 0 18 "Q[I,0] := F(X[I]);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 
0 3 "od;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 11 "OK := TRUE;" }}{PARA 0 
"> " 0 "" {MPLTEXT 1 0 4 "else" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 46 "p
rintf(`Number must be a positive integer\\n`);" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 3 "fi;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "od;" }}{PARA 
0 "> " 0 "" {MPLTEXT 1 0 3 "fi;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 17 "
if OK = TRUE then" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 38 "printf(`Select
 output destination\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 22 "printf
(`1. Screen\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 25 "printf(`2. Tex
t file\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 25 "printf(`Enter 1 or \+
2\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 23 "FLAG := scanf(`%d`)[1];
" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 16 "if FLAG = 2 then" }}{PARA 0 "> \+
" 0 "" {MPLTEXT 1 0 63 "printf(`Input the file name in the form - driv
e:\\\\name.ext\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 42 "printf(`For
 example:   A:\\\\OUTPUT.DTA\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 
23 "NAME := scanf(`%s`)[1];" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 30 "OUP \+
:= fopen(NAME,WRITE,TEXT);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 4 "else" 
}}{PARA 0 "> " 0 "" {MPLTEXT 1 0 15 "OUP := default;" }}{PARA 0 "> " 
0 "" {MPLTEXT 1 0 3 "fi;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 53 "fprintf
(OUP, `NEWTONS INTERPOLATION POLYNOMIAL\\n\\n`);" }}{PARA 0 "" 0 "" 
{TEXT -1 6 "STEP 1" }{MPLTEXT 1 0 0 "" }}{PARA 0 "> " 0 "" {MPLTEXT 1 
0 20 "for I from 1 to N do" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 20 "for J
 from 1 to I do" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 52 "Q[I,J] := (Q[I,J
-1] - Q[I-1,J-1]) / (X[I] - X[I-J]);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 
0 3 "od;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "od;" }}{PARA 0 "" 0 "" 
{TEXT -1 6 "STEP 2" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 44 "fprintf(OUP, \+
`Input data follows:\\n`);      " }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 20 
"for I from 0 to N do" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 77 "fprintf(OU
P, `X(%d) = %12.8f F(X(%d)) = %12.8f\\n`, I, X[I], I, Q[I,0]);      " 
}}{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "od;" }}{PARA 0 "> " 0 "" {MPLTEXT 
1 0 68 "fprintf(OUP, `\\nThe coefficients Q(0,0), ..., Q(N,N) are:\\n`
);      " }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 20 "for I from 0 to N do" }
}{PARA 0 "> " 0 "" {MPLTEXT 1 0 33 "fprintf(OUP, `%12.8f\\n`, Q[I,I]);
" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "od;" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 22 "if OUP <> default then" }}{PARA 0 "> " 0 "" {MPLTEXT 
1 0 12 "fclose(OUP);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 50 "printf(`Out
put file %s created sucessfully`,NAME);" }}{PARA 0 "> " 0 "" {MPLTEXT 
1 0 3 "fi;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "fi;" }}{PARA 0 "> " 0 
"" {MPLTEXT 1 0 10 "RETURN(0);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 4 "en
d;" }}{PARA 12 "" 1 "" {XPPMATH 20 "6#>%'alg032G:6\"6.%#OKG%%FLAGG%\"N
G%\"IG%\"XG%\"QG%\"AG%%NAMEG%$INPG%\"FG%$OUPG%\"JGF&F&C*-%'printfG6#%N
Newtons~form~of~the~interpolation~polynomial|+G>8$%&FALSEG?(F&\"\"\"F=
F&/F:F;C)-F66#%9Choice~of~input~method:|+G-F66#%G1.~Input~entry~by~ent
ry~from~keyboard|+G-F66#%@2.~Input~data~from~a~text~file|+G-F66#%E3.~G
enerate~data~using~a~function~F|+G-F66#%:Choose~1,~2,~or~3~please|+G>8
%&-%&scanfG6#%#%dG6#F=@$55/FPF=/FP\"\"#/FP\"\"$>F:%%TRUEG@$FZC$>F:F;?(
F&F=F=F&F>C%-F66#%)Input~n|+G>8&FQ@%2\"\"!FdoC$>F:Fjn?(8'FgoF=Fdo%%tru
eGC&-F66%%:Input~X(%d)~and~F(X(%d))~GF[pF[p-F66#%4separated~by~space|+
G>&8(6#F[p&-FS6#%#%fGFV>&8)6$F[pFgoFhp-F66#%CNumber~must~be~a~positive
~integer|+G@$FenC&-F66#%gnHas~a~text~file~been~created~with~the~data~i
n~two~columns~?|+G-F66#%.Enter~Y~or~N|+G>8*&-FS6#%$|+%cGFV@%5/F\\r%\"Y
G/F\\r%\"yGC)-F66#%CInput~the~file~name~in~the~form~-~G-F66#%1drive:\\
name.ext|+G-F66#%<For~example:~~~A:\\DATA.DTA|+G>8+&-FS6#%#%sGFV>8,-%&
fopenG6%Fbs%%READG%%TEXTG>F:F;?(F&F=F=F&F>C%F`o>FdoFQ@%FfoC%?(F[pFgoF=
FdoF\\pC$>Fep&-%'fscanfG6$FhsF[qFV>F]qFgt-%'fcloseG6#Fhs>F:FjnF`qC(-F6
6#%LPlease~create~the~input~file~in~two~column~G-F66#%<form~with~the~X
~values~and|+G-F66#%KF(X)~values~in~the~corresponding~columns.|+G-F66#
%LThe~program~will~end~so~the~input~file~can~G-F66#%-be~created.|+G>F:
F;@$FgnC(-F66#%GInput~the~function~F(x)~in~terms~of~x|+G-F66#%4For~exa
mple:~cos(x)G>8-&-FS6#%#%aGFV>Fjv-%(unapplyG6$Fjv%\"xG>F:F;?(F&F=F=F&F
>C%F`o>FdoFQ@%FfoC$?(F[pFgoF=FdoF\\pC%-F66$%-Input~X(%d)|+GF[p>FepFhp>
F]q-Fjv6#Fep>F:FjnF`q@$/F:FjnC.-F66#%;Select~output~destination|+G-F66
#%+1.~Screen|+G-F66#%.2.~Text~file|+G-F66#%.Enter~1~or~2|+G>FPFQ@%FenC
&-F66#%SInput~the~file~name~in~the~form~-~drive:\\name.ext|+G-F66#%>Fo
r~example:~~~A:\\OUTPUT.DTA|+G>FbsFcs>8.-Fjs6%Fbs%&WRITEGF]tC$>F^z%(de
faultG-%(fprintfG6$F^z%CNEWTONS~INTERPOLATION~POLYNOMIAL|+|+G?(F[pF=F=
FdoF\\p?(8/F=F=F[pF\\p>&F^q6$F[pF[[l*&,&&F^q6$F[p,&F[[lF=!\"\"F=F=&F^q
6$,&F[pF=Fd[lF=Fc[lFd[lF=,&FepF=&Ffp6#,&F[pF=F[[lFd[lFd[lFd[l-Ffz6$F^z
%5Input~data~follows:|+G?(F[pFgoF=FdoF\\p-Ffz6(F^z%BX(%d)~=~%12.8f~F(X
(%d))~=~%12.8f|+GF[pFepF[pF]q-Ffz6$F^z%L|+The~coefficients~Q(0,0),~...
,~Q(N,N)~are:|+G?(F[pFgoF=FdoF\\p-Ffz6%F^z%(%12.8f|+G&F^q6$F[pF[p@$0F^
zFdzC$-F]u6#F^z-F66$%COutput~file~%s~created~sucessfullyGFbs-%'RETURNG
6#FgoF&F&" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 9 "alg032();" }}
{PARA 6 "" 1 "" {TEXT -1 198 "Newtons form of the interpolation polyno
mial\nChoice of input method:\n1. Input entry by entry from keyboard\n
2. Input data from a text file\n3. Generate data using a function F\nC
hoose 1, 2, or 3 please" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 1 "2
" }}{PARA 6 "" 1 "" {TEXT -1 72 "Has a text file been created with the
 data in two columns ?\nEnter Y or N" }}}{EXCHG {PARA 0 "> " 0 "" 
{MPLTEXT 1 0 1 "y" }}{PARA 6 "" 1 "" {TEXT -1 76 "Input the file name \+
in the form - drive:\\name.ext\nFor example:   A:\\DATA.DTA" }}}
{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 18 "c:\\data\\alg032.dta" }}
{PARA 6 "" 1 "" {TEXT -1 7 "Input n" }}}{EXCHG {PARA 0 "> " 0 "" 
{MPLTEXT 1 0 1 "4" }}{PARA 6 "" 1 "" {TEXT -1 61 "Select output destin
ation\n1. Screen\n2. Text file\nEnter 1 or 2" }}}{EXCHG {PARA 0 "> " 
0 "" {MPLTEXT 1 0 1 "1" }}{PARA 6 "" 1 "" {TEXT -1 374 "NEWTONS INTERP
OLATION POLYNOMIAL\n\nInput data follows:\nX(0) =   1.00000000 F(X(0))
 =    .76519770\nX(1) =   1.30000000 F(X(1)) =    .62008600\nX(2) =   \+
1.60000000 F(X(2)) =    .45540220\nX(3) =   1.90000000 F(X(3)) =    .2
8181860\nX(4) =   2.20000000 F(X(4)) =    .11036230\n\nThe coefficient
s Q(0,0), ..., Q(N,N) are:\n   .76519770\n -.48370566\n -.10873388\n  \+
 .06587839\n   .00182510" }}{PARA 11 "" 1 "" {XPPMATH 20 "6#\"\"!" }}}
{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 0 "" }}}{PARA 0 "" 0 "" {TEXT 
-1 0 "" }}}{MARK "1 103 0" 0 }{VIEWOPTS 1 1 0 1 1 1803 }
