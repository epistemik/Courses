{VERSION 2 3 "IBM INTEL NT" "2.3" }
{USTYLETAB {CSTYLE "Maple Input" -1 0 "Courier" 0 0 128 0 128 1 0 1 0 
0 1 0 0 0 0 }{CSTYLE "2D Math" -1 2 "Times" 0 1 186 136 0 0 0 0 2 0 0 
0 0 0 0 }{CSTYLE "2D Output" 2 20 "" 0 0 0 128 128 1 0 0 0 0 0 0 0 0 
0 }{PSTYLE "Normal" -1 0 1 {CSTYLE "" -1 -1 "" 0 1 0 0 0 0 0 0 0 0 0 
0 0 0 0 }0 0 0 -1 -1 -1 0 0 0 0 0 0 -1 0 }{PSTYLE "Text Output" -1 2 
1 {CSTYLE "" -1 -1 "Courier" 1 10 0 0 255 1 0 0 0 0 0 1 3 0 0 }1 0 0 
-1 -1 -1 0 0 0 0 0 0 -1 0 }{PSTYLE "" 2 6 1 {CSTYLE "" -1 -1 "" 0 1 0 
0 160 0 0 0 0 0 0 0 2 0 0 }0 0 0 -1 -1 -1 0 0 0 0 0 0 -1 0 }{PSTYLE "M
aple Output" 0 11 1 {CSTYLE "" -1 -1 "" 0 1 0 0 152 0 0 0 0 0 0 0 0 0 
0 }3 3 0 -1 -1 -1 0 0 0 0 0 0 -1 0 }{PSTYLE "" 11 12 1 {CSTYLE "" -1 
-1 "" 0 1 0 0 64 0 0 0 0 0 0 0 0 0 0 }1 0 0 -1 -1 -1 0 0 0 0 0 0 -1 0 
}}
{SECT 0 {EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 8 "restart;" }}}{EXCHG 
{PARA 0 "> " 0 "" {MPLTEXT 1 0 511 "# GAUSS-SEIDEL ITERATIVE TECHNIQUE
 ALGORITHM 7.2\n#\n# To solve Ax = b given an initial approximation x(
0).\n#\n# INPUT:   the number of equations and unknowns n; the entries
\n#          A(I,J), 1<=I, J<=n, of the matrix A; the entries\n#      \+
    B(I), 1<=I<=n, of the inhomogeneous term b; the\n#          entrie
s XO(I), 1<=I<=n, of x(0); tolerance TOL;\n#          maximum number o
f iterations N.\n#\n#  OUTPUT: the approximate solution X(1),...,X(n) \+
or a message\n#          that the number of iterations was exceeded." 
}}{PARA 0 "> " 0 "" {MPLTEXT 1 0 88 "alg072 := proc() local AA, OK, NA
ME, INP, N, I, J, A, X1, TOL, NN, K, ERR, S, FLAG, OUP;" }}{PARA 0 "> \+
" 0 "" {MPLTEXT 1 0 64 "printf(`This is the Gauss-Seidel Method for Li
near Systems.\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 66 "printf(`The \+
array will be input from a text file in the order\\n`);" }}{PARA 0 "> \+
" 0 "" {MPLTEXT 1 0 60 "printf(`A(1,1), A(1,2), ..., A(1,n+1), A(2,1),
 A(2,2), ..., " }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 48 "A(2,n+1),..., A(n
,1), A(n,2), ..., A(n,n+1)\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 72 
"printf(`Place as many entries as desired on each line, but separate\\
n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 24 "printf(`entries with `);" }
}{PARA 0 "> " 0 "" {MPLTEXT 1 0 36 "printf(`at least one blank.\\n\\n
\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 61 "printf(`Has the input fil
e been created? - enter Y or N.\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 
0 21 "AA := scanf(`%c`)[1];" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 12 "OK :
= FALSE;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 24 "if AA = Y or AA = y the
n" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 63 "printf(`Input the file name in
 the form - drive:\\\\name.ext\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 
0 40 "printf(`for example:   A:\\\\DATA.DTA\\n`);" }}{PARA 0 "> " 0 "
" {MPLTEXT 1 0 23 "NAME := scanf(`%s`)[1];" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 29 "INP := fopen(NAME,READ,TEXT);" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 12 "OK := FALSE;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 19 "wh
ile OK = FALSE do" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 56 "printf(`Input \+
the number of equations - an integer.\\n`);" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 20 "N := scanf(`%d`)[1];" }}{PARA 0 "> " 0 "" {MPLTEXT 1 
0 13 "if N > 0 then" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 20 "for I from 1
 to N do" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 22 "for J from 1 to N+1 do
" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 35 "A[I-1,J-1] := fscanf(INP, `%f`)
[1];" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "od;" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 3 "od;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 20 "for I from 1
 to N do" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 32 "X1[I-1] := fscanf(INP, \+
`%f`)[1];" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "od;" }}{PARA 0 "> " 0 "
" {MPLTEXT 1 0 11 "OK := TRUE;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 12 "f
close(INP);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 4 "else" }}{PARA 0 "> " 
0 "" {MPLTEXT 1 0 50 "printf(`The number must be a positive integer\\n
`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "fi;" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 3 "od;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 12 "OK := FALSE;
" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 19 "while OK = FALSE do" }}{PARA 0 
"> " 0 "" {MPLTEXT 1 0 33 "printf(`Input the tolerance.\\n`);" }}
{PARA 0 "> " 0 "" {MPLTEXT 1 0 22 "TOL := scanf(`%f`)[1];" }}{PARA 0 "
> " 0 "" {MPLTEXT 1 0 15 "if TOL > 0 then" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 11 "OK := TRUE;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 4 "else
" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 42 "printf(`Tolerance must be a pos
itive.\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "fi;" }}{PARA 0 "> " 
0 "" {MPLTEXT 1 0 3 "od;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 12 "OK := F
ALSE;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 19 "while OK = FALSE do" }}
{PARA 0 "> " 0 "" {MPLTEXT 1 0 48 "printf(`Input maximum number of ite
rations.\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 21 "NN := scanf(`%d`)
[1];" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 14 "if NN > 0 then" }}{PARA 0 "
> " 0 "" {MPLTEXT 1 0 11 "OK := TRUE;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 
0 4 "else" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 47 "printf(`Number must be
 a positive integer.\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "fi;" }
}{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "od;" }}{PARA 0 "> " 0 "" {MPLTEXT 
1 0 4 "else" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 67 "printf(`The program \+
will end so the input file can be created.\\n`);" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 3 "fi;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 17 "if OK = TRUE
 then" }}{PARA 0 "" 0 "" {TEXT -1 6 "STEP 1" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 7 "K := 1;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 12 "OK := FA
LSE;" }}{PARA 0 "" 0 "" {TEXT -1 6 "STEP 2" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 31 "while OK = FALSE and K <= NN do" }}{PARA 0 "" 0 "" 
{TEXT -1 59 "err is used to test accuracy - it measure the infinity-no
rm" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 9 "ERR := 0;" }}{PARA 0 "" 0 "" 
{TEXT -1 6 "STEP 3" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 20 "for I from 1 \+
to N do" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 7 "S := 0;" }}{PARA 0 "> " 
0 "" {MPLTEXT 1 0 20 "for J from 1 to N do" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 26 "S := S-A[I-1,J-1]*X1[J-1];" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 3 "od;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 29 "S := (S+A[I-
1,N])/A[I-1,I-1];" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 20 "if abs(S) > ER
R then" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 15 "ERR  := abs(S);" }}{PARA 
0 "> " 0 "" {MPLTEXT 1 0 3 "fi;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 23 "
X1[I-1] := X1[I-1] + S;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "od;" }}
{PARA 0 "" 0 "" {TEXT -1 6 "STEP 4" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 
18 "if ERR <= TOL then" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 11 "OK := TRU
E;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "fi;" }}{PARA 0 "" 0 "" {TEXT 
-1 19 "process is complete" }}{PARA 0 "" 0 "" {TEXT -1 6 "STEP 5" }}
{PARA 0 "> " 0 "" {MPLTEXT 1 0 9 "K := K+1;" }}{PARA 0 "" 0 "" {TEXT 
-1 54 "STEP 6 - is not used since only one vector is required" }}
{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "od;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 
0 18 "if OK = FALSE then" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 51 "printf(
`Maximum Number of Iterations Exceeded.\\n`);" }}{PARA 0 "" 0 "" 
{TEXT -1 6 "STEP 7" }}{PARA 0 "" 0 "" {TEXT -1 34 "procedure completed
 unsuccessfully" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 4 "else" }}{PARA 0 "
> " 0 "" {MPLTEXT 1 0 37 "printf(`Choice of output method:\\n`);" }}
{PARA 0 "> " 0 "" {MPLTEXT 1 0 32 "printf(`1. Output to screen\\n`);" 
}}{PARA 0 "> " 0 "" {MPLTEXT 1 0 35 "printf(`2. Output to text file\\n
`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 33 "printf(`Please enter 1 or 2.
\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 23 "FLAG := scanf(`%d`)[1];" 
}}{PARA 0 "> " 0 "" {MPLTEXT 1 0 16 "if FLAG = 2 then" }}{PARA 0 "> " 
0 "" {MPLTEXT 1 0 63 "printf(`Input the file name in the form - drive:
\\\\name.ext\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 42 "printf(`for e
xample:   A:\\\\OUTPUT.DTA\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 23 
"NAME := scanf(`%s`)[1];" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 30 "OUP := \+
fopen(NAME,WRITE,TEXT);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 4 "else" }}
{PARA 0 "> " 0 "" {MPLTEXT 1 0 15 "OUP := default;" }}{PARA 0 "> " 0 "
" {MPLTEXT 1 0 3 "fi;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 59 "fprintf(OU
P, `GAUSS-SEIDEL METHOD FOR LINEAR SYSTEMS\\n\\n`);" }}{PARA 0 "> " 0 
"" {MPLTEXT 1 0 43 "fprintf(OUP, `The solution vector is :\\n`);" }}
{PARA 0 "> " 0 "" {MPLTEXT 1 0 20 "for I from 1 to N do" }}{PARA 0 "> \+
" 0 "" {MPLTEXT 1 0 33 "fprintf(OUP, ` %11.8f`, X1[I-1]);" }}{PARA 0 "
> " 0 "" {MPLTEXT 1 0 3 "od;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 43 "fpr
intf(OUP, `\\nusing %d iterations\\n`, K);" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 62 "fprintf(OUP, `with Tolerance  %.10e in infinity-norm
\\n`, TOL);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 22 "if OUP <> default th
en" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 12 "fclose(OUP):" }}{PARA 0 "> " 
0 "" {MPLTEXT 1 0 50 "printf(`Output file %s created sucessfully`,NAME
);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "fi;" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 3 "fi;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "fi;" }}{PARA 
0 "> " 0 "" {MPLTEXT 1 0 10 "RETURN(0);" }}{PARA 0 "> " 0 "" {MPLTEXT 
1 0 4 "end;" }}{PARA 12 "" 1 "" {XPPMATH 20 "6#>%'alg072G:6\"62%#AAG%#
OKG%%NAMEG%$INPG%\"NG%\"IG%\"JG%\"AG%#X1G%$TOLG%#NNG%\"KG%$ERRG%\"SG%%
FLAGG%$OUPGF&F&C.-%'printfG6#%UThis~is~the~Gauss-Seidel~Method~for~Lin
ear~Systems.|+G-F:6#%WThe~array~will~be~input~from~a~text~file~in~the~
order|+G-F:6#%\\qA(1,1),~A(1,2),~...,~A(1,n+1),~A(2,1),~A(2,2),~...,~|
+A(2,n+1),...,~A(n,1),~A(n,2),~...,~A(n,n+1)|+G-F:6#%gnPlace~as~many~e
ntries~as~desired~on~each~line,~but~separate|+G-F:6#%.entries~with~G-F
:6#%7at~least~one~blank.|+|+|+G-F:6#%RHas~the~input~file~been~created?
~-~enter~Y~or~N.|+G>8$&-%&scanfG6#%#%cG6#\"\"\">8%%&FALSEG@%5/FP%\"YG/
FP%\"yGC,-F:6#%SInput~the~file~name~in~the~form~-~drive:\\name.ext|+G-
F:6#%<for~example:~~~A:\\DATA.DTA|+G>8&&-FS6#%#%sGFV>8'-%&fopenG6%Fco%
%READG%%TEXTG>FYFZ?(F&FWFWF&/FYFZC%-F:6#%MInput~the~number~of~equation
s~-~an~integer.|+G>8(&-FS6#%#%dGFV@%2\"\"!FgpC&?(8)FWFWFgp%%trueG?(8*F
WFW,&FgpFWFWFWFbq>&8+6$,&FaqFW!\"\"FW,&FdqFWF[rFW&-%'fscanfG6$Fio%#%fG
FV?(FaqFWFWFgpFbq>&8,6#FjqF]r>FY%%TRUEG-%'fcloseG6#Fio-F:6#%GThe~numbe
r~must~be~a~positive~integer|+G>FYFZ?(F&FWFWF&FapC%-F:6#%6Input~the~to
lerance.|+G>8-&-FS6#FarFV@%2F^qFfs>FYFhr-F:6#%?Tolerance~must~be~a~pos
itive.|+G>FYFZ?(F&FWFWF&FapC%-F:6#%EInput~maximum~number~of~iterations
.|+G>8.Fhp@%2F^qFgt>FYFhr-F:6#%DNumber~must~be~a~positive~integer.|+G-
F:6#%XThe~program~will~end~so~the~input~file~can~be~created.|+G@$/FYFh
rC&>8/FW>FYFZ?(F&FWFWF&3Fap1FeuFgtC&>80F^q?(FaqFWFWFgpFbqC'>81F^q?(Fdq
FWFWFgpFbq>F`v,&F`vFW*&FgqFW&Fer6#F\\rFWF[r>F`v*&,&F`vFW&Fhq6$FjqFgpFW
FW&Fhq6$FjqFjqF[r@$2F\\v-%$absG6#F`v>F\\vF`w>Fdr,&FdrFWF`vFW@$1F\\vFfs
>FYFhr>Feu,&FeuFWFWFW@%Fap-F:6#%HMaximum~Number~of~Iterations~Exceeded
.|+GC.-F:6#%:Choice~of~output~method:|+G-F:6#%51.~Output~to~screen|+G-
F:6#%82.~Output~to~text~file|+G-F:6#%6Please~enter~1~or~2.|+G>82Fhp@%/
F]y\"\"#C&F\\o-F:6#%>for~example:~~~A:\\OUTPUT.DTA|+G>FcoFdo>83-F[p6%F
co%&WRITEGF^p>Fgy%(defaultG-%(fprintfG6$Fgy%IGAUSS-SEIDEL~METHOD~FOR~L
INEAR~SYSTEMS|+|+G-F^z6$Fgy%:The~solution~vector~is~:|+G?(FaqFWFWFgpFb
q-F^z6%Fgy%(~%11.8fGFdr-F^z6%Fgy%6|+using~%d~iterations|+GFeu-F^z6%Fgy
%Hwith~Tolerance~~%.10e~in~infinity-norm|+GFfs@$0FgyF\\zC$-Fjr6#Fgy-F:
6$%COutput~file~%s~created~sucessfullyGFco-%'RETURNG6#F^qF&F&" }}}
{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 9 "alg072();" }}{PARA 6 "" 1 "" 
{TEXT -1 346 "This is the Gauss-Seidel Method for Linear Systems.\nThe
 array will be input from a text file in the order\nA(1,1), A(1,2), ..
., A(1,n+1), A(2,1), A(2,2), ..., \nA(2,n+1),..., A(n,1), A(n,2), ...,
 A(n,n+1)\nPlace as many entries as desired on each line, but separate
\nentries with at least one blank.\n\n\nHas the input file been create
d? - enter Y or N." }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 1 "y" }}
{PARA 6 "" 1 "" {TEXT -1 76 "Input the file name in the form - drive:
\\name.ext\nfor example:   A:\\DATA.DTA" }}}{EXCHG {PARA 0 "> " 0 "" 
{MPLTEXT 1 0 18 "c:\\data\\alg072.dta" }}{PARA 6 "" 1 "" {TEXT -1 43 "
Input the number of equations - an integer." }}}{EXCHG {PARA 0 "> " 0 
"" {MPLTEXT 1 0 1 "4" }}{PARA 6 "" 1 "" {TEXT -1 20 "Input the toleran
ce." }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 6 ".00001" }}{PARA 6 "" 
1 "" {TEXT -1 35 "Input maximum number of iterations." }}}{EXCHG 
{PARA 0 "> " 0 "" {MPLTEXT 1 0 2 "25" }}{PARA 6 "" 1 "" {TEXT -1 88 "C
hoice of output method:\n1. Output to screen\n2. Output to text file\n
Please enter 1 or 2." }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 1 "1" }
}{PARA 6 "" 1 "" {TEXT -1 182 "GAUSS-SEIDEL METHOD FOR LINEAR SYSTEMS
\n\nThe solution vector is :\n  1.00000066  2.00000002 -1.00000020   .
99999996\nusing 8 iterations\nwith Tolerance  1.0000000000e-05 in infi
nity-norm" }}{PARA 11 "" 1 "" {XPPMATH 20 "6#\"\"!" }}}{EXCHG {PARA 0 
"> " 0 "" {MPLTEXT 1 0 1 " " }}}}{MARK "4 0 0" 18 }{VIEWOPTS 1 1 0 1 
1 1803 }
