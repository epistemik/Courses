{VERSION 2 3 "IBM INTEL NT" "2.3" }
{USTYLETAB {CSTYLE "Maple Input" -1 0 "Courier" 0 0 128 0 128 1 0 1 0 
0 1 0 0 0 0 }{CSTYLE "2D Math" -1 2 "Times" 0 1 186 136 0 0 0 0 2 0 0 
0 0 0 0 }{CSTYLE "2D Output" 2 20 "" 0 0 0 128 128 1 0 0 0 0 0 0 0 0 
0 }{PSTYLE "Normal" -1 0 1 {CSTYLE "" -1 -1 "" 0 1 0 0 0 0 0 0 0 0 0 
0 0 0 0 }0 0 0 -1 -1 -1 0 0 0 0 0 0 -1 0 }{PSTYLE "Text Output" -1 2 
1 {CSTYLE "" -1 -1 "Courier" 1 10 0 0 255 1 0 0 0 0 0 1 3 0 0 }1 0 0 
-1 -1 -1 0 0 0 0 0 0 -1 0 }{PSTYLE "" 2 6 1 {CSTYLE "" -1 -1 "" 0 1 0 
0 0 0 0 0 0 0 0 0 2 0 0 }0 0 0 -1 -1 -1 0 0 0 0 0 0 -1 0 }{PSTYLE "Map
le Output" 0 11 1 {CSTYLE "" -1 -1 "" 0 1 0 0 152 0 0 0 0 0 0 0 0 0 0 
}3 3 0 -1 -1 -1 0 0 0 0 0 0 -1 0 }{PSTYLE "" 11 12 1 {CSTYLE "" -1 -1 
"" 0 1 32 65 40 0 0 0 0 0 0 0 0 0 0 }1 0 0 -1 -1 -1 0 0 0 0 0 0 -1 0 }
}
{SECT 0 {EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 8 "restart;" }}}{EXCHG 
{PARA 0 "> " 0 "" {MPLTEXT 1 0 407 "# INVERSE POWER METHOD ALGORITHM 9
.3\n#\n# To approximate an eigenvalue and an associated eigenvector of
 the\n# n by n matrix A given a nonzero vector x:\n#\n# INPUT:   Dimen
sion n; matrix A; vector x; tolerance TOL;\n#          maximum number \+
of iterations N.\n#\n# OUTPUT:  Approximate eigenvalue MU; approximate
 eigenvector x\n#          or a message that the maximum number of ite
rations was\n#          exceeded." }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 
126 "alg093 := proc() local MULTIP, SOLVE, OK, AA, NAME, INP, N, I, J,
 A, X, TOL, NN, FLAG, OUP, Q, S, K, LP, AMAX, B, YMU, ERR, T;" }}
{PARA 0 "> " 0 "" {MPLTEXT 1 0 77 "MULTIP := proc(N,OK,NROW,Q,A) local
 I, M, IMAX, J, IP, L1, L2, JJ, I1, J1, K;" }}{PARA 0 "" 0 "" {TEXT 
-1 136 "Procedure MULTIP determines the row ordering and multipliers f
or the matrix A-Q*I for use in Gaussian elimination with Partial Pivot
ing." }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 20 "for I from 1 to N do" }}
{PARA 0 "> " 0 "" {MPLTEXT 1 0 15 "NROW[I-1] := I;" }}{PARA 0 "> " 0 "
" {MPLTEXT 1 0 15 "od; OK := TRUE;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 
7 "I := 1;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 11 "M := N - 1;" }}{PARA 
0 "> " 0 "" {MPLTEXT 1 0 29 "while I <= M and OK = TRUE do" }}{PARA 0 
"> " 0 "" {MPLTEXT 1 0 10 "IMAX := I;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 
0 9 "J := I+1;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 21 "for IP from J to \+
N do" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 19 "L1 := NROW[IMAX-1];" }}
{PARA 0 "> " 0 "" {MPLTEXT 1 0 17 "L2 := NROW[IP-1];" }}{PARA 0 "> " 
0 "" {MPLTEXT 1 0 43 "if abs(A[L2-1,I-1]) > abs(A[L1-1,I-1]) then" }}
{PARA 0 "> " 0 "" {MPLTEXT 1 0 11 "IMAX := IP;" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 3 "fi;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "od;" }}{PARA 
0 "> " 0 "" {MPLTEXT 1 0 45 "if abs(A[NROW[IMAX-1]-1,I-1]) <= 1.0e-20 \+
then" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 12 "OK := FALSE;" }}{PARA 0 "> \+
" 0 "" {MPLTEXT 1 0 65 "printf(`'A - Q * I is singular, Q = %.8e is an
 eigenvalue\\n`, Q);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 4 "else" }}
{PARA 0 "> " 0 "" {MPLTEXT 1 0 16 "JJ := NROW[I-1];" }}{PARA 0 "> " 0 
"" {MPLTEXT 1 0 26 "NROW[I-1] := NROW[IMAX-1];" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 19 "NROW[IMAX-1] := JJ;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 
0 16 "I1 := NROW[I-1];" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 21 "for JJ fr
om J to N do" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 17 "J1 := NROW[JJ-1];" 
}}{PARA 0 "> " 0 "" {MPLTEXT 1 0 41 "A[J1-1,I-1] := A[J1-1,I-1] / A[I1
-1,I-1];" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 20 "for K from J to N do" }
}{PARA 0 "> " 0 "" {MPLTEXT 1 0 55 "A[J1-1,K-1] := A[J1-1,K-1] - A[J1-
1,I-1] * A[I1-1,K-1];" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "od;" }}
{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "od;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 
0 3 "fi;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 9 "I := I+1;" }}{PARA 0 "> \+
" 0 "" {MPLTEXT 1 0 3 "od;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 42 "if ab
s(A[NROW[N-1]-1,N-1]) <= 1.0e-20 then" }}{PARA 0 "> " 0 "" {MPLTEXT 1 
0 12 "OK := FALSE;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 64 "printf(`A - Q
 * I is singular, Q = %.8e is an eigenvalue\\n`, Q);" }}{PARA 0 "> " 
0 "" {MPLTEXT 1 0 3 "fi;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 4 "end;" }}
{PARA 0 "> " 0 "" {MPLTEXT 1 0 72 "SOLVE := proc(N,B,A,Y,NROW) local M
, I, J, I1, JJ, J1, N1, L, K, N2, KK;" }}{PARA 0 "" 0 "" {TEXT -1 135 
"Procedure SOLVE solves the linear system (A-Q*I) Y = X given a new ve
ctor X and the row ordering and multipliers from procedure MULTIP." }}
{PARA 0 "> " 0 "" {MPLTEXT 1 0 11 "M := N - 1;" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 20 "for I from 1 to M do" }}{PARA 0 "> " 0 "" {MPLTEXT 1 
0 9 "J := I+1;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 16 "I1 := NROW[I-1];
" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 22 "for JJ from J to N do;" }}
{PARA 0 "> " 0 "" {MPLTEXT 1 0 17 "J1 := NROW[JJ-1];" }}{PARA 0 "> " 
0 "" {MPLTEXT 1 0 43 "B[J1-1] := B[J1-1] - A[J1-1,I-1] * B[I1-1];" }}
{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "od;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 
0 3 "od;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 16 "N1 := NROW[N-1];" }}
{PARA 0 "> " 0 "" {MPLTEXT 1 0 32 "Y[N-1] := B[N1-1] / A[N1-1,N-1];" }
}{PARA 0 "> " 0 "" {MPLTEXT 1 0 11 "L := N - 1;" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 36 "for K from 1 to L do J := L - K + 1;" }}{PARA 0 "> " 
0 "" {MPLTEXT 1 0 12 "JJ := J + 1;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 
16 "N2 := NROW[J-1];" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 18 "Y[J-1] := B
[N2-1];" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 22 "for KK from JJ to N do" 
}}{PARA 0 "> " 0 "" {MPLTEXT 1 0 42 "Y[J-1] := Y[J-1] - A[N2-1,KK-1] *
 Y[KK-1];" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "od;" }}{PARA 0 "> " 0 "
" {MPLTEXT 1 0 31 "Y[J-1] := Y[J-1] / A[N2-1,J-1];" }}{PARA 0 "> " 0 "
" {MPLTEXT 1 0 3 "od;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 4 "end;" }}
{PARA 0 "> " 0 "" {MPLTEXT 1 0 46 "printf(`This is the Inverse Power M
ethod.\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 12 "OK := FALSE;" }}
{PARA 0 "> " 0 "" {MPLTEXT 1 0 67 "printf(`The array will be input fro
m a text file in the order:\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 
70 "printf(`A(1,1), A(1,2), ..., A(1,n), A(2,1), A(2,2), ..., A(2,n),
\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 47 "printf(`..., A(n,1), A(n,
2), ..., A(n,n)\\n\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 71 "printf(
`Place as many entries as desired on each line, but separate `);" }}
{PARA 0 "> " 0 "" {MPLTEXT 1 0 25 "printf(`entries with\\n`);" }}
{PARA 0 "> " 0 "" {MPLTEXT 1 0 32 "printf(`at least one blank.\\n`);" 
}}{PARA 0 "> " 0 "" {MPLTEXT 1 0 72 "printf(`The initial approximation
 should follow in same format.\\n\\n\\n`);" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 61 "printf(`Has the input file been created? - enter Y or
 N.\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 21 "AA := scanf(`%c`)[1];
" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 24 "if AA = Y or AA = y then" }}
{PARA 0 "> " 0 "" {MPLTEXT 1 0 63 "printf(`Input the file name in the \+
form - drive:\\\\name.ext\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 41 "
printf(`for example:   A:\\\\\\DATA.DTA\\n`);" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 23 "NAME := scanf(`%s`)[1];" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 29 "INP := fopen(NAME,READ,TEXT);" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 12 "OK := FALSE;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 19 "wh
ile OK = FALSE do" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 35 "printf(`Input \+
the dimension n.\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 20 "N := scan
f(`%d`)[1];" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 13 "if N > 0 then" }}
{PARA 0 "> " 0 "" {MPLTEXT 1 0 20 "for I from 1 to N do" }}{PARA 0 "> \+
" 0 "" {MPLTEXT 1 0 20 "for J from 1 to N do" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 35 "A[I-1,J-1] := fscanf(INP, `%f`)[1];" }}{PARA 0 "> " 
0 "" {MPLTEXT 1 0 3 "od;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "od;" }}
{PARA 0 "> " 0 "" {MPLTEXT 1 0 20 "for I from 1 to N do" }}{PARA 0 "> \+
" 0 "" {MPLTEXT 1 0 31 "X[I-1] := fscanf(INP, `%f`)[1];" }}{PARA 0 "> \+
" 0 "" {MPLTEXT 1 0 3 "od;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 12 "fclos
e(INP);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 19 "while OK = FALSE do" }}
{PARA 0 "> " 0 "" {MPLTEXT 1 0 33 "printf(`Input the tolerance.\\n`);
" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 22 "TOL := scanf(`%f`)[1];" }}
{PARA 0 "> " 0 "" {MPLTEXT 1 0 15 "if TOL > 0 then" }}{PARA 0 "> " 0 "
" {MPLTEXT 1 0 11 "OK := TRUE;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 4 "el
se" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 47 "printf(`Tolerance must be pos
itive number.\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "fi;" }}{PARA 
0 "> " 0 "" {MPLTEXT 1 0 3 "od;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 12 "
OK := FALSE;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 19 "while OK = FALSE do
" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 46 "printf(`Input maximum number of
 iterations `);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 23 "printf(`- intege
r.\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 21 "NN := scanf(`%d`)[1];" 
}}{PARA 0 "" 0 "" {TEXT -1 12 "use NN for n" }{MPLTEXT 1 0 0 "" }}
{PARA 0 "> " 0 "" {MPLTEXT 1 0 14 "if NN > 0 then" }}{PARA 0 "> " 0 "
" {MPLTEXT 1 0 11 "OK := TRUE;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 4 "el
se" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 45 "printf(`Number must be positi
ve integer.\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "fi;" }}{PARA 0 
"> " 0 "" {MPLTEXT 1 0 3 "od;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 4 "els
e" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 54 "printf(`The dimension must be \+
a positive integer.\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "fi;" }}
{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "od;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 
0 5 "else " }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 67 "printf(`The program w
ill end so the input file can be created.\\n`);" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 3 "fi;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 17 "if OK = TRUE
 then" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 37 "printf(`Choice of output m
ethod:\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 32 "printf(`1. Output t
o screen\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 35 "printf(`2. Output
 to text file\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 33 "printf(`Plea
se enter 1 or 2.\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 23 "FLAG := s
canf(`%d`)[1];" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 16 "if FLAG = 2 then
" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 63 "printf(`Input the file name in \+
the form - drive:\\\\name.ext\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 
41 "printf(`for example   A:\\\\OUTPUT.DTA\\n`);" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 23 "NAME := scanf(`%s`)[1];" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 30 "OUP := fopen(NAME,WRITE,TEXT);" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 4 "else" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 15 "OUP := defa
ult;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "fi;" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 41 "fprintf(OUP, `INVERSE POWER METHOD\\n\\n`);" }}{PARA 
0 "" 0 "" {TEXT -1 6 "STEP 1" }}{PARA 0 "" 0 "" {TEXT -1 37 "Q could b
e input instead of computed." }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 7 "Q :=
 0;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 7 "S := 0;" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 20 "for I from 1 to N do" }}{PARA 0 "> " 0 "" {MPLTEXT 1 
0 25 "S := S + X[I-1] * X[I-1];" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 20 "
for J from 1 to N do" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 38 "Q := Q + A[
I-1,J-1] * X[I-1] * X[J-1];" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "od;" 
}}{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "od;" }}{PARA 0 "> " 0 "" {MPLTEXT 
1 0 11 "Q := Q / S;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 25 "printf(`Q is
 %.8e\\n`, Q);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 39 "printf(`Input new
 Q? Enter Y or N.\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 23 "AA := sc
anf(`\\n%c`)[1];" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 25 "if AA = Y or  A
A = y then" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 24 "printf(`input new Q\\
n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 20 "Q := scanf(`%f`)[1];" }}
{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "fi;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 
0 53 "fprintf(OUP, `Iteration  Eigenvalue  Eigenvector\\n`);" }}{PARA 
0 "" 0 "" {TEXT -1 6 "STEP 2" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 7 "K :=
 1;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 20 "for I from 1 to N do" }}
{PARA 0 "> " 0 "" {MPLTEXT 1 0 29 "A[I-1,I-1] := A[I-1,I-1] - Q;" }}
{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "od;" }}{PARA 0 "" 0 "" {TEXT -1 184 
"Call subroutine to compute multipliers M(I,J) and upper triangular ma
trix for matrix A using Gauss elimination with partial pivoting.  NROW
 holds the ordering of rows for interchanges." }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 26 "MULTIP(N, OK, NROW, Q, A);" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 17 "if OK = TRUE then" }}{PARA 0 "" 0 "" {TEXT -1 6 "STEP
 3" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 8 "LP := 1;" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 20 "for I from 2 to N do" }}{PARA 0 "> " 0 "" {MPLTEXT 1 
0 34 "if abs(X[I-1]) > abs(X[LP-1]) then" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 8 "LP := I;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "fi;" }}
{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "od;" }}{PARA 0 "" 0 "" {TEXT -1 6 "S
TEP 4" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 16 "AMAX := X[LP-1];" }}{PARA 
0 "> " 0 "" {MPLTEXT 1 0 20 "for I from 1 to N do" }}{PARA 0 "> " 0 "
" {MPLTEXT 1 0 26 "X[I-1] := X[I-1] / (AMAX);" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 3 "od;" }}{PARA 0 "" 0 "" {TEXT -1 6 "STEP 5" }}{PARA 0 "
> " 0 "" {MPLTEXT 1 0 31 "while K <= NN and OK = TRUE do " }}{PARA 0 "
" 0 "" {TEXT -1 13 "STEPS 6 AND 7" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 
20 "for I from 1 to N do" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 17 "B[I-1] \+
:= X[I-1];" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "od;" }}{PARA 0 "" 0 "
" {TEXT -1 60 "Subroutine SOLVE returns the solution of ( A-Q*I) Y = b
 in Y" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 24 "SOLVE(N, B, A, Y, NROW);" 
}}{PARA 0 "" 0 "" {TEXT -1 6 "STEP 8" }}{PARA 0 "> " 0 "" {MPLTEXT 1 
0 15 "YMU := Y[LP-1];" }}{PARA 0 "" 0 "" {TEXT -1 14 "STEPS 9 AND 10" 
}}{PARA 0 "> " 0 "" {MPLTEXT 1 0 8 "LP := 1;" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 20 "for I from 2 to N do" }}{PARA 0 "> " 0 "" {MPLTEXT 1 
0 34 "if abs(Y[I-1]) > abs(Y[LP-1]) then" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 8 "LP := I;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "fi;" }}
{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "od;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 
0 16 "AMAX := Y[LP-1];" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 9 "ERR := 0;
" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 21 "for I from 1 to N do;" }}{PARA 
0 "> " 0 "" {MPLTEXT 1 0 19 "T := Y[I-1] / AMAX;" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 29 "if abs(X[I-1] - T) > ERR then" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 23 "ERR := abs(X[I-1] - T);" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 3 "fi;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 12 "X[I-1] := T;
" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "od;" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 19 "YMU := 1 / YMU + Q;" }}{PARA 0 "" 0 "" {TEXT -1 7 "ST
EP 11" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 37 "fprintf(OUP, `%3d %12.8f\\
n`, K, YMU);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 20 "for I from 1 to N d
o" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 32 "fprintf(OUP, ` %11.8f`, X[I-1]
);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "od;" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 19 "fprintf(OUP, `\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 
0 18 "if ERR < TOL then " }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 12 "OK := F
ALSE;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 42 "fprintf(OUP, `Eigenvalue :
= %12.8f`, YMU);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 46 "fprintf(OUP, ` \+
to tolerance := %.10e\\n`, TOL);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 55 
"fprintf(OUP, `obtained on iteration number %d\\n\\n`, K);" }}{PARA 0 
"> " 0 "" {MPLTEXT 1 0 40 "fprintf(OUP, `Unit eigenvector is :\\n`);" 
}}{PARA 0 "> " 0 "" {MPLTEXT 1 0 20 "for I from 1 to N do" }}{PARA 0 "
> " 0 "" {MPLTEXT 1 0 32 "fprintf(OUP, ` %11.8f`, X[I-1]);" }}{PARA 0 
"> " 0 "" {MPLTEXT 1 0 3 "od;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 19 "fp
rintf(OUP, `\\n`);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 4 "else" }}{PARA 
0 "" 0 "" {TEXT -1 7 "STEP 12" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 9 "K :
= K+1;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "fi;" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 3 "od;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 14 "if K > NN th
en" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 54 "fprintf(OUP,  `No convergence
 in %d iterations\\n`,NN);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "fi;" }
}{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "fi;" }}{PARA 0 "> " 0 "" {MPLTEXT 
1 0 22 "if OUP <> default then" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 12 "f
close(OUP):" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 50 "printf(`Output file \+
%s created sucessfully`,NAME);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "fi
;" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 3 "fi;" }}{PARA 0 "> " 0 "" 
{MPLTEXT 1 0 10 "RETURN(0);" }}{PARA 0 "> " 0 "" {MPLTEXT 1 0 4 "end;
" }}{PARA 12 "" 1 "" {XPPMATH 20 "6#>%'alg093G:6\"6:%'MULTIPG%&SOLVEG%
#OKG%#AAG%%NAMEG%$INPG%\"NG%\"IG%\"JG%\"AG%\"XG%$TOLG%#NNG%%FLAGG%$OUP
G%\"QG%\"SG%\"KG%#LPG%%AMAXG%\"BG%$YMUG%$ERRG%\"TGF&F&C2>8$:6'F.F*%%NR
OWGF7F16-F/%\"MG%%IMAXGF0%#IPG%#L1G%#L2G%#JJG%#I1G%#J1GF9F&F&C(?(FB\"
\"\"FQ9$%%trueG>&9&6#,&FBFQ!\"\"FQFB>9%%%TRUEG>FBFQ>8%,&FRFQFYFQ?(F&FQ
FQF&31FBFin/FenFfnC'>8&FB>8',&FBFQFQFQ?(8(FcoFQFRFSC%>8)&FV6#,&FaoFQFY
FQ>8*&FV6#,&FfoFQFYFQ@$2-%$absG6#&9(6$,&FioFQFYFQFX-Fep6#&Fhp6$,&F^pFQ
FYFQFX>FaoFfo@%1-Fep6#&Fhp6$,&FjoFQFYFQFX\"\"!C$>Fen%&FALSEG-%'printfG
6$%S'A~-~Q~*~I~is~singular,~Q~=~%.8e~is~an~eigenvalue|+G9'C'>8+FU>FUFj
o>FjoFcr>8,FU?(FcrFcoFQFRFSC%>8-&FV6#,&FcrFQFYFQ>&Fhp6$,&F[sFQFYFQFX*&
F`sFQ&Fhp6$,&FgrFQFYFQFXFY?(8.FcoFQFRFS>&Fhp6$Fbs,&FhsFQFYFQ,&FjsFQ*&F
`sFQ&Fhp6$FfsF\\tFQFY>FBFdo@$1-Fep6#&Fhp6$,&&FV6#FjnFQFYFQFjnFhqC$>Fen
F[r-F]r6$%RA~-~Q~*~I~is~singular,~Q~=~%.8e~is~an~eigenvalue|+GF`rF&F&>
Fin:6'F.F<F1%\"YGFE6-FGF/F0FMFLFN%#N1G%\"LGF9%#N2G%#KKGF&F&C(>FBFjn?(F
inFQFQFBFSC%>Fao,&FinFQFQFQ>Fco&Fhp6#,&FinFQFYFQ?(FfoFaoFQFRFSC$>Fio&F
hpF`p>&Fen6#Fjp,&FhvFQ*&&FV6$FjpFbvFQ&Fen6#,&FcoFQFYFQFQFY>F^p&FhpFjt>
&F`rFjt*&&Fen6#F_qFQ&FV6$F_qFjnFY>FcrFjn?(FgrFQFQFcrFSC(>Fao,(FcrFQFgr
FYFQFQ>Ffo,&FaoFQFQFQ>F[s&FhpF[p>&F`rF[p&Fen6#Fbs?(FhsFfoFQFRFS>Fdx,&F
dxFQ*&&FVF[tFQ&F`r6#F\\tFQFY>Fdx*&FdxFQ&FV6$FbsF\\pFYF&F&-F]r6#%CThis~
is~the~Inverse~Power~Method.|+G>FaoF[r-F]r6#%XThe~array~will~be~input~
from~a~text~file~in~the~order:|+G-F]r6#%enA(1,1),~A(1,2),~...,~A(1,n),
~A(2,1),~A(2,2),~...,~A(2,n),|+G-F]r6#%C...,~A(n,1),~A(n,2),~...,~A(n,
n)|+|+G-F]r6#%gnPlace~as~many~entries~as~desired~on~each~line,~but~sep
arate~G-F]r6#%.entries~with|+G-F]r6#%5at~least~one~blank.|+G-F]r6#%enT
he~initial~approximation~should~follow~in~same~format.|+|+|+G-F]r6#%RH
as~the~input~file~been~created?~-~enter~Y~or~N.|+G>Fco&-%&scanfG6#%#%c
G6#FQ@%5/FcoFcu/Fco%\"yGC(-F]r6#%SInput~the~file~name~in~the~form~-~dr
ive:\\name.ext|+G-F]r6#%<for~example:~~~A:\\DATA.DTA|+G>Ffo&-Fa[l6#%#%
sGFd[l>Fio-%&fopenG6%Ffo%%READG%%TEXTG>FaoF[r?(F&FQFQF&/FaoF[rC%-F]r6#
%8Input~the~dimension~n.|+G>F^p&-Fa[l6#%#%dGFd[l@%2FhqF^pC(?(FcrFQFQF^
pFS?(FgrFQFQF^pFS>&F[s6$F^sFfs&-%'fscanfG6$Fio%#%fGFd[l?(FcrFQFQF^pFS>
&FhsF]sF`^l-%'fcloseG6#Fio?(F&FQFQF&F^]lC%-F]r6#%6Input~the~tolerance.
|+G>8/&-Fa[l6#Fd^lFd[l@%2FhqFa_l>FaoFfn-F]r6#%DTolerance~must~be~posit
ive~number.|+G>FaoF[r?(F&FQFQF&F^]lC&-F]r6#%DInput~maximum~number~of~i
terations~G-F]r6#%,-~integer.|+G>80Fd]l@%2FhqFe`l>FaoFfn-F]r6#%BNumber
~must~be~positive~integer.|+G-F]r6#%KThe~dimension~must~be~a~positive~
integer.|+G-F]r6#%XThe~program~will~end~so~the~input~file~can~be~creat
ed.|+G@$/FaoFfnC7-F]r6#%:Choice~of~output~method:|+G-F]r6#%51.~Output~
to~screen|+G-F]r6#%82.~Output~to~text~file|+G-F]r6#%6Please~enter~1~or
~2.|+G>81Fd]l@%/Fbbl\"\"#C&F[\\l-F]r6#%=for~example~~~A:\\OUTPUT.DTA|+
G>FfoFb\\l>82-Fh\\l6%Ffo%&WRITEGF[]l>F\\cl%(defaultG-%(fprintfG6$F\\cl
%7INVERSE~POWER~METHOD|+|+G>83Fhq>84Fhq?(FcrFQFQF^pFSC$>Ficl,&FiclFQ*$
Fg^lFeblFQ?(FgrFQFQF^pFS>Fgcl,&FgclFQ*(F^^lFQFg^lFQ&Fhs6#FfsFQFQ>Fgcl*
&FgclFQFiclFY-F]r6$%+Q~is~%.8e|+GFgcl-F]r6#%<Input~new~Q?~Enter~Y~or~N
.|+G>Fco&-Fa[l6#%$|+%cGFd[l@$Ff[lC$-F]r6#%-input~new~Q|+G>FgclFb_l-Fcc
l6$F\\cl%DIteration~~Eigenvalue~~Eigenvector|+G>85FQ?(FcrFQFQF^pFS>&F[
s6$F^sF^s,&F_flFQFgclFY-FB6'F^pFaoFEFgclF[s@$FcalC(>86FQ?(FcrFeblFQF^p
FS@$2-Fep6#&Fhs6#,&FgflFQFYFQ-Fep6#Fg^l>FgflFcr>87F]gl?(FcrFQFQF^pFS>F
g^l*&Fg^lFQFdglFY?(F&FQFQF&31F\\flFe`lFcalC/?(FcrFQFQF^pFS>&88F]sFg^l-
Fin6'F^pF_hlF[sFcuFE>89&FcuF^gl>FgflFQ?(FcrFeblFQF^pFS@$2-Fep6#Fdhl-Fe
p6#&FcuF]s>FgflFcr>FdglFdhl>8:Fhq?(FcrFQFQF^pFSC%>8;*&F]ilFQFdglFY@$2F
ail-Fep6#,&Fg^lFQFeilFY>FailFiil>Fg^lFeil>Fchl,&*$FchlFYFQFgclFQ-Fccl6
&F\\cl%,%3d~%12.8f|+GF\\flFchl?(FcrFQFQF^pFS-Fccl6%F\\cl%(~%11.8fGFg^l
-Fccl6$F\\cl%\"|+G@%2FailFa_lC)>FaoF[r-Fccl6%F\\cl%5Eigenvalue~:=~%12.
8fGFchl-Fccl6%F\\cl%8~to~tolerance~:=~%.10e|+GFa_l-Fccl6%F\\cl%Bobtain
ed~on~iteration~number~%d|+|+GF\\fl-Fccl6$F\\cl%7Unit~eigenvector~is~:
|+G?(FcrFQFQF^pFSFejlFhjl>F\\fl,&F\\flFQFQFQ@$2Fe`lF\\fl-Fccl6%F\\cl%A
No~convergence~in~%d~iterations|+GFe`l@$0F\\clFaclC$-Fi^l6#F\\cl-F]r6$
%COutput~file~%s~created~sucessfullyGFfo-%'RETURNG6#FhqF&F&" }}}
{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 9 "alg093();" }}{PARA 6 "" 1 "" 
{TEXT -1 380 "This is the Inverse Power Method.\nThe array will be inp
ut from a text file in the order:\nA(1,1), A(1,2), ..., A(1,n), A(2,1)
, A(2,2), ..., A(2,n),\n..., A(n,1), A(n,2), ..., A(n,n)\n\nPlace as m
any entries as desired on each line, but separate entries with\nat lea
st one blank.\nThe initial approximation should follow in same format.
\n\n\nHas the input file been created? - enter Y or N." }}}{EXCHG 
{PARA 0 "> " 0 "" {MPLTEXT 1 0 1 "y" }}{PARA 6 "" 1 "" {TEXT -1 76 "In
put the file name in the form - drive:\\name.ext\nfor example:   A:\\D
ATA.DTA" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 18 "c:\\data\\alg093
.dta" }}{PARA 6 "" 1 "" {TEXT -1 22 "Input the dimension n." }}}
{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 1 "3" }}{PARA 6 "" 1 "" {TEXT 
-1 20 "Input the tolerance." }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 
6 ".00001" }}{PARA 6 "" 1 "" {TEXT -1 45 "Input maximum number of iter
ations - integer." }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 2 "30" }}
{PARA 6 "" 1 "" {TEXT -1 88 "Choice of output method:\n1. Output to sc
reen\n2. Output to text file\nPlease enter 1 or 2." }}}{EXCHG {PARA 0 
"> " 0 "" {MPLTEXT 1 0 1 "1" }}{PARA 6 "" 1 "" {TEXT -1 68 "INVERSE PO
WER METHOD\n\nQ is 6.33333333e+00\nInput new Q? Enter Y or N." }}}
{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 1 "n" }}{PARA 6 "" 1 "" {TEXT 
-1 502 "Iteration  Eigenvalue  Eigenvector\n  1   6.18181817\n  1.0000
0000   .72727272 -.19580419\n  2   6.01724137\n  1.00000000   .7155172
4 -.24505203\n  3   6.00171525\n  1.00000000   .71440823 -.24952238\n \+
 4   6.00017143\n  1.00000000   .71429795 -.24995338\n  5   6.00001713
\n  1.00000000   .71428693 -.24999542\n  6   6.00000170\n  1.00000000 \+
  .71428583 -.24999954\nEigenvalue :=   6.00000170 to tolerance := 1.0
000000000e-05\nobtained on iteration number 6\n\nUnit eigenvector is :
\n  1.00000000   .71428583 -.24999954" }}{PARA 11 "" 1 "" {XPPMATH 20 
"6#\"\"!" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 0 "" }}}}{MARK "1 2
37 0" 0 }{VIEWOPTS 1 1 0 1 1 1803 }
