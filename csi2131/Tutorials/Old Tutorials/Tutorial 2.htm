<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>CSI 2131 Tutorial #2</TITLE>
<META content="text/html; charset=windows-1252" http-equiv=Content-Type>
<META content="MSHTML 5.00.2314.1000" name=GENERATOR></HEAD>
<BODY bgColor=white>
<TABLE bgColor=gray border=0 cellPadding=5 width="100%">
  <TBODY>
  <TR>
    <TD align=right><A href="file:///D:/Courses/Csi2131/2131/index.html"><IMG 
      align=left alt="CSI 2131 Home" border=0 
      src="Tutorial 2_files/2131.gif"></A><FONT color=white size=+3>CSI 2131 
      Tutorial #2</FONT></TD></TR></TBODY></TABLE>
<P>Here are two C programs to show you how you can work with fixed width fileds 
and records, variable width fields and records and index files. It also shows 
how to access data in both text format and binary format. 
<P>
<HR>

<P><B><I>Program 1: fix2var.c</I></B>
<P>This program reads in a binary file of fixed width records and fields. The 
file it reads is the erupdos.bin file. The erupdos.bin file contains four 
fields: 
<OL>
  <LI>the name of a volcano (exactly 16 bytes; there must be at least one space 
  at the end of the name) 
  <LI>the name of the country where the volcano is located (exactly 14 bytes; 
  there must be at least one space at the end of the name) 
  <LI>a binary integer containing the elevation of the volcano 
  <LI>a binary integer containing the date of an eruption </LI></OL>
<P>The program reads in the fixed width binary file and writes out a text file 
with variable width records and fields. Fields in the new file are delimited by 
commas (',') and records are delimited by semi-colons (';').
<P>
<HR>
<PRE>#include &lt;stdio.h&gt;

main(int argc, char *argv[])
{
 FILE *inputfile, *outputfile;
 char volcano[16], country[14];
 int elevation, date;

 if(argc == 3)                        <FONT color=#008000>/* two file names on the command line  */</FONT>
    {
     inputfile = fopen(argv[1], "rb");
     if(inputfile == 0)
        {
         printf("Unable to open file %s for reading.\n\n", argv[1]);
         exit(1);
        }

     outputfile = fopen(argv[2], "w");
     if(outputfile == 0)
        {
         printf("Unable to open file %s for writing.\n\n", argv[2]);
         fclose(inputfile);
         exit(1);
        }
    }
 else
    {
     printf("Usage: fix2var &lt;fixbininfile&gt; &lt;vartxtoutfile&gt;\n\n");
     exit(1);
    }
                                      <FONT color=#008000>/* read in one item of 16 bytes        */</FONT>
 while(fread(volcano, 16, 1, inputfile) == 1)
    {
     int i;
                                      <FONT color=#008000>/* next read the rest of the fields    */</FONT>
     fread(country, 14, 1, inputfile);
     fread(&amp;elevation, <FONT color=#ff0000>sizeof(int)</FONT>, 1, inputfile);
     fread(&amp;date, <FONT color=#ff0000>sizeof(int)</FONT>, 1, inputfile);
                                      <FONT color=#008000>/* note: the number of bytes used for  */</FONT>
                                      <FONT color=#008000>/* an int type may vary from system to */</FONT>
                                      <FONT color=#008000>/* system; safer to use sizeof(int)    */</FONT>
 
                                      <FONT color=#008000>/* a for loop with no body!            */</FONT>
                                      <FONT color=#008000>/* start at end of the volcano name    */</FONT>
                                      <FONT color=#008000>/* and move backwards through all the  */</FONT>
                                      <FONT color=#008000>/* spaces at the end of the name       */</FONT>
     for(i = 15; volcano[i] == ' '; i--);

     volcano[i + 1] = 0;              <FONT color=#008000>/* to be a string in C, there must be  */</FONT>
                                      <FONT color=#008000>/* 0 (null) at the end of the array    */</FONT>

     for(i = 13; country[i] == ' '; i--);

     country[i + 1] = 0;

                                      <FONT color=#008000>/* print commas between fields and a   */</FONT>
                                      <FONT color=#008000>/* semi-colon at the end of record     */</FONT>
     fprintf(outputfile, "%s,%s,%d,%d;", volcano, country, elevation, date);
    }

 fclose(inputfile);
 fclose(outputfile);

}
</PRE>
<HR>

<CENTER><IMG border=0 src="Tutorial 2_files/fix2var.gif"></CENTER>
<P>
<TABLE bgColor=gray border=0 cellPadding=0 width="100%">
  <TBODY>
  <TR>
    <TD align=middle><FONT size=-5>&nbsp;</FONT></TD></TR></TBODY></TABLE>
<P><B><I>Program 2: var2indx.c</I></B>
<P>This program reads in the file generated by the fix2var program and writes 
out a binary index file on the volcano name key. The index file itself has two 
fields: 
<OL>
  <LI>the name of a volcano (exactly 16 bytes; there must be at least one space 
  at the end of the name) 
  <LI>a binary integer containing the byte offset of the volcano's record in the 
  erupdos.var file </LI></OL>
<P>
<HR>
<PRE>#include &lt;stdio.h&gt;

main(int argc, char *argv[])
{
 FILE *inputfile, *indexfile;
 char volcano[16];
 int recordposition;
 int currentchar;

 if(argc == 3)                        <FONT color=#008000>/* two file names on the command line  */</FONT>
    {
     inputfile = fopen(argv[1], "r");
     if(inputfile == 0)
        {
         printf("Unable to open file %s for reading.\n\n", argv[1]);
         exit(1);
        }

     indexfile = fopen(argv[2], "wb");
     if(indexfile == 0)
        {
         printf("Unable to open file %s for writing.\n\n", argv[2]);
         fclose(inputfile);
         exit(1);
        }
    }
 else
    {
     printf("Usage: fix2var &lt;vartxtinfile&gt; &lt;binindoutfile&gt;\n\n");
     exit(1);
    }

 currentchar = getc(inputfile);       <FONT color=#008000>/* read the input file byte-by-byte    */</FONT>
 while(currentchar != EOF)
    {
     int i;
                                      <FONT color=#008000>/* we're at the beginning of a record  */</FONT>
                                      <FONT color=#008000>/* so get the current position in the  */</FONT>
                                      <FONT color=#008000>/* file using ftell                    */</FONT>
     recordposition = <FONT color=#ff0000>ftell(inputfile)</FONT> - 1;
                                      <FONT color=#008000>/* we've already read the first byte   */</FONT>
                                      <FONT color=#008000>/* of the record so subtract 1         */</FONT>

     for(i = 0; currentchar != ','; i++)
        {                             <FONT color=#008000>/* read until ',' (end of field)       */</FONT>
         volcano[i] = currentchar;    <FONT color=#008000>/* storing bytes in volcano name array */</FONT>
         currentchar = getc(inputfile);
        }

     while(i &lt; 16)                    <FONT color=#008000>/* if we hit ',' before we filled up   */</FONT>
        {                             <FONT color=#008000>/* the volcano name array, pad the     */</FONT>
         volcano[i] = ' ';            <FONT color=#008000>/* rest of the name with spaces        */</FONT>
         i++;
        }

                                      <FONT color=#008000>/* write out the volcano name and the  */</FONT>
                                      <FONT color=#008000>/* position of its record              */</FONT>
     fwrite(volcano, 16, 1, indexfile);
     fwrite(&amp;recordposition, sizeof(int), 1, indexfile);

     while(currentchar != ';')        <FONT color=#008000>/* skip to the end of the record       */</FONT>
        currentchar = getc(inputfile);

     currentchar = getc(inputfile);   <FONT color=#008000>/* start of next record (or EOF)       */</FONT>
    }

 fclose(inputfile);
 fclose(indexfile);
        
}
</PRE>
<HR>

<CENTER><IMG border=0 src="Tutorial 2_files/var2indx.gif"></CENTER>
<P>
<TABLE bgColor=gray border=0 cellPadding=0 width="100%">
  <TBODY>
  <TR>
    <TD align=middle><FONT size=-5>&nbsp;</FONT></TD></TR></TBODY></TABLE><FONT 
size=-2><I>(last update January 23, 1999)</I></FONT> </P></BODY></HTML>
