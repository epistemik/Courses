// File: function.h// NAME: Mark Sattolo// STUDENT #: 428500// SECTION: CSI 2172A// MARKING SECTION: A4#if !defined(_FUNCTION_H_)#define _FUNCTION_H_#include "expression.h"// class sine implements the trigonometric sine function: sin(arg)class sine: public expression {	private:	    expression* arg ;  // argument	public:	sine(expression*) ;	// NO DEFAULT CONSTRUCTOR: sine has to have a parameter	sine(const sine&) ; 	// COPY CONSTRUCTOR	~sine() ; 			// DESTRUCTOR	sine& operator=(const sine&) ;	// OVERLOADED METHODS	double evaluate(context& C) const ;	expression* clone() const ;	void print(ostream& os) const ;};expression* instantiate_sine(expression**, int) ;/**************************************************************************/// class cosine implements the trigonometric cosine function: cos(arg)class cosine: public expression{	private:	   expression* arg ;  // argument	public:	cosine(expression*) ;	// NO DEFAULT CONSTRUCTOR: cosine has to have a parameter	cosine(const cosine&) ; 	// COPY CONSTRUCTOR	~cosine() ; 			// DESTRUCTOR	cosine& operator=(const cosine&) ;	// OVERLOADED METHODS	double evaluate(context& C) const ;	expression* clone() const ;	void print(ostream& os) const ;};expression* instantiate_cosine(expression**, int) ;/**************************************************************************/// class tangent implements the trigonometric tangent function: tan(arg)class tangent: public expression{	private:	   expression* arg ;  // argument	public:	tangent(expression*) ;	// NO DEFAULT CONSTRUCTOR: tangent has to have a parameter	tangent(const tangent&) ; 	// COPY CONSTRUCTOR	~tangent() ; 			// DESTRUCTOR	tangent& operator=(const tangent&) ;	// OVERLOADED METHODS	double evaluate(context& C) const ;	expression* clone() const ;	void print(ostream& os) const ;};expression* instantiate_tangent(expression**, int) ;/**************************************************************************/// class num_e provides the value of the number 'e'class num_e: public expression{	public:	 num_e(expression*);  //CONSTRUCTOR 	// OVERLOADED METHODS	double evaluate(context& C) const ;	expression* clone() const ;	void print(ostream& os) const ;};expression* instantiate_num_e(expression**, int) ;/**************************************************************************/// class natlog implements the natural logarithm functionclass natlog: public expression{	private:	   expression* arg1 ;  // argument one	   expression* arg2 ;  // argument two	public:	natlog(expression*, expression*) ;	// NO Default Constructor: natlog has to have two parameters	natlog(const natlog&) ; 	// COPY CONSTRUCTOR	~natlog() ; 			// DESTRUCTOR	natlog& operator=(const natlog&) ;	// OVERLOADED METHODS	double evaluate(context& C) const ;	expression* clone() const ;	void print(ostream& os) const ;};expression* instantiate_natlog(expression**, int) ;/**************************************************************************/#endif