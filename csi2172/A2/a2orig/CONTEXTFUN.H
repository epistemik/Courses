// File: contextfun.h// NAME: Mark Sattolo// STUDENT #: 428500// SECTION: CSI 2172A// MARKING SECTION: A4#if !defined(_CONTEXTFUN_H_)#define _CONTEXTFUN_H_#include "expression.h"#include <iostream.h>#include <string.h>//  DECLAREclass declare : public expression	{   private:      expression** names;   // variables      int    		 size;    // size of list   public:      declare();		// Default Constructor      declare(expression**, int);   // 2nd Constructor      declare(const declare&); 				// COPY CONSTRUCTOR      ~declare(); 					   		// DESTRUCTOR      declare& operator=(const declare&); // ASSIGNMENT OPERATOR      // OVERLOADED METHODS      double evaluate(context& C) const;      expression* clone() const;      void print(ostream& os) const;	};expression* instantiate_declare(expression**, int);//  ASSIGNMENTclass assignment : public expression	{   private:      expression* lhs ;   // left hand side of assignment      expression* rhs ;   // right hand side of assignment   public:   	// No default constructor: 'assign' needs a lhs and rhs      assignment(expression*, expression*) ; 	  // CONSTRUCTOR      assignment(const assignment&) ; 				  // COPY CONSTRUCTOR      ~assignment() ; 							   	  // DESTRUCTOR      assignment& operator=(const assignment&) ;  // ASSIGNMENT OPERATOR      // OVERLOADED METHODS      double evaluate(context& C) const ;      expression* clone() const ;      void print(ostream& os) const ;	} ;expression* instantiate_assignment(expression*, expression*) ;#endif