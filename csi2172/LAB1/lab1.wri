Laboratory 1: C++ Compilers----------------------------------------------------------------------------In this lab you will learn how to compile C++ programs and projects and howto use the debugger. Failing to do this lab early in the course will stallyou in the course!----------------------------------------------------------------------------   * Download the following files into an empty directory! (Ask the TAs if     you do not know how to do that)        o Example 1                ex1.exe [.exe]                 |                 +- ex1.cpp [.cpp]                (Unix Makfile ex1.make)        o Example 2                ex2.exe [.exe]                 |                 +- ex2f1.cpp [.cpp]                 |                 +- ex2f2.cpp [.cpp]                 |                 +- ex2.h [.h]                (Unix Makfile ex2.make)        o Example 3                ex3.exe [.exe]                 |                 +- ex3f1.cpp [.cpp]                 |                 +- ex3f2.cpp [.cpp]                 |                 +- ex2f1.cpp [.cpp]                 |                 +- ex3.h     [.h]                 |                 +- ex2.h     [.h]                (Unix Makfile ex3.make)   * Compile the three programs and run them        o Open up the Borland 5.0 IDE        o Select [File] [new] [project]        o Change the Target Model to Console        o Edit the project name (something more inventive than proj0000.ide)        o Change the intermediate, final, source and include directories to          the one that you are using. [Options][Project]. Note that you will          need the include path to the standard include directory. The          directory paths can be separated by ; (semicolons). For example                 Include: g:\windows\bc5\include;c:\work\lab1                 ...                 Source: c:\work\lab1                 Intermediate: c:\work\lab1                 Final: c:\work\lab1        o In the project sub-window, recreate the hierarchy I drew above for          the particular example. (Delete the .rc and .def files) (TAs          explain how to add and delete nodes, and why it is important to          get the hierarchy right (make) and the difference between Make all          and Build all)        o Select [Project] [Make All] (TAs explain what the compiler          messages are, the difference between compile and make,          dependencies)        o Select [Debug] [Run]   * Run the last program in the debugger        o Add a breakpoint to main. Open the file ex3f2.cpp, and place your          cursor on the line int main (). Select [Debug][Add Breakpoint ...]          and confirm that you want to stop at main in line 3. Now the line          should be highlighted in red.        o Use the Step into and Step over buttons from the icon bar to          navigate the program. Ask the TA, if you need help.   * Compile and run the programs under UNIX (optional!)        o Download the files into an empty directory, together with the          makefiles        o Type:                $make -f ex1.make                $make -f ex2.make                $make -f ex3.make          ($ represents the prompt)        o To run the programs, just type                $ex1                $ex2                $ex3        o The UNIX debugger is called gdb. To run a program in the debugger,          all source files have to be separatelly compiled with the debugger          flag ( -g). First, invoke the debugger with the last example, and          set a breakpoint in the main function. The step command can be          used to step into a function and execute line by line. The next          command can be used to step line by line without stepping into          functions. The cont command resumes execution until the next break          point or program termination.                $gdb ex3                (gdb) break main                Breakpoint 1 at ????                (gdb) run                Starting program: ex3                Breakpoint 1 at, ??? in main()                (gdb) step                game::game (this=0x????) at ex3f1.cpp:5                5       game::game():d1(12),score1(0),score2(0) {                Current language:  auto; currently c++                (gdb) next                6   }                (gdb) cont                ...                Program exited normally.                (gdb) quit