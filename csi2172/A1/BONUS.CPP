// FILE:  bonus.cpp// NAME:  Mark Sattolo// STUDENT #:  428500// COURSE:  CSI 2172A// MARKING SECTION:  A4/*ASSIGNMENT #1Bonus  [ 20 marks ]#include <iostream.h>#include <math.h>	// to use function abs()#include "bonus.h"/* [ 10 marks ]          Implement the following three functions:		*/// [ 4 marks ]int ** allocate(int n)	{	if ( n == 0 ) return NULL ;	else		{		int** M = new int* [2*n-1] ; 		// create an array for the rows		for ( int i = 0 ; i < n ; i++ ) 			// for each top row			{			M[i] = new int[n-i] ; 		// create the desired # of columns			for ( int k = 0 ; k < n - i ; k++ )				M[i][k] = 10*(n-i) + k + 1 ; 	// assign the required value to each matrix element			}		for ( int j = n ; j < 2*n - 1 ; j++) 	// for the bottom rows			M[j] = M[2*n-j-2] ; 			// assign the location of the appropriate top row		return M ; 			// return the pointer to the new matrix		}	}	/* Allocates the 2n-1 x n structure discussed above.  If n == 0 then the address 0x0000 	(NULL) is returned.  This function also initializes the elements of the structure, as shown 	on the figure.  The elements of the first row are 10n + 1, 10n + 2 .... 10n + n.  The elements 	of the second row are 10(n-1) + 1 ... 10(n-1) + n-1 and in general if k <= n then the elements 	of the kth row are 10(n-k+1) + 1 ... 10(n-k+1) + (n-k+1).  As the rows below the nth row are 	physically the same as some row above, they are automatically initialized. */// [ 3 marks ]void print(ostream& os, int** M, int n) 	{ 	for ( int i = 0 ; i < 2*n-1 ; i++ ) 	// for each row		{		for ( int j = 0 ; j < abs(n-1-i) + 1 ; j++ ) 	// for the appropriate # of columns 			os << M[i][j] << " " ; 			// output the value		os << endl ;		}	}      /* prints the 2n-1 x n structure M on the output stream os.  For the structure depicted       above the output would be:        41 42 43 44        31 32 33        21 22        11        21 22        31 32 33        41 42 43 44	*/// [ 3 marks ]void deallocate(int**& M, int n) 	{ 	for ( int k = 0 ; k < n ; k++ ) // for each top row (bottom rows share the same physical memory) 		delete [] M[k] ; 			// delete all columns  	delete [] M ; 			// delete the rows 	M = NULL ; 	}      /* deallocates all dynamic memory associated with the 2n-1 x n structure M and sets M       to hold the address 0x0000.The prototypes of the three functions must be in the header file bonus.h. The implementation of these functions must be in the file called bonus.cpp. The file which tests these functions must be called bonusmain.cpp. Feel free to use mine, because that is what the marker will use.*/