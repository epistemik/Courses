ASSIGNMENT #1, MARKING SCHEMEGeneral Deductions   * Deduct 5 marks if any of the following is missing from the envelope     submitted:        o assignment number        o name        o student number        o course code        o marking section   * Deduct 5 marks each if the files submitted for this assignment are not     called        o me.h, me.cpp        o ass1.h, ass1.cpp, test.cpp     If the bonus question is submitted but it is not in the files bonus.h,     bonus.cpp and bonusmain.cpp then do not mark the bonus question.   * Deduct 5 marks if the files me.cpp, ass1.cpp and test.cpp do not have     the        o file name        o student name        o student number        o course code        o marking section     enclosed in comments as the first few lines of the files. If bonus.cpp     does not have these, do not mark the bonus question.   * If the printout is not identical to the file on the diskette give 0 for     the question   * You can only give at most 25% for a question if the code does not     compile! If there is a syntax error, the chances are the logic is     incorrect as well so apply the deductions specified below. If you end     up with a negative mark, give 0.   * Deduct 5 - 25 marks for messy or unreadable code, at your discretion     but be very consistent. -25 should really mean unreadable and -5 should     be at least annoying.   * If you suspect that someone cheated, mark the submission and give the     assignment to me. depending on how serious it is, they get a 0 or worse     they face academic sanctions.----------------------------------------------------------------------------Marking Part A, Part B, Part C, and Part DSteps to follow:   * create a new directory which you will be using for marking   * launch Borland 5 and set it up with this as the working, output and     include directory   * download the following files        o me.h        o ass1.h        o main.obj        o bonus.h        o bonusmain.cpp        o m1.txt        o m2.txt   * create three projects in the Borland IDE:        o ass1.ide              ass1.exe [ .exe ]               |               +-- me.h  [ .h ]               |               +-- me.cpp [ .cpp ]               |               +-- main.obj [ .obj ]               |               +-- ass1.h  [ .h ]               |               +-- ass1.cpp  [ .cpp ]        o ass1b.ide              ass1.exe [ .exe ]               |               +-- me.h  [ .h ]               |               +-- me.cpp  [ .cpp ]               |               +-- test.cpp  [ .cpp ]               |               +-- ass1.h  [ .h ]               |               +-- ass1.cpp  [ .cpp ]        o bonus.ide              bonus.exe [ .exe ]               |               +-- bonus.h  [ .h ]               |               +-- bonusmain.cpp  [ .cpp ]               |               +-- bonus.cpp  [ .cpp ]   * to mark a submission, first insert the diskette submitted and execute     the following batch file. this will clear up old files and copy the     ones you need. just type mark1 at the prompt. do not worry if if     complains that some of the files do not exist   * Compile and execute ass1 by selecting build all for ass1.ide. Type ass1     m1.txt, what you should see on the console is m1.out. Type ass1 m2.txt,     what you should see on the console is m2.out.        o If this test is passed, quickly scan and check that the printout          corresponds to the file(s). Quickly check to make sure that the          student is indeed identified in the file and make sure if that          there is no memory leak *. Visually scan through the printout of          test.cpp and if part D looks ok then give the maximum.        o If the test is not passed or you are suspicious about the          student's test program run ass1b and identify which function(s)          are incorrect and follow the marking scheme belowPART A [ 10 marks ]possible marks: 10, 5, 4-0 Deduct 5 marks if the output is specifically tothe console (ie cout) rather than to the output stream passed (ie os) Deductthe minimum of 6 and the maximum of 10 if the function does not do what itis supposed to.PART B [ 50 marks ]   * min     possible marks: 5, 2, 1, 0        o deduct 3 if an exception is not thrown        o deduct at least 3 if the function is logically incorrect   * max     possible marks: 5, 2, 1, 0        o deduct 3 if an exception is not thrown        o deduct 4 if the function is not recursive        o deduct at least 3 if the function is logically incorrect   * vector_alloc     possible marks: 5, 2, 1, 0        o deduct at least 3 if the function is logically incorrect   * vector_dealloc     possible marks: 5, 3, 2, 1, 0        o deduct at least 3 if the function is logically incorrect        o deduct 2 if v is not set to 0        o deduct 3 if the answer to the question ``why is v passed by          reference?'' is missing or it is wrong   * matrix_alloc     possible marks: 5, 2, 1, 0        o deduct at least 3 if the function is logically incorrect        o deduct 3 if vector_alloc is not used   * matrix_dealloc     possible marks: 5, 3, 2, 1, 0        o deduct at least 3 if the function is logically incorrect        o deduct 2 if v is not set to 0        o deduct 3 if the answer to the question ``why don't we need the          number of columns?'' is missing or it is wrong   * vector_copy     possible marks: 5, 2, 1, 0        o deduct at least 3 if the function is logically incorrect        o deduct 4 if the address returned is v        o deduct 3 if vector_alloc is not used   * matrix_copy     possible marks: 5, 2, 1, 0        o deduct at least 3 if the function is logically incorrect        o deduct 4 if the address returned is M   * vector_print     possible marks: 5, 2, 1, 0        o deduct at least 3 if the function is logically incorrect        o deduct 3 if it is written to the console (ie cout) rather than to          the output stream (ie os)   * matrix_print     possible marks: 5, 2, 1, 0        o deduct at least 3 if the function is logically incorrect        o deduct 3 if it is written to the console (ie cout) rather than to          the output stream (ie os)        o deduct 3 vector_print is not usedPART C [ 20 marks ]   * quick_sort     possible marks: 8, 4, 3, 2, 1, 0        o deduct at least 4 if the function is logically incorrect        o deduct 4 if it sorts well but it is not the quick_sort algorithm!   * apply     possible marks: 6, 3, 2, 1, 0        o deduct at least 3 if the function is logically incorrect        o deduct 4 if the function returns a row of the matrix        o deduct 4 if M is modified other than possibly by f   * matrix_max     possible marks: 4, 2, 1, 0        o deduct at least 2 if the function is logically incorrect        o deduct 3 if apply and max are not used        o deduct 3 if the function returns a row of the matrix        o deduct 3 if the array returned by apply is not deallocated!   * matrix_sort     possible marks: 2, 0        o Give 0 if there is anything wrong with this functionPART D [ 20 marks ]possible marks: 20, 15, 13-0   * deduct 7 if me is not called in main   * deduct 5 for each function not tested (do not deduct if the function is     implicitly tested, ie it is used to implement another one! if count     falls below 0, give 0!   * deduct 5 (but the maximum of 10) if a matrix or vector is allocated but     is not deallocated.----------------------------------------------------------------------------BONUSBuild and run bonus. If output is like bonus.txt then check if diagram is OKand give the maximum, otherwise...Diagram of Memory layoutpossible marks: 10, 5, 0deduct 5 if pointers are not 4 bytes and integers are not two bytesgive 0 if incorrect(if the diagram is incorrect, the chances are the implementation will notwork either!)allocatepossible marks: 4, 0give 0 if incorrectprintpossible marks: 3, 0give 0 if incorrectdeallocatepossible marks: 3, 0give 0 if incorrect