<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0084)http://www.site.uottawa.ca/ftppub/courses/Fall/csi2172A/labs/lab9/project/descr.html -->
<DOCTYPE ?html.dtd? SYSTEM HTML><HTML><HEAD><TITLE>PROJECT DESCRIPTION</TITLE>
<META content="text/html; charset=windows-1252" http-equiv=Content-Type>
<META content="MSHTML 5.00.3018.900" name=GENERATOR></HEAD>
<BODY aLink=green bgColor=#fffffd link=blue text=navy vLink=red>
<H1>DESCRIPTION</H1>
<H2>PURPOSE</H2>The aim of this project is to teach you polymorphism and how it 
simplifies program logic. While encapsulation and inheritance are important new 
concepts, it is polymorphism used together with inheritance that makes the 
Object Oriented paradigm superior to other paradigms in many problem domains. 
You will have a chance to see how classes <I>plug in</I> to a design and how a 
bit more complex model can be easily mapped into an implementation. The 
algorithms that you have to write are trivial, in fact, those algorithms that 
may pose some challenge (<I>line drawing, filling an area, ... </I>) are 
implemented and documented. <BR><BR>For the first part of both project streams, 
you have to build a hierarchy (<I>expressions and drawables</I>). For the second 
part, you will have to build a parser that instantiates expressions and 
drawables from an imput stream. The Object Oriented paradigm is not particularly 
well fit for parsing, so you will see how to implement an inherently procedural 
(<I>task oriented</I>) model in the object oriented paradigm. <BR><BR>Both 
project streams can use my example codes. For stream A, I have implemented 
addition, subtraction, division and multiplication. Using that you should be 
able to implement the rest of the operators. For stream B, I have implemented 
triangle which you can use as a guide to implement rectangle, ellipse, ... I 
also implemented the parsers for these, so you just have to extend them to 
instantiate instances of the classes you implement. <BR><BR>Once the streams are 
completed, you can easily integrate them. 
<HR>

<H2>WHAT IS IT?</H2>The end product is a scripting language which can be used to 
describe and generate pictures. The pictures below could be generated by a 
completed project B. <BR><BR>
<CENTER>
<TABLE border=0 width="80%">
  <TBODY>
  <TR>
    <TD align=middle width="50%">
      <CENTER><A 
      href="http://www.site.uottawa.ca/ftppub/courses/Fall/csi2172A/labs/lab9/project/alien.pic"><IMG 
      height=150 src="PROJECT DESCRIPTION_files/alien.gif"></A> </CENTER></TD>
    <TD align=middle width="50%">
      <CENTER><A 
      href="http://www.site.uottawa.ca/ftppub/courses/Fall/csi2172A/labs/lab9/project/love.pic"><IMG 
      height=150 src="PROJECT DESCRIPTION_files/love.gif"></A> </CENTER></TD>
  <TR>
    <TD align=middle width="50%">
      <CENTER><A 
      href="http://www.site.uottawa.ca/ftppub/courses/Fall/csi2172A/labs/lab9/project/demo.pic"><IMG 
      height=150 src="PROJECT DESCRIPTION_files/demo.gif"></A> </CENTER></TD>
    <TD align=middle width="50%">
      <CENTER><A 
      href="http://www.site.uottawa.ca/ftppub/courses/Fall/csi2172A/labs/lab9/project/fig.pic"><IMG 
      height=150 src="PROJECT DESCRIPTION_files/fig.gif"></A> 
  </CENTER></TD></TR></TBODY></TABLE></CENTER><BR><BR>
<H3>Download</H3>My model solution (<I>executable</I>), sample figure scripts 
(<I><TT>.pic </TT>files</I>) and a free-ware image viewer 
(<I><TT>i_view32.exe</TT></I>) 
<H4><A 
href="http://www.site.uottawa.ca/ftppub/courses/Fall/csi2172A/labs/lab9/project/csi2172.zip">csi2172.zip</A></H4>First 
try to make the <TT>.ppm</TT> files: <PRE>     C:\work&gt;draw alien.pic alien.ppm
     C:\work&gt;draw love.pic love.ppm
     C:\work&gt;draw demo.pic demo.ppm
     C:\work&gt;draw fig.pic fig.ppm
     C:\work&gt;draw f2.pic f2.ppm

   </PRE>Then start the image viewer, and load the files: <PRE>     C:\work&gt;i_view32
   </PRE><BR><BR>After integration, the lines which contain numeric constants, 
can be replaced with constant expressions (<I>such as</I>: <TT>4*2 - 3</TT> 
instead of <TT>5</TT>). If you do go all the way, you will be able to generate 
pictures like the one below. <BR><BR>It can define new figures in the script, 
has parameter passing, conditionals and recursion. <BR><BR>
<CENTER><A 
href="http://www.site.uottawa.ca/ftppub/courses/Fall/csi2172A/labs/lab9/project/f2.pic"><IMG 
src="PROJECT DESCRIPTION_files/f2.gif"></A> </CENTER>
<HR>

<H2>HOW MUCH WORK IS IT?</H2>I implemented most of it, and gave it away 
<I>free</I>. You only have to extend the code: <I>implement more operators for 
stream A, implement more figures for stream B, and extend the parser to be able 
to instantiate them for both streams</I>. The challenge is probably in dealing 
with a complete application as opposed to isolated algorithms or procedures that 
you are used to. The number of lines to write to achieve a 100% on each stream 
is no more than 200 lines. Before you start writing any code, try to play with 
the programs I gave you and see where and how your code would plug in. If you 
both did a good job, the integration is suppposed to be a piece of cake for 
substantial bonus. <BR><BR>If you go all the way, and implement parameter 
passing, conditionals and recursion, you should expect to do at least twice as 
much work, that you have already done, but you will learn a lot! </BODY></HTML>
