ASSIGNMENT  4Due date:   December 8 by 18:00 in the hand in boxes located on the 3rd floor of McDonald building.Virtual Constructors [ 100 marks ]   It is a well known problem in Object Oriented Programming that constructors cannot be made virtual. Throughout this course we used polymorhism and inheritance to achieve maintainability and ease of integration of new features and extensions.  Unfortunately this does not apply to constructors. Consider the class diagram below:     "shape" is an abstract class. Suppose I would like to read instances of shapes from the console:          shape** array = new shape*[10];      for(int i=0; i<10; ++i) 	{ array[i]->read(cin); }      To be able to invoke the polymorphic method read, array[i] must be allocated!  But how can it be allocated when you cannot possible know which subclass of shape the object to be read from the console belongs to.  In philosophy this situation is referred to as a paradox.  To be able to invoke a constructor to create the instance I have to know its exact type but to be able to call a method I need the instance.    While "operator<<" can be implemented as         ostream& operator <<(ostream& os, const shape& s)	 {  s.print(os);   // print is polymorphic   	    return os;   }   "operator>>" cannot be implemented as      istream& operator >>(istream& is, shape& s) 	{  s.read(is);  	   return is;   }   because you would need an instance s, but you don't know the exact subclass until you   actually executed read.	Because of this paradox, there is no support to implement virtual constructors in C++. However, one can implement something similar which would effectively implement a polymorphic read method. The term virtual constructor refers to a mechanism implemented by the programmer which can create instances of the run-time subclass by invoking a method of the base class. The clone method for your second assignment -- in this sense -- is a virtual constructor.  Virtual constructors which can create instances from streams are much more difficult to implement. In your second assignment, you had a parser, which took instantiator functions and syntax definitions to recognize expressions from a stream.  	For this assignment, I provide you with the implementation of this mechanism. The way it works is that for every subclass of shape, a tiny subclass of shape_instantiator must be implemented which would be used by the shape::read method to instantiate the particular instance. Your task is to:Comment the Code I gave you [ 20 marks ]                  Add comments to "shape.h" and  "shape.cpp" which would explain to the person who reads the code how the actual mechanism is implemented.  Also add comments to "main.cpp"which would explain how this is used.                    Please do not do anything like:		int i; // i is an integer							for(...) // is a for loop                    In-line comments are not supposed to clutter the code with stating the obvious. They are specifically provided so the implementor can quickly re-acquaint himself with the code he wrote years before and to guide those developers who will have to maintain it. In other words, they should be short explanations of non-obvious mechanisms.  If you need help how to do this, you can take a look at the comments in "lexer.h" and "lexer.cpp", or "heap.h" and "heap.cpp".   Provide a short description [ 20 marks ]                 Describe how virtual construction is implemented for shapes.  You are limited to one typed page. You may use one diagram if you feel it would aid your description.  A good description is brief with no code. It is supposed to describe how one would go about implementing virtual construction in any object oriented language using inheritance, polymorphism, class methods and class variables...          Implement the missing subclasses of shape [ 60 marks ]                 -- implement rectangle, square and triangle so they can be read from a stream.             ass4 "circle 2" "square 2" "rectangle 4 5" "triangle  3 4 5"                    should produce:             square 2  has area: 4   triangle 3 4 5  has area: 6   circle 2  has area: 12.5664   rectangle 4 5  has area: 20      ass4.exe [ .exe ]        |        +--  shape.h        |        +--  shape.cpp        |        +-- circle.h        |        +-- circle.cpp>        |        +-- lexer.h        |        +-- lexer.cpp        |        +-- qsort.h        |        +-- main.cpp      C:\work>ass4 "circle 2" "circle 1" "circle 7" "circle 2"      C:\work>type shapes.txtWhat Do I hand in?  The following files on diskette and their printout:     shape.h  // commented     shape.cpp // commented     rectangle.h     rectangle.cpp     triangle.h     triangle.cpp     square.h     square.cpp     main.cpp (modified)  // commented  Good Luck!!!