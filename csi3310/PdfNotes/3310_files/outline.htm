<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=PowerPoint.Slide>
<meta name=Generator content="Microsoft PowerPoint 9">
<link id=Main-File rel=Main-File href="../3310.html">
<link rel=Preview href=preview.wmf>
<meta name=Robots content=NoIndex>
<script src=script.js></script><script><!--

if( !(IsWin("PPTOtl")||IsWin("PPTNav")||IsWin("PPTOtlNav")) )
{
	obj = document.all.item("Main-File")
	parent.location.href=obj.href
}

var gOtlHiliteClr="#FFFFFF",gOtlNormalClr="#000000",gOtlActiveClr="#FFFF00",gSelected="",gTxtState=false,gChildEntryTable=new Array()

function Load()
{
	if( IsWin("PPTOtl" ) ){ LoadOtl(); parent.gOtlLoaded=true; return }
	if( IsWin("PPTNav" ) ){ LoadNav("NavObj",UpdNav); parent.gNavLoaded=true; return }
	if( IsWin("PPTOtlNav" ) ){ LoadNav("OtlNavObj",UpdOtlNav); parent.gOtlNavLoaded=true; return }
}
function Upd(){ if( IsWin("PPTNav") ) LoadNav("NavObj",UpdNav) }
function LoadNav( oId,UpdFunc )
{
	document.ondragstart=CancelDrag
	document.onselectstart=CancelDrag
	document.body.style.margin=2
	UpdFunc()
	obj=document.all.item(oId)
	obj.style.display="block"
	obj.style.visibility="visible"
	document.bgColor="threedface"
}
function LoadOtl()
{
	document.ondragstart=CancelDrag
	document.onselectstart=CancelDrag
	OtlObj.style.display="block"
	OtlObj.style.visibility="visible"
	if( gOtlActiveClr == "" ) gOtlActiveClr=document.linkColor
	if( gOtlHiliteClr == "" ) gOtlHiliteClr=document.fgColor
	if( gOtlNormalClr == "" )
		gOtlNormalClr=document.bgColor
	else
		document.bgColor=gOtlNormalClr  

	InitArray()

	if( ObjExists( parent.gCurSld ) ) {
		ChangeState( parent.gCurSld,gOtlNormalClr,gOtlHiliteClr )
		gSelected=parent.gCurSld
	}
	else gSelected = -1

	UpdOtl()
}
function UpdOtl(){ UpdIdx(parent.gCurSld) }
function UpdIdx( idx )
{
	if( gSelected != idx ) {
		if( gSelected > 0 )
			ChangeState( gSelected,gOtlHiliteClr,gOtlNormalClr )

		if( ObjExists( idx ) ) {
			gSelected = idx
			ChangeState( gSelected,gOtlNormalClr,gOtlHiliteClr )
		}
		else gSelected = -1
	}

	if( gTxtState != parent.gOtlTxtExp ) {
		state = "block"
		if( !parent.gOtlTxtExp )
			state="none"

		for(ii=0; ii<gChildEntryTable.length; ii++) {
			obj=gChildEntryTable[ii];
			if( obj.id == null ) continue;

			if( obj.id.indexOf("PPTC") >= 0 )
				obj.style.display=state;
		} 
		gTxtState=parent.gOtlTxtExp
		if( ObjExists( gSelected ) )
			ChangeState( gSelected,gOtlNormalClr,gOtlHiliteClr )
	}
}
function InitArray()
{
	count=0
	for(ii=0; ii<document.all.tags("DIV").length; ii++) {
		obj=document.all.tags("DIV").item(ii)
		if( obj.id == null ) continue

		if( obj.id.indexOf("PPTC") >= 0 ) {   
			gChildEntryTable[count++]=obj
			obj.children.tags("TABLE").item(0).style.borderColor=gOtlNormalClr
		}
	}
}
function ChangeState( idx,fgColor,bgColor )
{
	obj=document.all.item("PPTL"+idx)
	obj.style.color=fgColor

	obj=document.all.item("PPTP"+idx)
	obj.style.backgroundColor=bgColor

	obj=document.all.item("PPTB"+idx)
	if( obj )
		obj.style.borderLeftColor=obj.style.borderBottomColor=bgColor
}
function ChgClr( o,clr ){ if( o.id != "PPTL"+gSelected ) o.style.color=clr }
function Over( obj ){ ChgClr(obj,gOtlActiveClr) }
function Out( obj ){ ChgClr(obj,gOtlHiliteClr) }
function ObjExists( ii ) { obj=document.all("PPTP"+ii ); return( obj ) }
function GoToSld( href ){ UpdIdx(parent.GetSldNum(href)); parent.GoToSld( href ) }
function CancelDrag(){ window.event.cancelBubble=true;window.event.returnValue=false}

function UpdNav()
{
	txt = "<center>";
	if( parent.GetHrefObj( parent.gCurSld ).mOrigVis == 1 )
		txt += "Slide " + parent.GetCurSldNum() + " of " + parent.GetNumSlds()
	else
		txt += "Hidden Slide"
	txt += "</center>";
	nav_text.innerHTML = txt;

	if( !parent.HasPrevSld() )
		gBtnArr["nb_prev"].Enabled(0)
	else
		gBtnArr["nb_prev"].Enabled(1)

	if( !parent.HasNextSld() )
		gBtnArr["nb_next"].Enabled(0)
	else
		gBtnArr["nb_next"].Enabled(1)
	gBtnArr["nb_nts"].SetEnabled()
	gBtnArr["nb_nts"].SetFlag( parent.gHasNts )

	gBtnArr["nb_sldshw"].Enabled(1)
	gBtnArr["nb_voice"].Enabled(1)
}

function UpdOtlNav()
{
	gBtnArr["nb_otl"].SetEnabled();

	if( parent.gOtlOpen )
		gBtnArr["nb_otlTxt"].Enabled( true );
	else
		document.all.item("nb_otlTxtBorder").style.visibility = "hidden";
}



//-->
</script>
<style>
<!--.PTxt
	{position:relative;
	width:100%;
	margin-top:5px;
	padding-left:5px;
	font-weight:bold;}
.CTxt
	{position:relative;
	width:100%;
	padding-left:10px;}
.CBorder
	{position:relative;
	width:100%;
	border-style:solid;
	border-width:1px;
	border-color:black;
	padding-bottom:5px;}
a
	{color:white;
	text-decoration:none;}
.button
	{position:absolute;
	width:32px;
	height:20px;
	border-style:solid;
	border-width:1px;
	border-color:threedface;}
-->
</style>
</head>

<body onload="Load()">

<div id=NavObj onload="Load()" onmouseover="BtnOnOver()"
onmousedown="BtnOnDown()" onmouseout="BtnOnOut()" onmouseup="BtnOnUp()"
onkeypress="_KPH()" style='display:none;visibility:hidden'>

<table style='position:absolute;width:70px;visibility:hidden' align=left
 cellpadding=0 cellspacing=0>
 <td nowrap>
 <div id="nb_ntsElem" align=center style='position:relative;padding:3px;
 font-family:Arial;color:buttontext;font-size:9pt'><img src="notes_flag.gif"
 border=0 id="notes_flag" style='display:none'><span style="mso-spacerun:
 yes">  </span>Notes</div>
 <div title="Show/Hide Notes" id="nb_nts" style='position:absolute;top:0%;
 left:0%;width:100%;height:100%'></div>
 </td>
</table>

<table style='position:relative' align=right cellpadding=0 cellspacing=0>
 <td>
 <div id="nb_sldshwBorder" style='position:absolute;left:-20px;width:20px;
 height:20px'>
 <div style='position:absolute;clip:rect(0px, 18px, 18px, 0px)'><img
 src=buttons.gif id="nb_sldshw" title="Full Screen Slide Show"
 style='position:relative;left:-254px'></div>
 </div>
 </td>
 <td>
 <div id="nb_voiceBorder" style='display:none;position:absolute;left:-40px;
 width:20px;height:20px'>
 <div style='position:absolute;clip:rect(0px, 18px, 18px, 0px)'><img
 src=buttons.gif id="nb_voice" title="Pause/Play Narration" style='position:
 relative;left:-290px'></div>
 </div>
 </td>
</table>

<table style='position:relative' align=center cellpadding=0 cellspacing=0>
 <td nowrap>
 <div id="nb_prevBorder" class=button style='left:-30px'>
 <div style='position:absolute;clip:rect(0px, 30px, 18px, 0px)'><img
 src=buttons.gif id="nb_prev" title="Previous Slide" style='position:relative;
 left:0px'></div>
 </div>
 <span id="nav_text" style='position:relative;top:3px;width:100px;font-family:
 Arial;color:buttontext;font-size:9pt'></span>
 <div id="nb_nextBorder" class=button>
 <div style='position:absolute;clip:rect(0px, 30px, 18px, 0px)'><img
 src=buttons.gif id="nb_next" title="Next Slide" style='position:relative;
 left:-90px'></div>
 </div>
 </td>
</table>

</div>

<div id=OtlNavObj onload="Load()" onmouseover="BtnOnOver()"
onmousedown="BtnOnDown()" onmouseout="BtnOnOut()" onmouseup="BtnOnUp()"
onkeypress="_KPH()" style='display:none;visibility:hidden'>

<table style='position:relative;width:70px' align=left cellpadding=0
 cellspacing=0>
 <td nowrap>
 <div id="nb_otlElem" align=center style='position:relative;padding:3px;
 font-family:Arial;color:buttontext;font-size:9pt'>Outline</div>
 <div title="Show/Hide Outline" id="nb_otl" style='position:absolute;
 top:0%;left:0%;width:100%;height:100%'></div>
 </td>
</table>

<table style='position:relative' align=center cellpadding=0 cellspacing=0>
 <td>
 <div style='position:absolute;left:-18px;width:24px;height:20px;border-style:
 solid;border-width:1px;border-color:threedface' id="nb_otlTxtBorder">
 <div style='position:absolute;clip:rect(0px, 22px, 18px, 0px)'><img
 src=buttons.gif id="nb_otlTxt" title="Expand/Collapse Outline"
 style='position:relative;left:-157px'></div>
 </div>
 </td>
</table>

</div>

<div id=OtlObj style='display:none;visibility:hidden'>

<table width="100%" style='font-family:Arial;font-size:9pt'>
 <tr>
  <td>
  <div id=PPTP1 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0001.htm');" onmouseover="Over(this)"
  id=PPTL1 onmouseout="Out(this)">Welcome!</a></font></div>
  <div id=PPTC1 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB1 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>CSI 3310: Operating System Principles</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Prof. Luigi Logrippo (using mostly materials
    prepared by Prof. Marchand)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>luigi@site.uottawa.ca</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Your demonstrators/markers:</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Li Ding lding@csi.uottawa.ca</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Igor Sales isales@csi.uottawa.ca</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP2 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0003.htm');" onmouseover="Over(this)"
  id=PPTL2 onmouseout="Out(this)">Time table</a></font></div>
  <div id=PPTC2 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB2 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Jan. - Apr.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2><span style="mso-spacerun: yes">    </span>THU
    LEC 14:30 16:30 MNN 112</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2><span style="mso-spacerun: yes">    </span>WED
    DGD 1 16:00 18:00 CBE 203</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2><span style="mso-spacerun: yes">    </span>MON
    DGD 2 08:30 10:30 CBE 203</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2><span style="mso-spacerun: yes">    </span>TUE
    DGD 3 14:30 16:30 CBE 201</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP3 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0002.htm');" onmouseover="Over(this)"
  id=PPTL3 onmouseout="Out(this)">Evaluation</a></font></div>
  <div id=PPTC3 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB3 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Problem sets (perhaps 3-4): 10%</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Programming assignments (3): 30%</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Mid-term quiz: 15%</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Final Exam: 45%</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>To pass the course (D+): you must obtain at
    least 50% for the (exam +quiz) component of your mark</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP4 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0006.htm');" onmouseover="Over(this)"
  id=PPTL4 onmouseout="Out(this)">Milestones...</a></font></div>
  <div id=PPTC4 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB4 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Programming assignments (in Java): given
    probably after 4, 6, 9 weeks. Two weeks to do each.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The mid-term quiz (1hr, closed book) will be
    held on Feb. 18.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The problem sets will be given as required</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP5 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0004.htm');" onmouseover="Over(this)"
  id=PPTL5 onmouseout="Out(this)">Labs and programming assignments</a></font></div>
  <div id=PPTC5 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB5 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>Programming exercises (mostly with Java) on:</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>Concurrency</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>Process synchronization</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>Memory management</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>Possibly other...</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Important tutorials in your labs on Java</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>These tutorials will give you the skills needed
    for programming assignments</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP6 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0007.htm');" onmouseover="Over(this)"
  id=PPTL6 onmouseout="Out(this)">Course philosophy and purpose</a></font></div>
  <div id=PPTC6 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB6 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Operating systems theory (practice will be
    covered in CSI4110).</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Familiarizing with concurrent programming</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP7 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0008.htm');" onmouseover="Over(this)"
  id=PPTL7 onmouseout="Out(this)">Why study OS theory?</a></font></div>
  <div id=PPTC7 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB7 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>OSs are very important parts of computer systems</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Problems, methods, and solutions found in OS
    theory can also be found in many other areas of computer science and
    similar ideas apply. So when you study OS, you are not studying only these.</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP8 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0005.htm');" onmouseover="Over(this)"
  id=PPTL8 onmouseout="Out(this)">Course content</a></font></div>
  <div id=PPTC8 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB8 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Computer system overview.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Operating system overview.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Process description and control.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Threads.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Concurrency: mutual exclusion and
    synchronization.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Memory management.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Virtual memory.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Uniprocessor scheduling.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Deadlock and starvation.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Follows closely the textbook (William Stallings,
    3rd)</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP9 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0009.htm');" onmouseover="Over(this)"
  id=PPTL9 onmouseout="Out(this)">Computer System Overview</a></font></div>
  <div id=PPTC9 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB9 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Chapter 1</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP10 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0010.htm');" onmouseover="Over(this)"
  id=PPTL10 onmouseout="Out(this)">The OS and the Hardware</a></font></div>
  <div id=PPTC10 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB10 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>An Operating System makes the computing power
    available to users by controlling the hardware</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Let us review the aspects of computer hardware
    which are important for the OS</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP11 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0011.htm');" onmouseover="Over(this)"
  id=PPTL11 onmouseout="Out(this)">Basic Components</a></font></div>
  <div id=PPTC11 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB11 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Processor (CPU)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Main Memory (aka real memory, aka primary
    memory)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>holds data and code</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>I/O modules (I/O controllers, I/O channels, I/O
    processors...)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>hardware (with registers called I/O ports) that
    moves data between CPU and peripherals like:</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>secondary memory devices (ex: hard disks)</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>keyboard, display...</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>communications equipment</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>System interconnection (buses, channels)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>communication among processors, memory, and I/O
    modules</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP12 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0012.htm');" onmouseover="Over(this)"
  id=PPTL12 onmouseout="Out(this)">I/O Module Structure</a></font></div>
  <div id=PPTC12 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB12 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Data to/from system buses are buffered in data
    register(s)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Status/Control register(s) hold</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>current status information</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>current control information</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>I/O logic interacts with CPU via control bus</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Contains logic specific to the interface of each
    device</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP13 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0013.htm');" onmouseover="Over(this)"
  id=PPTL13 onmouseout="Out(this)">CPU Registers (fast memory on CPU)</a></font></div>
  <div id=PPTC13 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB13 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Control &amp; Status Registers</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>generally not available to user programs</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>some used by CPU to control its operation</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>some used by OS to control program execution</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>User-visible Registers</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>available to system (OS) and user programs</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>only visible when using machine and assembly
    languages</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>hold data, addresses, and some condition codes</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP14 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0014.htm');" onmouseover="Over(this)"
  id=PPTL14 onmouseout="Out(this)">Examples of Control &amp; Status Registers</a></font></div>
  <div id=PPTC14 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB14 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Program Counter (PC)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>Contains the address of the next instruction to
    be fetched</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Instruction Register (IR)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>Contains the instruction most recently fetched</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Program Status Word (PSW)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>A register or group of registers containing:</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>condition codes and status info bits</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>Interrupt enable/disable bit</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>Supervisor(OS)/user mode bit</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP15 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0015.htm');" onmouseover="Over(this)"
  id=PPTL15 onmouseout="Out(this)">User-Visible Registers</a></font></div>
  <div id=PPTC15 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB15 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Data Registers</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>dedicated to contain data information. Can have
    many functions, depending on the structure of the machine code and on
    programmers decisions</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Address Registers</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>contain memory address of data and instructions</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>may contain a portion of an address that is used
    to calculate the complete address</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP16 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0016.htm');" onmouseover="Over(this)"
  id=PPTL16 onmouseout="Out(this)">User-Visible Address Registers</a></font></div>
  <div id=PPTC16 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB16 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>Index/Offset</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>involves adding an index to a base value to get
    an address</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>Segment pointer</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>when address space is divided into segments,
    memory is referenced by a segment and an offset</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>Stack pointer</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>points to top of stack</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP17 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0017.htm');" onmouseover="Over(this)"
  id=PPTL17 onmouseout="Out(this)">User-Visible Registers</a></font></div>
  <div id=PPTC17 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB17 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Condition Codes or Flags</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>Bits set by the processor hardware as a result
    of operations</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>Can be set by a program but not changed directly</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>Examples</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>sign flag</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>zero flag</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>overflow flag</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP18 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0018.htm');" onmouseover="Over(this)"
  id=PPTL18 onmouseout="Out(this)">The Basic Instruction Cycle</a></font></div>
  <div id=PPTC18 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB18 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The CPU fetches the next instruction (with
    operands) from memory.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Then the CPU executes the instruction</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Program counter (PC) holds address of the
    instruction to be fetched next</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Program counter is automatically incremented
    after each fetch</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP19 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0019.htm');" onmouseover="Over(this)"
  id=PPTL19 onmouseout="Out(this)">In the simplest machine organization, CPU
  must wait for I/O completion</a></font></div>
  <div id=PPTC19 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB19 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>WRITE transfers control to the printer driver
    (I/O pgm)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>I/O pgm prepares I/O module for printing (4)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>CPU has to WAIT for I/O command to complete</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>I/O pgm finishes and reports status of operation</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>CPU wastes time waiting</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP20 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0020.htm');" onmouseover="Over(this)"
  id=PPTL20 onmouseout="Out(this)">Interrupts</a></font></div>
  <div id=PPTC20 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB20 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Invented to allow overlap of input and
    processing times</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>CPU launches I/O, returns to processing and then
    gets interrupted when I/O completed</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The I/O module sends an interrupt request on the
    control bus</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Then CPU transfers control to an Interrupt
    Handler Routine (normally part of the OS)</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP21 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0021.htm');" onmouseover="Over(this)"
  id=PPTL21 onmouseout="Out(this)">Instruction Cycle with Interrupts!</a></font></div>
  <div id=PPTC21 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB21 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>If interrupts are enabled, CPU checks for
    interrupts after each instruction</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>If no interrupts, then fetch the next
    instruction for the current program</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>If an interrupt is pending, then suspend
    execution of the current program, and execute the interrupt handler</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP22 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0022.htm');" onmouseover="Over(this)"
  id=PPTL22 onmouseout="Out(this)">Interrupt Handler</a></font></div>
  <div id=PPTC22 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB22 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Is a program that determines nature of the
    interrupt and performs whatever actions are needed</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Upon interrupt, control is transferred to this
    program</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Control must be transferred back to the
    interrupted program so that it can be resumed from the point of
    interruption</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The point of interruption can be anywhere in the
    program (except where interrupt inhibited).</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Thus: must save the state of the program
    (content of PC + PSW + registers + ...)</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP23 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0023.htm');" onmouseover="Over(this)"
  id=PPTL23 onmouseout="Out(this)">Simple Interrupt Processing</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP24 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0024.htm');" onmouseover="Over(this)"
  id=PPTL24 onmouseout="Out(this)">Interrupts improve CPU usage</a></font></div>
  <div id=PPTC24 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB24 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>I/O pgm prepares the I/O module and issues the
    I/O command (eg: to printer)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Control returns to user pgm</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>User code gets executed during I/O operation
    (eg: printing): no waiting</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>User pgm gets interrupted (x) when I/O operation
    is done</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Control goes to interrupt handler to check
    status of I/O module and perform necessary processing</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Execution of user code resumes</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP25 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0025.htm');" onmouseover="Over(this)"
  id=PPTL25 onmouseout="Out(this)">Multiple interrupts: sequential order</a></font></div>
  <div id=PPTC25 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB25 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Disable interrupts during an interrupt</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Interrupts remain pending until the processor
    enables interrupts</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>After interrupt handler routine completes, the
    processor checks for additional interrupts</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP26 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0026.htm');" onmouseover="Over(this)"
  id=PPTL26 onmouseout="Out(this)">Multiple Interrupts: priorities</a></font></div>
  <div id=PPTC26 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB26 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Higher priority interrupts cause lower-priority
    interrupts to wait</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Causes a lower-priority interrupt handler to be
    interrupted</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Example: when input arrives from communication
    line, it needs to be absorbed quickly to make room for more input</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP27 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0027.htm');" onmouseover="Over(this)"
  id=PPTL27 onmouseout="Out(this)">Multiprogramming</a></font></div>
  <div id=PPTC27 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB27 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Allows to achieve better use of I/O overlap
    times.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>When a program reads a value on a I/O device it
    will need to wait for the I/O operation to complete. It can be difficult to
    use this waiting time.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>So interrupts are mostly effective when a single
    CPU is shared among several concurrently active processes.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The CPU can then switch to execute another
    program when a program waits for the result of the read operation.</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP28 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0028.htm');" onmouseover="Over(this)"
  id=PPTL28 onmouseout="Out(this)"><br>
  I/O communication techniques</a></font></div>
  <div id=PPTC28 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB28 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>3 techniques are possible for I/O operation (increasing
    sophistication)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>Programmed I/O</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>Does not use interrupts: CPU has to wait for
    completion of each I/O operation</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>Interrupt-driven I/O</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>CPU can execute code during I/O operation: it
    gets interrupted when I/O operation is done.</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>Direct Memory Access</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>A block of data is transferred directly from/to
    memory without going through CPU</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP29 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0029.htm');" onmouseover="Over(this)"
  id=PPTL29 onmouseout="Out(this)">Programmed I/O</a></font></div>
  <div id=PPTC29 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB29 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>There is no interrupt, CPU is kept busy checking
    status of I/O module (busy waiting).</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>No I/O overlap is possible</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Only used in very simple machines.</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP30 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0030.htm');" onmouseover="Over(this)"
  id=PPTL30 onmouseout="Out(this)">Interrupt-Driven I/O</a></font></div>
  <div id=PPTC30 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB30 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Processor is interrupted when I/O module ready
    to exchange data</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Processor is free to do other work.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>No needless waiting</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>However every word read or written still passes
    through the CPU (cycle stealing)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>CPU performance is affected by I/O</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP31 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0031.htm');" onmouseover="Over(this)"
  id=PPTL31 onmouseout="Out(this)">Direct Memory Access</a></font></div>
  <div id=PPTC31 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB31 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>CPU issues request to a DMA module (separate
    module or incorporated into I/O module)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>DMA module transfers a block of data directly to
    or from memory (without going through CPU)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>An interrupt is sent when the task is complete</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The CPU is only involved at the beginning and
    end of the transfer</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The CPU is completely free to perform other
    tasks during data transfer</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP32 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0032.htm');" onmouseover="Over(this)"
  id=PPTL32 onmouseout="Out(this)">Slide 32</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP33 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0033.htm');" onmouseover="Over(this)"
  id=PPTL33 onmouseout="Out(this)">Memory Hierarchy</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP34 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0034.htm');" onmouseover="Over(this)"
  id=PPTL34 onmouseout="Out(this)">Cache Memory</a></font></div>
  <div id=PPTC34 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB34 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Small cache of expensive but very fast memory
    interacting with slower but much larger memory</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Invisible to OS and user programs but interact
    with other memory management hardware</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Processor first checks if word referenced to is
    in cache</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>If not found in cache, a block of memory
    containing the word is moved to the cache</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP35 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0035.htm');" onmouseover="Over(this)"
  id=PPTL35 onmouseout="Out(this)">The Hit Ratio</a></font></div>
  <div id=PPTC35 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB35 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Hit ratio = fraction of access where data is in
    cache</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>T1 = access time for fast memory</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>T2 = access time for slow memory</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>T2 &gt;&gt; T1</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>When hit ratio is close to 1 the average access
    time is close to T1</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP36 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0036.htm');" onmouseover="Over(this)"
  id=PPTL36 onmouseout="Out(this)">Locality of reference: <br>
  a very
  important property of most programs</a></font></div>
  <div id=PPTC36 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB36 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Memory reference for both instruction and data
    tend to cluster over a long period of time.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Example: once a loop is entered, there is
    frequent access to a small set of instructions. Similarly, data is usually
    accessed in sequence.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Hence: once a word gets referenced, it is likely
    that nearby words will get referenced often in the near future.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Thus, the hit ratio will be close to 1 even for
    a small cache.</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP37 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0037.htm');" onmouseover="Over(this)"
  id=PPTL37 onmouseout="Out(this)">Disk Cache (same principles)</a></font></div>
  <div id=PPTC37 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB37 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>A portion of main memory used as a buffer to
    temporarily to hold data for the disk</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Locality of reference also applies here: once a
    record gets referenced, it is likely that nearby records will get
    referenced often in the near future.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>If a record referenced is not in the disk cache,
    the sector containing the record is moved into the disk cache.</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP38 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0038.htm');" onmouseover="Over(this)"
  id=PPTL38 onmouseout="Out(this)">Operating Systems Overview</a></font></div>
  <div id=PPTC38 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB38 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Chapter 2</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP39 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0039.htm');" onmouseover="Over(this)"
  id=PPTL39 onmouseout="Out(this)">Operating System</a></font></div>
  <div id=PPTC39 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB39 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Is a program that controls the execution of
    application programs</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>OS must relinquish control to user pgms and make
    sure that it regains it when necessary</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Is an interface between the user and hardware</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Masks the details of the hardware to application
    programs</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>It tries to optimize the use of computing
    resources for maximum performance</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP40 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0040.htm');" onmouseover="Over(this)"
  id=PPTL40 onmouseout="Out(this)">Services Provided by the OS</a></font></div>
  <div id=PPTC40 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB40 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Facilities for Program creation</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>editors, compilers, linkers, and debuggers</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Program execution</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>loaders, I/O and file initialization</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Access to I/O and files</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>deals with the specifics of I/O and file formats</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>System access</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Protection in access to resources and data</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Resolves conflicts for resource contention</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP41 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0041.htm');" onmouseover="Over(this)"
  id=PPTL41 onmouseout="Out(this)">Services Provided by the OS</a></font></div>
  <div id=PPTC41 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB41 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Error Detection</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>hardware errors</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>memory error</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>device failure</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>software errors</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>arithmetic overflow</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>access forbidden memory locations</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>Inability of OS to grant request</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Error Response</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>simply report error to the application</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>Retry the operation</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>Abort the application</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP42 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0042.htm');" onmouseover="Over(this)"
  id=PPTL42 onmouseout="Out(this)">Services Provided by the OS</a></font></div>
  <div id=PPTC42 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB42 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Accounting</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>collect statistics on resource usage</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>monitor performance (eg: response time)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>used for system parameter tuning to improve
    performance</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>useful for anticipating future enhancements</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>used for billing users (on multiuser systems)</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP43 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0043.htm');" onmouseover="Over(this)"
  id=PPTL43 onmouseout="Out(this)">Evolution of an Operating System</a></font></div>
  <div id=PPTC43 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB43 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Must adapt to hardware upgrades and new types of
    hardware. Examples:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Character vs graphic terminals</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Additional memory, channels, CPUs</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Must be able to offer new services, eg: internet
    support</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>The need to change the OS on regular basis place
    requirements on its design</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>modular construction with clean interfaces</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>possibly, object oriented methodology</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP44 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0044.htm');" onmouseover="Over(this)"
  id=PPTL44 onmouseout="Out(this)">Historical Evolution of OS</a></font></div>
  <div id=PPTC44 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB44 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The beginning: I/O routines, system setups</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Simple Batch OS</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Multiprogrammed Batch OS</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Time-Sharing Systems</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Networked systems, Client-Server</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Web computers, Multimedia</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>the functionalities of simpler systems are also
    present in more evolved ones</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2><span style="mso-spacerun: yes"> </span>the same
    problems and solutions present in simpler systems often are also present in
    more advanced ones.</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP45 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0045.htm');" onmouseover="Over(this)"
  id=PPTL45 onmouseout="Out(this)">Simple Batch Systems</a></font></div>
  <div id=PPTC45 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB45 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Were the first operating systems (mid-50s)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The user submits a job (typically, cards) to a
    computer operator</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The computer operator places a batch of jobs on
    a input device (e.g. card reader)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>A special program, the monitor, manages the
    execution of each program in the batch</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Resident monitor is in main memory and always
    available for execution</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Monitor utilities are loaded when needed</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Only one program at the time in memory, which is
    executed to the end before the next one.</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP46 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0046.htm');" onmouseover="Over(this)"
  id=PPTL46 onmouseout="Out(this)">The Monitor</a></font></div>
  <div id=PPTC46 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB46 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Monitor reads jobs one at a time from the input
    device</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Monitor places a job in the user program area</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>A monitor instruction branches to the start of
    the user program</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Execution of user pgm continues until:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>end-of-pgm occurs</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>timeout or error occurs</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>This causes Monitor to resume control</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP47 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0047.htm');" onmouseover="Over(this)"
  id=PPTL47 onmouseout="Out(this)">Job Control Language (JCL)</a></font></div>
  <div id=PPTC47 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB47 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Is the language to provide instructions to the
    monitor</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>what compiler to use</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>what files to use</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Example of job format: -------&gt;&gt;</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>$JOB sets up machine</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>$FTN loads the compiler and transfers control to
    it</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>$LOAD loads the compiled object code</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>$RUN transfers control to same</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP48 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0048.htm');" onmouseover="Over(this)"
  id=PPTL48 onmouseout="Out(this)">Job Control Language (JCL)</a></font></div>
  <div id=PPTC48 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB48 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>I/O is delegated to OS</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Each I/O instruction (in user pgm) causes OS I/O
    routine to be invoked</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>user cannot read a JCL line</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>user cannot print in the middle of other users
    printout...</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>OS reads the next JCL line at completion of user
    program</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP49 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0049.htm');" onmouseover="Over(this)"
  id=PPTL49 onmouseout="Out(this)">Desirable Hardware Features</a></font></div>
  <div id=PPTC49 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB49 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Memory protection</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>memory area containing the monitor must be
    protected from user programs</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Timer</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>prevents a job from monopolizing the system</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>an interrupt occurs when allocated time expires</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP50 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0050.htm');" onmouseover="Over(this)"
  id=PPTL50 onmouseout="Out(this)">Desirable Hardware Features (27)</a></font></div>
  <div id=PPTC50 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB50 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Privileged instructions (e.g. I/O, setting
    certain registers)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>can be executed only by the OS</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>an interrupt occurs if a program tries these
    instructions</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>CPU can execute in Supervisor<span
    style="mso-spacerun: yes">  </span>or User mode (bit in CPU) (these are
    also called Master/Slave mode)</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>Privileged instructions possible only in
    Supervisor mode</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>Only OS can switch CPU to Supervisor mode and
    back</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>User programs can execute in User mode only</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Extended role of Interrupts</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>for relinquishing control to and regaining
    control from user programs</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP51 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0051.htm');" onmouseover="Over(this)"
  id=PPTL51 onmouseout="Out(this)">Interruption Terminology (129)</a></font></div>
  <div id=PPTC51 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB51 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Confusing terminology in the literaturenot
    standardized</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>A good idea is to distinguish between :</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Interrupts: independent of program that is
    executing. Examples: I/O, timer</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Traps: caused by program execution. Examples:
    illegal access.</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>The word fault is also used, esp. wrt paging and
    segmentation</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>But the handling mechanisms are similar</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP52 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0052.htm');" onmouseover="Over(this)"
  id=PPTL52 onmouseout="Out(this)">Multiprogrammed Batch Systems</a></font></div>
  <div id=PPTC52 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB52 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>I/O operations are exceedingly slow (compared to
    instruction execution)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>A program containing even a small number of I/O
    ops will spend most of its time waiting for them</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Poor CPU usage when only one program is
    executing</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP53 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0053.htm');" onmouseover="Over(this)"
  id=PPTL53 onmouseout="Out(this)">Multiprogrammed Batch Systems</a></font></div>
  <div id=PPTC53 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB53 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>If several programs can execute, then CPU can
    switch to another one whenever one is awaiting for I/O to complete</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>This is multitasking (multiprogramming)</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP54 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0054.htm');" onmouseover="Over(this)"
  id=PPTL54 onmouseout="Out(this)">Requirements for Multiprogramming</a></font></div>
  <div id=PPTC54 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB54 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Hardware support:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>I/O interrupts</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>in order to execute instructions while I/O
    device is busy</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>Memory management</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>several ready-to-run jobs must be kept in memory
    (real or virtual)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>Memory protection to protect applications from
    each other</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Software support from the OS:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>To manage resource contention, esp:</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>CPU scheduling (which program is to be run next)</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>Memory allocation</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP55 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0055.htm');" onmouseover="Over(this)"
  id=PPTL55 onmouseout="Out(this)">Example: three jobs are submitted</a></font></div>
  <div id=PPTC55 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB55 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Almost no contention for resources</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>All 3 can run in minimum time in a multitasking
    environment (assuming JOB2/3 have enough CPU time to keep their I/O
    operations active)</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP56 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0056.htm');" onmouseover="Over(this)"
  id=PPTL56 onmouseout="Out(this)">Advantages of Multiprogramming</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP57 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0057.htm');" onmouseover="Over(this)"
  id=PPTL57 onmouseout="Out(this)">Time Sharing Systems (TSS)</a></font></div>
  <div id=PPTC57 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB57 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Batch multiprogramming does not support
    interaction with users -&gt; user frustrations !</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>TSS extends multiprogramming to handle multiple
    interactive jobs</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Processors time is shared among multiple users</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Multiple users simultaneously access the system
    through terminals</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP58 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0058.htm');" onmouseover="Over(this)"
  id=PPTL58 onmouseout="Out(this)">Time Sharing Systems (TSS)</a></font></div>
  <div id=PPTC58 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB58 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Because of slow human reaction time, a typical
    user may need only 2 secs of processing time per minute</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Then up to 30 users could be able to share the
    same system without noticeable delay in the computer reaction time</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The OS functionalities needed are the same as
    for batch, plus more...</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP59 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0059.htm');" onmouseover="Over(this)"
  id=PPTL59 onmouseout="Out(this)">Difficulties with OS Design</a></font></div>
  <div id=PPTC59 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB59 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Proper synchronization</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>properly organize interrupts/traps, avoid loss
    of signals or duplication of signals</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Mutual exclusion</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>only one program at a time to perform a
    transaction on the same data</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>No endless waiting</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>deadlock &amp; starvation prevention, detection,
    resolution.</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP60 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0060.htm');" onmouseover="Over(this)"
  id=PPTL60 onmouseout="Out(this)">Major Achievements of OS</a></font></div>
  <div id=PPTC60 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB60 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>To meet the difficult requirements of
    multiprogramming and time sharing, there have been 5 major achievements by
    OS:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Concept of process</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Memory management</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Information protection and security</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Scheduling and resource management</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>System structuring</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP61 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0061.htm');" onmouseover="Over(this)"
  id=PPTL61 onmouseout="Out(this)">Process Concept</a></font></div>
  <div id=PPTC61 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB61 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=4><font size=2>Introduced to obtain a systematic way of
    monitoring and controlling pgm execution</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=4><font size=2>A process is an executable program with:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=3><font size=2><span style="mso-spacerun:
    yes"> </span>associated data (variables, buffers)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=3><font size=2><span style="mso-spacerun: yes"> </span>execution
    context: ie. all the information that</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=2><font size=2><span style="mso-spacerun: yes"> </span>the CPU
    needs to execute the process</font></td>
   </tr>
   <tr>
    <td colspan=4></td>
    <td colspan=1><font size=2>content of<span style="mso-spacerun: yes"> 
    </span>the processor registers</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=2><font size=2>the OS needs to manage the process:</font></td>
   </tr>
   <tr>
    <td colspan=4></td>
    <td colspan=1><font size=2>priority of the process</font></td>
   </tr>
   <tr>
    <td colspan=4></td>
    <td colspan=1><font size=2>the event (if any) for which the process is
    waiting</font></td>
   </tr>
   <tr>
    <td colspan=4></td>
    <td colspan=1><font size=2>. . .</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP62 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0062.htm');" onmouseover="Over(this)"
  id=PPTL62 onmouseout="Out(this)">A simple implementation of processes</a></font></div>
  <div id=PPTC62 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB62 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>The process index register contains the index
    into the process list of the currently executing process (B)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>A process switch from B to A consist of storing
    (in memory) Bs context and loading (in CPU registers) As context</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Save/Restore</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP63 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0063.htm');" onmouseover="Over(this)"
  id=PPTL63 onmouseout="Out(this)">Memory Management</a></font></div>
  <div id=PPTC63 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB63 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>The key contribution is virtual memory</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>It allows programs to address memory from a
    logical point of view without regard to the amount that is physically
    available</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>While a program is running only a portion of the
    program and data is kept in (real) memory</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Other portions are kept in blocks on disk</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>the user has access to a memory space that is
    larger than real memory</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP64 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0064.htm');" onmouseover="Over(this)"
  id=PPTL64 onmouseout="Out(this)">Virtual Memory</a></font></div>
  <div id=PPTC64 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB64 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>All memory references made by a program are to
    virtual memory</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>The hardware (mapper) must map virtual memory
    address to real memory address</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>If a reference is made to a virtual address not
    in memory, then</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>(1) a portion of the content of real memory is
    swapped out to disk</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>(2) the desired block of data is swapped in</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP65 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0065.htm');" onmouseover="Over(this)"
  id=PPTL65 onmouseout="Out(this)">File System (not to be discussed further)</a></font></div>
  <div id=PPTC65 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB65 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Implements long-term store (often on disk)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Information stored in named objects called files</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>a convenient unit of access and protection for
    OS</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Files (and portions) may be copied into virtual
    memory as required by programs</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP66 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0066.htm');" onmouseover="Over(this)"
  id=PPTL66 onmouseout="Out(this)">Security and Protection (not to be discussed
  further)</a></font></div>
  <div id=PPTC66 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB66 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Access control to resources</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>forbid intruders (unauthorized users) to enter
    the system</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>forbid user processes to access resources which
    they are not authorized to</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>protects users and OS from each others</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP67 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0067.htm');" onmouseover="Over(this)"
  id=PPTL67 onmouseout="Out(this)">Scheduling and Resource Management</a></font></div>
  <div id=PPTC67 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB67 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Differential responsiveness</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>discriminate between different classes of jobs</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Fairness</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>give equal and fair access to all processes of
    the same class</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Efficiency</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>maximize throughput, minimize response time, and
    accomodate as many users as possible</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP68 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0068.htm');" onmouseover="Over(this)"
  id=PPTL68 onmouseout="Out(this)">Key Elements for Scheduling</a></font></div>
  <div id=PPTC68 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB68 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>OS maintains queues of processes waiting for
    resources</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>Short term queue of processes in memory ready to
    execute</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>The dispatcher decides who goes next</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>Long term queue of new jobs waiting to use the
    system</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>OS must not admit too many processes on
    short-term queue</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>A queue for each I/O device consisting of
    processes that want to use that I/O device</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP69 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0069.htm');" onmouseover="Over(this)"
  id=PPTL69 onmouseout="Out(this)">System Structure</a></font></div>
  <div id=PPTC69 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB69 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Because of their complexity, OS systems are
    usually structured as a series of levels (onion-skin architecture)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Each level performs a certain subset of
    functions</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Each level relies on the next lower level to
    perform more primitive functions</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The lowest level (the centre) is the hardware</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Well defined interfaces: one level can be
    modified without affecting other levels</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The problem is decomposed into a number of more
    manageable sub problems</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP70 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0070.htm');" onmouseover="Over(this)"
  id=PPTL70 onmouseout="Out(this)">Possible OS Design Structure</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP71 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0071.htm');" onmouseover="Over(this)"
  id=PPTL71 onmouseout="Out(this)">Possible OS Design Structure</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP72 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0072.htm');" onmouseover="Over(this)"
  id=PPTL72 onmouseout="Out(this)">Hardware Layers</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP73 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0073.htm');" onmouseover="Over(this)"
  id=PPTL73 onmouseout="Out(this)">Characteristics of Modern Operating Systems</a></font></div>
  <div id=PPTC73 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB73 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>New design elements were introduced recently:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>In response to new hardware developmts</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>multiprocessor machines</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>high-speed networks</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>faster processors and larger memory</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>In response to new software needs</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>Client/Server applications</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>Internet and Web access</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>Multimedia applications</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP74 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0074.htm');" onmouseover="Over(this)"
  id=PPTL74 onmouseout="Out(this)">Microkernel architecture</a></font></div>
  <div id=PPTC74 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB74 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Only a few essential functions in the kernel:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>primitive memory management (address space)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Interprocess communication (IPC)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>basic scheduling</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Other OS services are provided by processes
    running in user mode (servers)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>device drivers, file system, virtual memory</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>More flexibility, extensibility, portability</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP75 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0075.htm');" onmouseover="Over(this)"
  id=PPTL75 onmouseout="Out(this)">Multithreading</a></font></div>
  <div id=PPTC75 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB75 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>A process is a collection of one or more threads
    that can run simultaneously</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>All threads within the same process share the
    same data and resources and a part of the processs execution context</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>It is easier to create or destroy a thread or
    switch among threads (of the same process) than to do the same among
    processes</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP76 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0076.htm');" onmouseover="Over(this)"
  id=PPTL76 onmouseout="Out(this)">Symmetric Multiprocessing (SMP)</a></font></div>
  <div id=PPTC76 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB76 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>A computer with multiple processors, where all
    processors have the same functionalities (symmetric)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The OS schedules processes/threads across all
    the processors, which then become resources just as channels, etc.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Existence of multiple processors is transparent
    to the user.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Incremental growth: just add another CPU!</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Robustness: a single CPU failure does not halt
    the system, only the performance is reduced.</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP77 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0077.htm');" onmouseover="Over(this)"
  id=PPTL77 onmouseout="Out(this)">Example of parallel execution on SMP</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP78 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0078.htm');" onmouseover="Over(this)"
  id=PPTL78 onmouseout="Out(this)">Process Description and Control</a></font></div>
  <div id=PPTC78 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB78 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Chapter 3</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP79 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0079.htm');" onmouseover="Over(this)"
  id=PPTL79 onmouseout="Out(this)">Processes</a></font></div>
  <div id=PPTC79 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB79 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Multiprogramming OSs are built around the
    concept of process (also called task).</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>A process is an execution path through one or
    more programs (p. 146).</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>A given program, or part of program, can be
    traversed by several processes, simultaneously (reentrancy) or
    sequentially.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The word process sometimes applies also to a
    program that is capable to execute independently and simultaneously with
    others</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>A precise def of process depends on the
    specifics of a system or programming language, hence cannot be given in
    abstract.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP80 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0080.htm');" onmouseover="Over(this)"
  id=PPTL80 onmouseout="Out(this)">OS Requirements for Processes</a></font></div>
  <div id=PPTC80 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB80 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>OS must interleave the execution of several
    processes to maximize CPU usage while providing reasonable response time</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>OS must allocate resources to processes while
    avoiding deadlock and starvation</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>OS must support inter process communication and
    user creation of processes</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP81 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0081.htm');" onmouseover="Over(this)"
  id=PPTL81 onmouseout="Out(this)">Dispatcher (short-term scheduler)</a></font></div>
  <div id=PPTC81 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB81 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Is an OS program that moves the CPU from one
    process to another</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>It prevents a single process from
    monopolizing<span style="mso-spacerun: yes">  </span>CPU time</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>It decides who goes next according to a
    scheduling algorithm (chap 9)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The CPU will execute instructions from the
    dispatcher while switching from process A to process B</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP82 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0082.htm');" onmouseover="Over(this)"
  id=PPTL82 onmouseout="Out(this)">When does a process get created?</a></font></div>
  <div id=PPTC82 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB82 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Submission of a batch job</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>User logs on</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Created by OS to provide a service to a<span
    style="mso-spacerun: yes">  </span>user (ex: printing a file)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Spawned by an existing process</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>a user program can dictate the creation of a
    number of processes</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP83 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0083.htm');" onmouseover="Over(this)"
  id=PPTL83 onmouseout="Out(this)">When does a process get terminated?</a></font></div>
  <div id=PPTC83 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB83 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Batch job issues Halt instruction</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>User logs off</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Process executes a service request to terminate</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Error or fault conditions</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP84 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0084.htm');" onmouseover="Over(this)"
  id=PPTL84 onmouseout="Out(this)">Reasons for Process Termination</a></font></div>
  <div id=PPTC84 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB84 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Normal completion</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Time limit exceeded</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Memory unavailable</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Memory bounds violation</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Protection error</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>example: write to read-only file</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Arithmetic error</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Time overrun</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>process waited longer than a specified maximum
    for an event</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP85 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0085.htm');" onmouseover="Over(this)"
  id=PPTL85 onmouseout="Out(this)">Reasons for Process Termination</a></font></div>
  <div id=PPTC85 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB85 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>I/O failure</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Invalid instruction</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>happens when try to execute data</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Privileged instruction</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Operating system intervention</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>such as when deadlock occurs</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Parent request to terminate one offspring</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Parent terminates so child processes terminate</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP86 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0086.htm');" onmouseover="Over(this)"
  id=PPTL86 onmouseout="Out(this)">Process States</a></font></div>
  <div id=PPTC86 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB86 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Let us start with these states:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>The Running state</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>The process(es) that is (are) executing on the
    CPU<span style="mso-spacerun: yes">  </span>are in Running state</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>The Blocked state</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>A process that is waiting for something (e.g.
    I/O) to complete is in Blocked state</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>The Ready state</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>A process that is ready to be executed is in
    Ready state [due to limited number of CPUs]</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP87 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0087.htm');" onmouseover="Over(this)"
  id=PPTL87 onmouseout="Out(this)">Other Useful States</a></font></div>
  <div id=PPTC87 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB87 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>The New state</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>OS has performed the necessary actions to create
    the process</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>has created a process identifier</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>has created tables needed to manage the process</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>but has not yet committed to execute the process
    (not yet admitted)</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2><span style="mso-spacerun: yes"> </span>because
    resources are limited</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP88 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0088.htm');" onmouseover="Over(this)"
  id=PPTL88 onmouseout="Out(this)">Other Useful States</a></font></div>
  <div id=PPTC88 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB88 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>The Exit state</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>Termination moves the process to this state</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>It is no longer eligible for execution</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>Tables and other info are temporarily preserved
    for auxiliary program</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>Ex: accounting program that cumulates resource
    usage for billing the users</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>The process (and its tables) gets deleted when
    the data is no more needed</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP89 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0089.htm');" onmouseover="Over(this)"
  id=PPTL89 onmouseout="Out(this)">A Five-state Process Model</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP90 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0090.htm');" onmouseover="Over(this)"
  id=PPTL90 onmouseout="Out(this)">Process Transitions</a></font></div>
  <div id=PPTC90 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB90 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Ready --&gt; Running</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>The dispatcher selects a new process to run (to
    be discussed in Chapter 4).</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Running --&gt; Ready</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>the running process is timed out</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>the running process gets interrupted because a
    higher priority process is in the ready state (needs to run)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP91 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0091.htm');" onmouseover="Over(this)"
  id=PPTL91 onmouseout="Out(this)">Process Transitions</a></font></div>
  <div id=PPTC91 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB91 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Running --&gt; Blocked</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>When a process requests something for which it
    must wait</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>a service of the OS that requires a wait</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>an access to a resource not yet available</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>initiates I/O and must wait for the result</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>waiting for a process to provide input (IPC)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Blocked --&gt; Ready</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>When the event for which it was waiting occurs</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP92 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0092.htm');" onmouseover="Over(this)"
  id=PPTL92 onmouseout="Out(this)">A Five-state Process Model</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP93 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0093.htm');" onmouseover="Over(this)"
  id=PPTL93 onmouseout="Out(this)">A Queuing Discipline</a></font></div>
  <div id=PPTC93 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB93 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Ready queue without priorities (ex: FIFO)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>When event n occurs, the corresponding queue is
    moved into the ready queue</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP94 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0094.htm');" onmouseover="Over(this)"
  id=PPTL94 onmouseout="Out(this)">Variations the basic model</a></font></div>
  <div id=PPTC94 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB94 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The basic model we have discussed is very widely
    used.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>However it has a great number of variations,
    since no two OS are alike</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>An example follows: adding swapping states</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP95 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0095.htm');" onmouseover="Over(this)"
  id=PPTL95 onmouseout="Out(this)">The need for swapping</a></font></div>
  <div id=PPTC95 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB95 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>So far, all the processes had to be (at least
    partly) in main memory</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Even with virtual memory, keeping too many
    processes in main memory will deteriorate the systems performance</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The OS may need to suspend some processes, ie: to
    swap them out to auxiliary memory (disk). We add 2 new states, which double
    Blocked and Ready:</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Blocked Suspend: blocked processes which have
    been swapped out to disk</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Ready Suspend: ready processes which have been
    swapped out to disk</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP96 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0096.htm');" onmouseover="Over(this)"
  id=PPTL96 onmouseout="Out(this)">New state transitions (mid-term scheduling)</a></font></div>
  <div id=PPTC96 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB96 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Blocked --&gt; Blocked Suspend</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>When all processes are blocked, the OS may
    remove a blocked process to bring a ready process in memory</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Blocked Suspend --&gt; Ready Suspend</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>When the event for which process has been
    waiting occurs</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Ready Suspend --&gt; Ready</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>When no ready processes in main memory</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Normally, this transition is paired with Blocked
    --&gt; Blocked suspend for another process (memory space must be found)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Ready--&gt; Ready Suspend</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>When there are no blocked processes and must
    free memory for adequate performance</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP97 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0097.htm');" onmouseover="Over(this)"
  id=PPTL97 onmouseout="Out(this)">A Seven-state Process Model</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP98 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0098.htm');" onmouseover="Over(this)"
  id=PPTL98 onmouseout="Out(this)">Operating System Control Structures</a></font></div>
  <div id=PPTC98 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB98 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>An OS maintains the following tables for
    managing processes and resources:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Memory occupation tables (see later)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>I/O tables (see later)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>File tables (see later)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Process tables (this chapter)</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP99 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0099.htm');" onmouseover="Over(this)"
  id=PPTL99 onmouseout="Out(this)">Process Image (process constituents)</a></font></div>
  <div id=PPTC99 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB99 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>User program</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>User data</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Stack(s)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>for procedure calls and parameter passing</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Process Control Block (execution context)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>Data needed (process attributes) by the OS to
    suspend/resume the process. This includes:</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>Process identification information</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>Processor state information</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>Process control information</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP100 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0100.htm');" onmouseover="Over(this)"
  id=PPTL100 onmouseout="Out(this)">Process images in virtual memory</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP101 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0101.htm');" onmouseover="Over(this)"
  id=PPTL101 onmouseout="Out(this)">Location of the Process Image</a></font></div>
  <div id=PPTC101 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB101 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Each process image is in virtual memory</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>may not occupy a contiguous range of addresses
    (depends on the memory management scheme used)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>both a private and shared memory address space
    is used</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>The location of each process image is pointed to
    by an entry in the Primary Process Table</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP102 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0102.htm');" onmouseover="Over(this)"
  id=PPTL102 onmouseout="Out(this)">Process Identification (in the PCB)</a></font></div>
  <div id=PPTC102 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB102 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>A few numeric identifiers may be used</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>Unique process identifier (always)</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>indexes (directly or indirectly) into the
    primary process table</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>User identifier</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>the user who is responsible for the process</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>Identifier of the process that created this
    process</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP103 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0103.htm');" onmouseover="Over(this)"
  id=PPTL103 onmouseout="Out(this)">What needs to be saved and when <br>
  (p.129-131)</a></font></div>
  <div id=PPTC103 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB103 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Mode switching: process is suspended (e.g. to
    process interrupt) but immediately after this it resumes execution on the
    same CPU:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>only information necessary to resume execution
    of the same process needs to be saved (e.g. program counter)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Process switching: process is suspended and
    another process will take the CPU:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>more may need to be saved, also process state
    must be updated.</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP104 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0104.htm');" onmouseover="Over(this)"
  id=PPTL104 onmouseout="Out(this)">Processor State Information (in PCB)</a></font></div>
  <div id=PPTC104 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB104 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Contents of processor registers</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>User-visible registers</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Control and status registers</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Stack pointers</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Program status word (PSW)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>contains status information</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Example: the EFLAGS register on Pentium machines</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP105 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0105.htm');" onmouseover="Over(this)"
  id=PPTL105 onmouseout="Out(this)">Process Control Information (in PCB)</a></font></div>
  <div id=PPTC105 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB105 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>scheduling and state information</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Process state (ie: running, ready, blocked...)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Priority of the process</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Event for which the process is waiting (if
    blocked)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>data structuring information</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>may hold pointers to other PCBs for process
    queues, parent-child relationships and other structures</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP106 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0106.htm');" onmouseover="Over(this)"
  id=PPTL106 onmouseout="Out(this)">Queues as linked lists of PCBs</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP107 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0107.htm');" onmouseover="Over(this)"
  id=PPTL107 onmouseout="Out(this)">Process Control Information (in PCB)</a></font></div>
  <div id=PPTC107 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB107 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>interprocess communication</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>may hold flags and signals for IPC</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>process privileges</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Ex: access to certain memory locations...</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>memory management</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>pointers to segment/page tables assigned to this
    process</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>resource ownership and utilization</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>resource in use: open files, I/O devices...</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>history of usage (of CPU time, I/O...)</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP108 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0108.htm');" onmouseover="Over(this)"
  id=PPTL108 onmouseout="Out(this)">Modes of Execution</a></font></div>
  <div id=PPTC108 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB108 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>To provide protection to PCBs (and other OS
    data) most processors support at least 2 execution modes:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>Privileged mode (a.k.a. system mode, kernel
    mode, supervisor mode, control mode, master mode... )</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>manipulating control registers, primitive I/O
    instructions, memory management...</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>User mode (a.k.a. slave mode)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>For this the CPU provides a (or a few) mode bit
    which may only be set by an interrupt or trap or OS call</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP109 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0109.htm');" onmouseover="Over(this)"
  id=PPTL109 onmouseout="Out(this)">Process Creation</a></font></div>
  <div id=PPTC109 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB109 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Assign a unique process identifier</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Allocate space for the process image</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Initialize process control block</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>default values are used (ex: state is New, no
    I/O devices or files...)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Set up appropriate linkages</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Ex: add new process to linked list used for the
    scheduling queue</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP110 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0110.htm');" onmouseover="Over(this)"
  id=PPTL110 onmouseout="Out(this)">When to Switch a Process ?</a></font></div>
  <div id=PPTC110 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB110 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>A process switch may occur whenever the OS has
    gained control of CPU. ie when:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>Supervisor Call</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>explicit request by the program (ex: I/O). The
    process will probably be blocked</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>Trap</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>An error resulted from the last instruction. It
    may cause the process to be moved to exit state</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>Interrupt</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>the cause is external to the execution of the
    current instruction. Control is transferred to IH</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP111 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0111.htm');" onmouseover="Over(this)"
  id=PPTL111 onmouseout="Out(this)">Mode Switching</a></font></div>
  <div id=PPTC111 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB111 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>It is possible that an interrupt does not
    produce a process switch</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Control can just return to the interrupted
    program, but not before executing the IH</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Then only the processor state information needs
    to be saved<span style="mso-spacerun: yes">  </span>(ref. Chap 1)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>This is called mode switching (user to kernel
    mode when going into IH)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Less overhead: no need to update the PCB as for
    process switching</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP112 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0112.htm');" onmouseover="Over(this)"
  id=PPTL112 onmouseout="Out(this)">Steps in Process (Context) Switching</a></font></div>
  <div id=PPTC112 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB112 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Save context of CPU including program counter
    and other registers</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Update the PCB of the running process with its
    new state and other associate info</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Move PCB to appropriate queue - ready, blocked</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Select another process for execution</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Update PCB of the selected process</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Restore CPU context from PCB of the selected
    process</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP113 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0113.htm');" onmouseover="Over(this)"
  id=PPTL113 onmouseout="Out(this)">Execution of the Operating System</a></font></div>
  <div id=PPTC113 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB113 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Up to now, by process we were referring to user
    process</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>If the OS is just like any other collection
    of<span style="mso-spacerun: yes">  </span>programs, is the OS a process?</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>If so, how it is controlled?</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The answer depends on the OS design.</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP114 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0114.htm');" onmouseover="Over(this)"
  id=PPTL114 onmouseout="Out(this)">Nonprocess Kernel (old)</a></font></div>
  <div id=PPTC114 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB114 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The concept of process applies only to user
    programs</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>OS code is executed as a separate entity in
    privilege mode</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>OS code never gets executed within a process</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP115 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0115.htm');" onmouseover="Over(this)"
  id=PPTL115 onmouseout="Out(this)">Execution within User Processes</a></font></div>
  <div id=PPTC115 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB115 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>OS operates mostly as it was a regular user, in
    fact OS function appear as functions of the users that invoke them: shared
    address space</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Virtually all OS code gets executed within the
    context of a user process</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>On Interrupts, Traps, System calls: CPU switches
    to kernel mode to execute OS routine within the context of user process
    (mode switch)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Control passes to process switching functions
    (outside processes) only when needed (eg: interprocess synchronization,
    process scheduling)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP116 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0116.htm');" onmouseover="Over(this)"
  id=PPTL116 onmouseout="Out(this)">Execution within User Processes</a></font></div>
  <div id=PPTC116 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB116 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>OS code and data are in the shared address space
    and are shared by all user processes</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Separate kernel stack for calls/returns when the
    process is in kernel mode</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Within a user process, both user and OS programs
    may execute (more than 1)</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP117 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0117.htm');" onmouseover="Over(this)"
  id=PPTL117 onmouseout="Out(this)">Process-based Operating System</a></font></div>
  <div id=PPTC117 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB117 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The OS is a collection of system processes,
    outside of users address space</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Major kernel functions are separate processes</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Process switching functions are executed outside
    of any process</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP118 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0118.htm');" onmouseover="Over(this)"
  id=PPTL118 onmouseout="Out(this)">UNIX SVR4 Process management</a></font></div>
  <div id=PPTC118 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB118 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Most of OS executes within user processes</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Uses two categories of processes:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>System processes</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>run in kernel mode for housekeeping functions
    (memory allocation, process swapping...)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>User processes</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>run in user mode for user programs</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>run in kernel modes for system calls, traps, and
    interrupts</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP119 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0119.htm');" onmouseover="Over(this)"
  id=PPTL119 onmouseout="Out(this)">UNIX SVR4 Process States</a></font></div>
  <div id=PPTC119 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB119 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Similar to our 7 state model</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>2 running states: User and Kernel</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>transitions to other states (blocked, ready)
    must come from kernel running</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Sleeping states (in memory, or swapped)
    correspond to our blocking states</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>A preempted state is distinguished from the
    ready state (but they form 1 queue)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Preemption can occur only when a process is
    about to move from kernel to user mode</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP120 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0120.htm');" onmouseover="Over(this)"
  id=PPTL120 onmouseout="Out(this)">UNIX Process State Diagram</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP121 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0121.htm');" onmouseover="Over(this)"
  id=PPTL121 onmouseout="Out(this)">UNIX<span style="mso-spacerun: yes"> 
  </span>Process Creation</a></font></div>
  <div id=PPTC121 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB121 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Every process, except process 0, is created by
    the fork() system call</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>fork() allocates entry in process table and
    assigns a unique PID to the child process</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>child gets a copy of process image of parent:
    both child and parent are executing the same code following fork()</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>but fork() returns the PID of the child to the
    parent process and returns 0 to the child process</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP122 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0122.htm');" onmouseover="Over(this)"
  id=PPTL122 onmouseout="Out(this)">UNIX System Processes</a></font></div>
  <div id=PPTC122 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB122 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Process 0 is created at boot time and becomes
    the swapper after forking process 1 (the INIT process)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>When a user logs in: process 1 creates a process
    for that user</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP123 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0123.htm');" onmouseover="Over(this)"
  id=PPTL123 onmouseout="Out(this)">UNIX Process Image</a></font></div>
  <div id=PPTC123 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB123 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>User-level context</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>Process Text (ie: code: read-only)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>Process Data</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>User Stack (calls/returns in user mode)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>Shared memory (for IPC)</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>only one physical copy exists but, with virtual
    memory, it appears as it is in the processs address space</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Register context</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP124 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0124.htm');" onmouseover="Over(this)"
  id=PPTL124 onmouseout="Out(this)">UNIX Process Image</a></font></div>
  <div id=PPTC124 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB124 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=4><font size=2>System-level context</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=3><font size=2>Process table entry</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=2><font size=2>the actual entry concerning this process in the
    Process Table maintained by OS</font></td>
   </tr>
   <tr>
    <td colspan=4></td>
    <td colspan=1><font size=2>Process state, UID, PID, priority, event
    awaiting, signals sent,<span style="mso-spacerun: yes">  </span>pointers to
    memory holding text, data...</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=3><font size=2>U (user) area</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=2><font size=2>additional process info needed by the kernel
    when executing in the context of this process</font></td>
   </tr>
   <tr>
    <td colspan=4></td>
    <td colspan=1><font size=2>effective UID, timers, limit fields, files in
    use ...</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=3><font size=2>Kernel stack (calls/returns in kernel mode)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=3><font size=2>Per Process Region Table (used by memory
    manager)</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP125 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0125.htm');" onmouseover="Over(this)"
  id=PPTL125 onmouseout="Out(this)">Threads</a></font></div>
  <div id=PPTC125 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB125 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Chapter 4</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP126 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0126.htm');" onmouseover="Over(this)"
  id=PPTL126 onmouseout="Out(this)">Process<span style="mso-spacerun: yes"> 
  </span>Characteristics</a></font></div>
  <div id=PPTC126 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB126 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Unit of resource ownership - process is
    allocated:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2><span style="mso-spacerun: yes"> </span>a
    virtual address space to hold the process image</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>control of some resources (files, I/O
    devices...)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Unit of execution - process is an execution path
    through one or more programs</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>execution may be interleaved with other
    processes</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>the process has an execution state and a
    priority</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP127 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0127.htm');" onmouseover="Over(this)"
  id=PPTL127 onmouseout="Out(this)">Process<span style="mso-spacerun: yes"> 
  </span>Characteristics</a></font></div>
  <div id=PPTC127 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB127 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>These two characteristics are treated
    independently by some recent OS</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The unit of execution is usually referred to a thread
    or a lightweight process (book talks of unit of dispatching, similar
    concept)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The unit of resource ownership is usually
    referred to as a process or task</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP128 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0128.htm');" onmouseover="Over(this)"
  id=PPTL128 onmouseout="Out(this)">Multithreading vs. Single threading</a></font></div>
  <div id=PPTC128 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB128 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Multithreading: when the OS supports multiple
    threads of execution within a single process</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Single threading: when the OS does not recognize
    the concept of thread</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>MS-DOS support a single user process and a
    single thread</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>UNIX supports multiple user processes but only
    supports one thread per process</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Solaris supports multiple threads</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP129 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0129.htm');" onmouseover="Over(this)"
  id=PPTL129 onmouseout="Out(this)">Threads and Processes</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP130 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0130.htm');" onmouseover="Over(this)"
  id=PPTL130 onmouseout="Out(this)">Processes</a></font></div>
  <div id=PPTC130 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB130 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Have a virtual address space which holds the
    process image</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Protected access to processors, other processes,
    files, and I/O resources</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP131 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0131.htm');" onmouseover="Over(this)"
  id=PPTL131 onmouseout="Out(this)">Threads</a></font></div>
  <div id=PPTC131 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB131 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Have execution state (running, ready, etc.)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Save thread context when not running</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Have private storage for local variables and
    execution stack</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Have shared access to the address space and
    resources (files) of their process</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>when one thread alters (non-private) data, all
    other threads (of the process) can see this</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>threads communicate via shared variables</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>a file opened by one thread is available to
    others</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP132 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0132.htm');" onmouseover="Over(this)"
  id=PPTL132 onmouseout="Out(this)">Single Threaded and Multithreaded Process
  Models</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP133 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0133.htm');" onmouseover="Over(this)"
  id=PPTL133 onmouseout="Out(this)">Benefits of Threads vs Processes</a></font></div>
  <div id=PPTC133 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB133 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>It takes less time to create a new thread than a
    new process</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Less time to terminate a thread than a process</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Less time to switch between two threads within
    the same process than to switch between processes</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP134 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0134.htm');" onmouseover="Over(this)"
  id=PPTL134 onmouseout="Out(this)">Benefits of Threads</a></font></div>
  <div id=PPTC134 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB134 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Example: a file server on a LAN</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>It needs to handle several file requests over a
    short period</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Hence more efficient to create (and destroy) a
    single thread for each request</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>In Symmetric Multiprocessing: different threads
    can possibly execute simultaneously on different processors</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Example 2: one thread displays menu and reads
    user input while the other thread executes user commands</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP135 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0135.htm');" onmouseover="Over(this)"
  id=PPTL135 onmouseout="Out(this)">Application benefits of threads</a></font></div>
  <div id=PPTC135 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB135 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Consider an application that consists of several
    independent parts that do not need to run in sequence</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Each part can be implemented as a thread</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Whenever one thread is blocked waiting for an
    I/O, execution could possibly switch to another thread of the same
    application (instead of switching to another process)</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP136 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0136.htm');" onmouseover="Over(this)"
  id=PPTL136 onmouseout="Out(this)">Benefits of Threads</a></font></div>
  <div id=PPTC136 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB136 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Since threads within the same process share
    memory and files, they can communicate with each other without invoking the
    kernel</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Therefore necessary to synchronize the
    activities of various threads so that they do not obtain inconsistent views
    of the data (chap 5)</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP137 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0137.htm');" onmouseover="Over(this)"
  id=PPTL137 onmouseout="Out(this)">Example of inconsistent view</a></font></div>
  <div id=PPTC137 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB137 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>3 variables: A, B, C which are shared by thread
    T1 and thread T2</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>T1 computes C = A+B</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>T2 transfers amount X from A to B</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>T2 must do: A = A -X and B = B+X (so that A+B is
    unchanged)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>But if T1 computes A+B after T2 has done A = A-X
    but before B = B+X</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Then T1 will not obtain the correct result for C
    = A + B</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Must introduce concept of critical section.</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP138 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0138.htm');" onmouseover="Over(this)"
  id=PPTL138 onmouseout="Out(this)">Threads States</a></font></div>
  <div id=PPTC138 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB138 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Three key states: running, ready, blocked</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>They cannot have suspend state because all
    threads within the same process share the same address space (same memory)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Indeed: suspending (ie: swapping out) a single
    thread involves suspending all threads of the same process</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Termination of a process, terminates all threads
    within the process</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP139 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0139.htm');" onmouseover="Over(this)"
  id=PPTL139 onmouseout="Out(this)">User-Level Threads (ULT) (ex. Standard
  UNIX)</a></font></div>
  <div id=PPTC139 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB139 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The kernel is not aware of the existence of
    threads</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>All thread management is done by the application
    using a thread library</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Thread switching does not require kernel mode
    privileges (no mode switch)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Scheduling is application specific</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP140 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0140.htm');" onmouseover="Over(this)"
  id=PPTL140 onmouseout="Out(this)">Threads library</a></font></div>
  <div id=PPTC140 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB140 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Contains code for:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>creating and destroying threads</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>passing messages and data between threads</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>scheduling thread execution</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>saving and restoring thread contexts</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP141 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0141.htm');" onmouseover="Over(this)"
  id=PPTL141 onmouseout="Out(this)">Kernel activity for ULTs</a></font></div>
  <div id=PPTC141 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB141 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The kernel is not aware of thread activity but
    it still manages process activity</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>When a thread makes a system call, the whole
    process is<span style="mso-spacerun: yes">  </span>blocked</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>But for the thread library that thread is still
    in running state</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>So thread states are independent of process
    states</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP142 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0142.htm');" onmouseover="Over(this)"
  id=PPTL142 onmouseout="Out(this)">Advantages and disadvantages of ULT</a></font></div>
  <div id=PPTC142 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB142 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Advantages</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Thread switching does not involve the kernel: no
    mode switching</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Scheduling can be application specific: choose
    the best algorithm.</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Can run on any OS. Only needs a thread library</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Disadvantages</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Most system calls are blocking for processes. So
    all threads within a process will be blocked</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>The kernel can only assign processes to
    processors. Two threads within the same process cannot run simultaneously
    on two processors</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP143 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0143.htm');" onmouseover="Over(this)"
  id=PPTL143 onmouseout="Out(this)">Kernel-Level Threads (KLT) <br>
  Ex: Windows
  NT and OS/2</a></font></div>
  <div id=PPTC143 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB143 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>All thread management is done by kernel</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>No thread library but an API to the kernel
    thread facility</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Kernel maintains context information for the
    process and the threads</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Switching between threads requires the kernel</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Scheduling on a thread basis</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP144 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0144.htm');" onmouseover="Over(this)"
  id=PPTL144 onmouseout="Out(this)">Advantages and disadvantages of KLT</a></font></div>
  <div id=PPTC144 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB144 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Advantages</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>the kernel can simultaneously schedule many
    threads of the same process on many processors</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>blocking is done on a thread level</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>kernel routines can be multithreaded</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Inconveniences</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>thread switching within the same process
    involves the kernel. We have 2 mode switches per thread switch</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>this may results in a significant slow down</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>however kernel may be able to switch threads
    quicker than users lib</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP145 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0145.htm');" onmouseover="Over(this)"
  id=PPTL145 onmouseout="Out(this)">Combined ULT/KLT Approaches (Solaris)</a></font></div>
  <div id=PPTC145 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB145 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Thread creation done in the user space</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Bulk of scheduling and synchronization of
    threads done in the user space</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The programmer may adjust the number of KLTs</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Combines the best of both approaches</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP146 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0146.htm');" onmouseover="Over(this)"
  id=PPTL146 onmouseout="Out(this)">Solaris</a></font></div>
  <div id=PPTC146 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB146 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Process includes the users address space,
    stack, and process control block</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>User-level threads (threads library)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>invisible to the OS</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>are the interface for application parallelism</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Kernel threads</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>the unit that can be dispatched on a processor</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Lightweight processes (LWP)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>each LWP supports one or more ULTs and maps to
    exactly one KLT</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP147 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0147.htm');" onmouseover="Over(this)"
  id=PPTL147 onmouseout="Out(this)">Slide 147</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP148 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0148.htm');" onmouseover="Over(this)"
  id=PPTL148 onmouseout="Out(this)">Solaris: versatility</a></font></div>
  <div id=PPTC148 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB148 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>We can use ULTs when logical parallelism does
    not need to be supported by hardware parallelism (we save mode switching)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Ex: Multiple windows but only one is active at
    any one time</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>If ULT threads can block then we can add two or
    more LWPs to avoid blocking the whole application</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Note versatility of SOLARIS that can operate
    like Windows-NT or like conventional Unix</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP149 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0149.htm');" onmouseover="Over(this)"
  id=PPTL149 onmouseout="Out(this)">Solaris: user-level thread execution (threads
  library).</a></font></div>
  <div id=PPTC149 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB149 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>LWPs act as virtual processors</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Transitions among states are under the control
    of the application: they are caused by calls to the thread library</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Its only when a ULT is in the active state that
    it is attached to a LWP (so that it will run when the kernel level thread
    runs)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>A thread may transfer to the sleeping state by
    invoking a synchronization primitive (chap 5) and later transfer to the runnable
    state when the event waited for occurs</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>A thread may force another thread to go to the stop
    state</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP150 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0150.htm');" onmouseover="Over(this)"
  id=PPTL150 onmouseout="Out(this)">Solaris: user-level thread states</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP151 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0151.htm');" onmouseover="Over(this)"
  id=PPTL151 onmouseout="Out(this)">Decomposition of user-level Active state</a></font></div>
  <div id=PPTC151 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB151 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>When a ULT is Active, it is associated to a LWP
    and thus to a KLP.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Transitions among the LWP states is under the
    exclusive control of the kernel</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>A LWP can be in the following states:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>running: assigned to CPU = executing</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>blocked because the KLT issued a blocking system
    call (but the ULT remains bound to that LWP and remains active)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>runnable: waiting to be dispatched to CPU</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP152 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0152.htm');" onmouseover="Over(this)"
  id=PPTL152 onmouseout="Out(this)">Solaris: Lightweight Process States</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP153 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0153.htm');" onmouseover="Over(this)"
  id=PPTL153 onmouseout="Out(this)">Concurrency: Mutual Exclusion and
  Synchronization</a></font></div>
  <div id=PPTC153 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB153 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Chapter 5</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP154 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0154.htm');" onmouseover="Over(this)"
  id=PPTL154 onmouseout="Out(this)">Problems with concurrent execution</a></font></div>
  <div id=PPTC154 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB154 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Concurrent processes (or threads) often need to
    share data (maintained either in shared memory or files) and resources</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>If there is no controlled access to shared data,
    execution of the processes on these data can interleave.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The results will then depend on the order in
    which data were modified (nondeterminism).</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP155 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0155.htm');" onmouseover="Over(this)"
  id=PPTL155 onmouseout="Out(this)">An example</a></font></div>
  <div id=PPTC155 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB155 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Process P1 and P2 are running this same
    procedure and have access to the same variable a</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Processes can be interrupted anywhere</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>If P1 is first interrupted after user input and
    P2 executes entirely</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Then the character echoed by P1 will be the one
    read by P2 !!</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP156 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0156.htm');" onmouseover="Over(this)"
  id=PPTL156 onmouseout="Out(this)">The critical section problem</a></font></div>
  <div id=PPTC156 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB156 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>When a process executes code that manipulates
    shared data (or resource), we say that the process is in a critical section
    (CS) (for that shared data)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>CSs can be thought of as sequences of
    instructions that are tightly bound so no other instructions can
    interleave.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The execution of CSs must be mutually exclusive:
    at any time, only one process should be allowed to execute in a CS (even
    with multiple CPUs)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Then each process must request permission to
    enter its CS</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP157 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0157.htm');" onmouseover="Over(this)"
  id=PPTL157 onmouseout="Out(this)">The critical section problem</a></font></div>
  <div id=PPTC157 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB157 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The section of code implementing this request is
    called the entry section</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The critical section (CS) will be followed by an
    exit section,<span style="mso-spacerun: yes">  </span>which opens the
    possibility of other processes entering their CS.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The remaining code is the remainder section RS</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The critical section problem is to design the
    processes so that their results will not depend on the order in which their
    execution is interleaved.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Deadlock and starvation must also be prevented
    as far as possible.</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP158 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0158.htm');" onmouseover="Over(this)"
  id=PPTL158 onmouseout="Out(this)">Framework for analysis of solutions</a></font></div>
  <div id=PPTC158 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB158 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Each process executes at nonzero speed but no
    assumption on the relative speed of n processes</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>General structure of a process:</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Several CPUs may be present but memory hardware
    prevents simultaneous access to the same memory location</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>No assumption about order of interleaved
    execution</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>For solutions: we need to specify entry and exit
    sections</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP159 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0159.htm');" onmouseover="Over(this)"
  id=PPTL159 onmouseout="Out(this)">Requirements for a valid solution to the
  critical section problem</a></font></div>
  <div id=PPTC159 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB159 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Mutual Exclusion</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>At any time, at most one process can be in its
    critical section (CS)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Progress</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Only processes that are not executing in their
    RS can participate in the decision of who will enter next in the CS.</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>This selection cannot be postponed indefinitely</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP160 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0160.htm');" onmouseover="Over(this)"
  id=PPTL160 onmouseout="Out(this)">Requirements for a valid solution to the
  critical section problem</a></font></div>
  <div id=PPTC160 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB160 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Bounded Waiting</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>After a process P has made a request to enter
    its CS, there is a limit on the number of times that the other processes
    are allowed to enter their CS, before P gets it</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>otherwise the process will suffer from starvation</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>Of course also no deadlock</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP161 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0161.htm');" onmouseover="Over(this)"
  id=PPTL161 onmouseout="Out(this)">Types of solutions</a></font></div>
  <div id=PPTC161 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB161 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>No special mechanisms<span style="mso-spacerun:
    yes">  </span>(book:software appr.)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>algorithms whose correctness relies only on the
    assumption that only one process at a time can access a memory location</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Hardware solutions</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>rely on special machine instructions (e.g. Lock
    bit)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Operating System and Programming Language
    solutions (e.g. Java)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>provide specific functions and data structures
    to the programmer</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP162 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0162.htm');" onmouseover="Over(this)"
  id=PPTL162 onmouseout="Out(this)">Software solutions</a></font></div>
  <div id=PPTC162 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB162 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>We consider first the case of 2 processes</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Algorithm 1 and 2 have problems</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Algorithm 3 is correct (Petersons algorithm)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Then we generalize to n processes</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>the bakery algorithm</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Notation</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>We start with 2 processes: P0 and P1</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>When presenting process Pi, Pj always denotes
    the other process (i != j)</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP163 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0163.htm');" onmouseover="Over(this)"
  id=PPTL163 onmouseout="Out(this)">Algorithm 1</a></font></div>
  <div id=PPTC163 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB163 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The shared variable turn is initialized (to 0 or
    1) before executing any Pi</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Pis critical section is executed iff turn = i</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Pi is busy waiting if Pj is in CS: mutual
    exclusion is satisfied</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Progress requirement is not satisfied since it
    requires strict alternation of CSs.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>If a process requires its CS more often then the
    other, it<span style="mso-spacerun: yes">  </span>cant get it.</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP164 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0164.htm');" onmouseover="Over(this)"
  id=PPTL164 onmouseout="Out(this)">Slide 164</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP165 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0165.htm');" onmouseover="Over(this)"
  id=PPTL165 onmouseout="Out(this)">Algorithm 2</a></font></div>
  <div id=PPTC165 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB165 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Keep 1<span style="mso-spacerun: yes"> 
    </span>Bool variable for each process: flag[0] and flag[1]</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Pi signals that it is ready to enter its CS by:
    flag[i]:=true but waits until the other has finished its CS.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Mutual Exclusion is satisfied but not the
    progress requirement</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>If we have the sequence:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2><span style="mso-spacerun: yes"> 
    </span>flag[0]:=true</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2><span style="mso-spacerun: yes"> 
    </span>flag[1]:=true</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Both process will wait forever to enter their
    CS: no progress for excessive courtesy...</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP166 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0166.htm');" onmouseover="Over(this)"
  id=PPTL166 onmouseout="Out(this)">Slide 166</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP167 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0167.htm');" onmouseover="Over(this)"
  id=PPTL167 onmouseout="Out(this)">Race conditions</a></font></div>
  <div id=PPTC167 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB167 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Situations such as the one we have seen, where
    processes race against each other, causing possible errors, are called race
    conditions and have been widely studied.</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP168 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0168.htm');" onmouseover="Over(this)"
  id=PPTL168 onmouseout="Out(this)">Algorithm 3 (Petersons algorithm)</a></font></div>
  <div id=PPTC168 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB168 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Initialization: flag[0]:=flag[1]:=false turn:= 0
    or 1</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Willingness to enter CS specified by
    flag[i]:=true</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>If both processes attempt to enter their CS
    simultaneously, only one turn value will last</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP169 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0169.htm');" onmouseover="Over(this)"
  id=PPTL169 onmouseout="Out(this)">Slide 169</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP170 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0170.htm');" onmouseover="Over(this)"
  id=PPTL170 onmouseout="Out(this)">Algorithm 3: proof of correctness</a></font></div>
  <div id=PPTC170 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB170 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Mutual exclusion holds since:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>P0 and P1 are both in CS only if flag[0] =
    flag[1] = true and only if turn = i for each Pi (impossible)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>We now prove that the progress and bounded
    waiting requirements are satisfied:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Pi cannot enter CS only if stuck in while{} with
    condition flag[ j] = true and turn = j.</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>If Pj is not ready to enter CS then flag[ j] =
    false and Pi can then enter its CS</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP171 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0171.htm');" onmouseover="Over(this)"
  id=PPTL171 onmouseout="Out(this)">Algorithm 3: proof of correctness (cont.)</a></font></div>
  <div id=PPTC171 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB171 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>If Pj has set flag[ j]=true and is in its
    while{}, then either turn=i or turn=j</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>If turn=i, then Pi enters CS. If turn=j then Pj
    enters CS but will then reset flag[ j]=false on exit: allowing Pi to enter
    CS</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>but if Pj has time to reset flag[ j]=true, it
    must also set turn=i</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>since Pi does not change value of turn while
    stuck in while{}, Pi will enter CS after at most one CS entry by Pj
    (bounded waiting)</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP172 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0172.htm');" onmouseover="Over(this)"
  id=PPTL172 onmouseout="Out(this)">What about process failures?</a></font></div>
  <div id=PPTC172 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB172 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>If all 3 criteria (ME, progress, bounded
    waiting) are satisfied, then a valid solution will provide robustness
    against failure of a process in its remainder section (RS) since failure in
    RS is just like having an infinitely long RS.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>However, no valid solution can provide
    robustness against a process failing in its critical section (CS).</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>A process Pi that fails in its CS must signal
    this fact to other processes.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP173 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0173.htm');" onmouseover="Over(this)"
  id=PPTL173 onmouseout="Out(this)">n-process solution: bakery algorithm</a></font></div>
  <div id=PPTC173 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB173 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Before entering their CS, each Pi receives a
    number. Holder of smallest number enter CS (like in bakeries, ice-cream
    stores...)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>When Pi and Pj receive same number:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>if i&lt;j then Pi is served first, else Pj is
    served first</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Pi resets its number to 0 in the exit section</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Notation:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>(a,b) &lt; (c,d) if a &lt; c or if a = c and b
    &lt; d</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>max(a0,...ak) is a number b such that</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>b &gt;= ai for i=0,..k</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP174 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0174.htm');" onmouseover="Over(this)"
  id=PPTL174 onmouseout="Out(this)">The bakery algorithm (cont.)</a></font></div>
  <div id=PPTC174 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB174 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Shared data:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>choosing: array[0..n-1] of boolean;</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>initialized to false</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>number: array[0..n-1] of integer;</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>initialized to 0</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Correctness relies on the following fact:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>If Pi is in CS and Pk has already chosen its
    number[k]!= 0, then (number[i],i) &lt; (number[k],k)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>but the proof is somewhat tricky...</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP175 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0175.htm');" onmouseover="Over(this)"
  id=PPTL175 onmouseout="Out(this)">The bakery algorithm (cont.)</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP176 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0176.htm');" onmouseover="Over(this)"
  id=PPTL176 onmouseout="Out(this)">Drawbacks of software solutions</a></font></div>
  <div id=PPTC176 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB176 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Complicated to program!</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Processes that are requesting to enter in their
    critical section are busy waiting (consuming processor time needlessly)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>If CSs are long, it would be more efficient to block
    processes that are waiting<span style="mso-spacerun: yes">  </span>(just as
    if they had requested I/O).</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP177 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0177.htm');" onmouseover="Over(this)"
  id=PPTL177 onmouseout="Out(this)">Hardware solutions: interrupt disabling</a></font></div>
  <div id=PPTC177 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB177 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>On a uniprocessor: mutual exclusion is preserved
    but efficiency of execution is degraded: while in CS, we cannot interleave
    execution with other processes that are in RS</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>On a multiprocessor: mutual exclusion is not
    achieved</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Generally not an acceptable solution</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP178 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0178.htm');" onmouseover="Over(this)"
  id=PPTL178 onmouseout="Out(this)">Hardware solutions: special machine
  instructions</a></font></div>
  <div id=PPTC178 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB178 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Normally, access to a memory location excludes
    other access to that same location</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Extension: machine instructions that perform 2
    actions atomically (indivisible) on the same memory location (ex: reading
    and testing)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The execution of such an instruction is mutually
    exclusive (even with multiple CPUs)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>They can be used simply to provide mutual
    exclusion but need more complex algorithms for satisfying the 3
    requirements of the CS problem</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP179 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0179.htm');" onmouseover="Over(this)"
  id=PPTL179 onmouseout="Out(this)">The test-and-set instruction</a></font></div>
  <div id=PPTC179 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB179 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>A C++<span style="mso-spacerun: yes"> 
    </span>description of test-and-set:</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>An algorithm that uses testset for Mutual
    Exclusion:</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Shared variable b is initialized to 0</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Only the first Pi who sets b enter CS</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP180 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0180.htm');" onmouseover="Over(this)"
  id=PPTL180 onmouseout="Out(this)">The test-and-set instruction (cont.)</a></font></div>
  <div id=PPTC180 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB180 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Mutual exclusion is assured: if Pi enter CS, the
    other Pj are busy waiting</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>When Pi exit CS, the selection of the Pj who
    will enter CS is arbitrary: no bounded waiting. Hence starvation is
    possible</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Processors (ex: Pentium) often provide an atomic
    xchg(a,b) instruction that swaps the content of a and b.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>But xchg(a,b) suffers from the same drawbacks as
    test-and-set</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP181 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0181.htm');" onmouseover="Over(this)"
  id=PPTL181 onmouseout="Out(this)">Using xchg for mutual exclusion</a></font></div>
  <div id=PPTC181 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB181 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Shared variable lock is initialized to 0</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Each Pi has a local variable key</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The only Pi that can enter CS is the one who
    finds lock=0</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>This Pi excludes all the other Pj by setting
    lock to 1</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP182 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0182.htm');" onmouseover="Over(this)"
  id=PPTL182 onmouseout="Out(this)">Operating systems/ Progr. Lang.
  instructions</a></font></div>
  <div id=PPTC182 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB182 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Solutions exclusively based on machine
    instructions such as test and set may lead to unreadable code.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>We need instructions allowing to better
    structure code.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>We also need better facilities for preventing
    common errors, such as deadlocks, starvation, etc.</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP183 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0183.htm');" onmouseover="Over(this)"
  id=PPTL183 onmouseout="Out(this)">Semaphores</a></font></div>
  <div id=PPTC183 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB183 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>A semaphore S is an integer variable that, apart
    from initialization, can only be accessed through 2 atomic and mutually
    exclusive operations:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>wait(S)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>signal(S)</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP184 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0184.htm');" onmouseover="Over(this)"
  id=PPTL184 onmouseout="Out(this)">Busy Waiting Semaphores</a></font></div>
  <div id=PPTC184 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB184 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The simplest way to implement semaphores.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Useful when critical sections last for a short
    time, or we have lots of CPUs.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>S initialized to positive value (to allow
    someone in at the beginning).</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP185 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0185.htm');" onmouseover="Over(this)"
  id=PPTL185 onmouseout="Out(this)">Atomicity aspects</a></font></div>
  <div id=PPTC185 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB185 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The testing and decrementing sequence in wait
    are atomic, but not the loop.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Signal is atomic.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>No two processes can be allowed to execute
    atomic sections simultaneously.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>This can be implemented by other mechanisms,
    such as test-and-set.</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP186 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0186.htm');" onmouseover="Over(this)"
  id=PPTL186 onmouseout="Out(this)">Using semaphores for solving critical
  section problems</a></font></div>
  <div id=PPTC186 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB186 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>For n processes</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Initialize S to 1</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Then only 1 process is allowed into CS (mutual
    exclusion)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>To allow k processes into CS, we initialize S to
    k</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP187 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0187.htm');" onmouseover="Over(this)"
  id=PPTL187 onmouseout="Out(this)">Slide 187</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP188 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0188.htm');" onmouseover="Over(this)"
  id=PPTL188 onmouseout="Out(this)">Using semaphores to synchronize processes</a></font></div>
  <div id=PPTC188 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB188 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>We have 2 processes: P1 and P2</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Statement S1 in P1 needs to be performed before
    statement S2 in P2</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Then define a semaphore synch</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Initialize synch to 0</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Proper synchronization is achieved by having in
    P1:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>S1;</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>signal(synch);</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>And having in P2:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>wait(synch);</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>S2;</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP189 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0189.htm');" onmouseover="Over(this)"
  id=PPTL189 onmouseout="Out(this)">Semaphores: observations</a></font></div>
  <div id=PPTC189 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB189 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>When S&gt;=0:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>the number of processes that can execute wait(S)
    without being blocked = S</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>S processes can enter CS</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>When S&lt;0: the number of processes waiting on
    S is = |S|</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>When S becomes &gt;=0, the process that enters
    in the CS is the one that tests S first (random selection).</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP190 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0190.htm');" onmouseover="Over(this)"
  id=PPTL190 onmouseout="Out(this)">Avoiding Busy Wait in Semaphores</a></font></div>
  <div id=PPTC190 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB190 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>To avoid busy waiting: when a process has to
    wait for a semaphore to become greater than 0, it will be put in a blocked
    queue of processes waiting for this to happen.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Queues can be FIFO, priority, etc.: OS has
    control on the order processes enter CS.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>In practice, wait and signal become system calls
    to the OS (such as I/O), which contains the semaphore implementation.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>There is a queue for every semaphore just as
    there is a queue for each I/O unit.</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP191 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0191.htm');" onmouseover="Over(this)"
  id=PPTL191 onmouseout="Out(this)">Semaphores without busy waiting</a></font></div>
  <div id=PPTC191 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB191 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>A semaphore can be seen as a record (structure):</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>When a process must wait for a semaphore S, it
    is blocked and put on the semaphores queue</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The signal operation removes (by a fair policy
    like FIFO) one process from the queue and puts it in the list of ready
    processes</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP192 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0192.htm');" onmouseover="Over(this)"
  id=PPTL192 onmouseout="Out(this)">Semaphores operations (atomic)</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP193 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0193.htm');" onmouseover="Over(this)"
  id=PPTL193 onmouseout="Out(this)">Semaphores: Implementation</a></font></div>
  <div id=PPTC193 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB193 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>wait and signal themselves contain critical
    sections! How to implement them?</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Note that they are very short critical sections.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Solutions:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>uniprocessor: disable interrupts during these
    operations (ie: for a very short period). This does not work on a
    multiprocessor machine.</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>multiprocessor: use some busy waiting scheme.
    Busy waiting shouldnt last long.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP194 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0194.htm');" onmouseover="Over(this)"
  id=PPTL194 onmouseout="Out(this)">The producer/consumer problem</a></font></div>
  <div id=PPTC194 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB194 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>A producer process produces information that is
    consumed by a consumer process</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Ex1: a print program produces characters that
    are consumed by a printer</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Ex2: an assembler produces object modules that
    are consumed by a loader</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>We need a buffer to hold items that are produced
    and eventually consumed</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>A common paradigm for cooperating processes</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP195 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0195.htm');" onmouseover="Over(this)"
  id=PPTL195 onmouseout="Out(this)">P/C: unbounded buffer</a></font></div>
  <div id=PPTC195 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB195 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>We assume first an unbounded buffer<span
    style="mso-spacerun: yes">  </span>consisting of a linear array of elements</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>in points to the next item to be produced</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>out points to the next item to be consumed</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP196 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0196.htm');" onmouseover="Over(this)"
  id=PPTL196 onmouseout="Out(this)">P/C: unbounded buffer</a></font></div>
  <div id=PPTC196 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB196 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>We need a semaphore S to perform mutual
    exclusion on the buffer: only 1 process at a time can access the buffer</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>We need another semaphore N to synchronize
    producer and consumer on the number N (= in - out) of items in the buffer</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>an item can be consumed only after it has been
    created</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP197 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0197.htm');" onmouseover="Over(this)"
  id=PPTL197 onmouseout="Out(this)">P/C: unbounded buffer</a></font></div>
  <div id=PPTC197 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB197 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The producer is free to add an item into the
    buffer at any time: it performs wait(S) before appending and signal(S)
    afterwards<span style="mso-spacerun: yes">  </span>to prevent customer
    access</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>It also performs signal(N) after each append to
    increment N</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The consumer must first do wait(N) to see if
    there is an item to consume and use wait(S)/signal(S) to access the buffer</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP198 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0198.htm');" onmouseover="Over(this)"
  id=PPTL198 onmouseout="Out(this)">Solution of P/C: unbounded buffer</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP199 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0199.htm');" onmouseover="Over(this)"
  id=PPTL199 onmouseout="Out(this)">P/C: unbounded buffer</a></font></div>
  <div id=PPTC199 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB199 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Remarks:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>check that producer can run arbitrarily faster
    than consumer</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Putting signal(N) inside the CS of the producer
    (instead of outside) has no effect since the consumer must always wait for
    both semaphores before proceeding</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>The consumer must perform wait(N) before
    wait(S), otherwise deadlock occurs if consumer enters CS while the buffer
    is empty</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>disaster will occur if one forgets to do a
    signal after a wait, eg. if a producer has an unending loop inside a
    critical section.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Using semaphores has pitfalls...</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP200 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0200.htm');" onmouseover="Over(this)"
  id=PPTL200 onmouseout="Out(this)">P/C: finite circular buffer of size k</a></font></div>
  <div id=PPTC200 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB200 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>can consume only when number N of (consumable)
    items is at least 1 (now: N!=in-out)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>can produce only when number E of empty spaces
    is at least 1</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP201 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0201.htm');" onmouseover="Over(this)"
  id=PPTL201 onmouseout="Out(this)">P/C: finite circular buffer of size k</a></font></div>
  <div id=PPTC201 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB201 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>As before:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>we need a semaphore S to have mutual exclusion
    on buffer access</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>we need a semaphore N to synchronize producer
    and consumer on the number of consumable items (full spaces)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>In addition:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>we need a semaphore E to synchronize producer
    and consumer on the number of empty spaces</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP202 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0202.htm');" onmouseover="Over(this)"
  id=PPTL202 onmouseout="Out(this)">Solution of P/C: finite circular buffer of
  size k</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP203 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0203.htm');" onmouseover="Over(this)"
  id=PPTL203 onmouseout="Out(this)">The Dining Philosophers Problem (p. 270)</a></font></div>
  <div id=PPTC203 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB203 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>5 philosophers who only eat and think</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>each need to use 2 forks for eating</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>we have only 5 forks</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>A classical synchron. problem</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Illustrates the difficulty of allocating
    resources among process without deadlock and starvation</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP204 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0204.htm');" onmouseover="Over(this)"
  id=PPTL204 onmouseout="Out(this)">The Dining Philosophers Problem</a></font></div>
  <div id=PPTC204 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB204 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Each philosopher is a process</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>One semaphore per fork:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>fork: array[0..4] of semaphores</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Initialization: fork[i].count:=1 for i:=0..4</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>A first attempt:</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Deadlock if each philosopher start by picking
    his left fork!</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP205 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0205.htm');" onmouseover="Over(this)"
  id=PPTL205 onmouseout="Out(this)">The Dining Philosophers Problem</a></font></div>
  <div id=PPTC205 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB205 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>A solution: admit only 4 philosophers at a time
    that tries to eat</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Then 1 philosopher can always eat when the other
    3 are holding 1 fork</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Hence, we can use another semaphore T that would
    limit at 4 the numb. of philosophers sitting at the table</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Initialize: T.count:=4</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP206 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0206.htm');" onmouseover="Over(this)"
  id=PPTL206 onmouseout="Out(this)">Binary semaphores</a></font></div>
  <div id=PPTC206 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB206 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>The semaphores we have studied are called
    counting (or integer) semaphores</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>We have also binary semaphores</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>similar to counting semaphores except that
    count is Boolean valued</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>perhaps simpler to implement</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>can do anything counting semaphores can do</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>more difficult to use than counting semaphores:
    must use additional counting variables protected by binary semaphores.</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP207 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0207.htm');" onmouseover="Over(this)"
  id=PPTL207 onmouseout="Out(this)">Binary semaphores</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP208 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0208.htm');" onmouseover="Over(this)"
  id=PPTL208 onmouseout="Out(this)">Conclusions on semaphores</a></font></div>
  <div id=PPTC208 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB208 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Semaphores provide a structured tool for
    enforcing mutual exclusion and coordinate processes.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Avoid busy wait, but not completely.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>If used correctly, avoid deadlock and
    starvation.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>But if wait(S) and signal(S) are scattered among
    several processes it may be<span style="mso-spacerun: yes"> 
    </span>difficult to use them correctly</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Usage must be correct in all processes</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>One bad (or malicious) process can fail the
    entire collection of processes, cause deadlock, starvation.</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP209 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0209.htm');" onmouseover="Over(this)"
  id=PPTL209 onmouseout="Out(this)">Monitors</a></font></div>
  <div id=PPTC209 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB209 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Are high-level language constructs that provide
    equivalent functionality to that of semaphores but are easier to control</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Found in many concurrent programming languages</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>Concurrent Pascal, Modula-3, uC++, Java</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Very appropriate for OO programming</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>However each language has own dialect</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP210 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0210.htm');" onmouseover="Over(this)"
  id=PPTL210 onmouseout="Out(this)">Monitor</a></font></div>
  <div id=PPTC210 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB210 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Is a software module containing:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>one or more procedures</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>an initialization sequence</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>local data variables</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Characteristics:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>local variables accessible only by monitors
    procedures</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>a process enters the monitor by invoking one of
    its procedures</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>only one process can be in the monitor at any
    given time</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP211 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0211.htm');" onmouseover="Over(this)"
  id=PPTL211 onmouseout="Out(this)">Monitor</a></font></div>
  <div id=PPTC211 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB211 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>The monitor ensures mutual exclusion: no need to
    program this constraint explicitly</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Hence, shared data are protected by placing them
    in the monitor</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>The monitor locks the shared data on process
    entry, assures sequential use.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Process synchronization is done by the
    programmer by using condition variables that represent conditions a process
    may need to wait for before executing in the monitor</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP212 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0212.htm');" onmouseover="Over(this)"
  id=PPTL212 onmouseout="Out(this)">Condition variables</a></font></div>
  <div id=PPTC212 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB212 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>are local to the monitor (accessible only within
    the monitor)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>can be access and changed only by two functions:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>cwait(a): blocks execution of the calling
    process on condition (variable) a</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>process can resume execution only if another
    process executes csignal(a)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>csignal(a): resume execution of some process
    blocked on condition (variable) a.</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>If several such process exists: choose any one
    (fifo or priority)</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>If no such process exists: do nothing</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP213 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0213.htm');" onmouseover="Over(this)"
  id=PPTL213 onmouseout="Out(this)">Monitor</a></font></div>
  <div id=PPTC213 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB213 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Awaiting processes are either in the entrance
    queue or in a condition queue</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>A process puts itself into condition queue cn by
    issuing cwait(cn)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>csignal(cn) brings into the monitor 1 process in
    condition cn queue</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Hence csignal(cn) blocks the calling process and
    puts it in the urgent queue (unless csignal is the last operation of the
    monitor procedure)</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP214 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0214.htm');" onmouseover="Over(this)"
  id=PPTL214 onmouseout="Out(this)">Producer/Consumer problem</a></font></div>
  <div id=PPTC214 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB214 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Two processes:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>producer</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>consumer</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Synchronization is now confined within the
    monitor</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>append(.) and take(.) are procedures within the
    monitor: are the only means by which P/C can access the buffer</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>If these procedures are correct, synchronization
    will be correct for all participating processes</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Easy to generalize to n processes.</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP215 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0215.htm');" onmouseover="Over(this)"
  id=PPTL215 onmouseout="Out(this)">Monitor for the bounded P/C problem</a></font></div>
  <div id=PPTC215 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB215 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Monitor needs to hold the buffer:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>buffer: array[0..k-1] of items;</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>needs two condition variables:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>notfull: csignal(notfull) means that buffer not
    full</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>notempty: csignal(notempty) means that buffer
    not empty</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>needs buffer pointers and counts:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>nextin: points to next item to be appended</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>nextout: points to next item to be taken</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>count: holds the number of items in buffer</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP216 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0216.htm');" onmouseover="Over(this)"
  id=PPTL216 onmouseout="Out(this)">Monitor for the bounded P/C problem</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP217 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0217.htm');" onmouseover="Over(this)"
  id=PPTL217 onmouseout="Out(this)">Note simpler, more structured code with
  monitors (wrt semaphores).<br>
  <br>
  However, semaphores can be used to
  implement monitors.</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP218 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0218.htm');" onmouseover="Over(this)"
  id=PPTL218 onmouseout="Out(this)">Message Passing</a></font></div>
  <div id=PPTC218 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB218 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Is a general method used for interprocess
    communication (IPC)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>for processes inside the same computer</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>for processes in a distributed system</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Yet another mean to provide process
    synchronization and mutual exclusion</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>We have at least two primitives:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>send(destination, message)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>receive(source, message)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>In both cases, the process may or may not be
    blocked</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP219 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0219.htm');" onmouseover="Over(this)"
  id=PPTL219 onmouseout="Out(this)">Synchronization in message passing</a></font></div>
  <div id=PPTC219 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB219 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>For the sender: it is more natural not to be
    blocked after issuing send(.,.)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>can send several messages to multiple dest.</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>but sender usually expect acknowledgment of
    message receipt (in case receiver fails)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>For the receiver: it is more natural to be
    blocked after issuing receive(.,.)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>the receiver usually needs the info before
    proceeding</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>but could be blocked indefinitely if sender
    process fails before send(.,.)</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP220 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0220.htm');" onmouseover="Over(this)"
  id=PPTL220 onmouseout="Out(this)">Synchronization in message passing</a></font></div>
  <div id=PPTC220 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB220 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Hence other possibilities are sometimes offered</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Ex: blocking send, blocking receive:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>both are blocked until the message is received</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>occurs when the communication link is unbuffered
    (no message queue)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>provides tight synchronization (rendez-vous)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Indefinite blocking can be avoided by the use of
    timeouts.</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP221 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0221.htm');" onmouseover="Over(this)"
  id=PPTL221 onmouseout="Out(this)">Addressing in message passing</a></font></div>
  <div id=PPTC221 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB221 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>direct addressing:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>when a specific process identifier is used for
    source/destination</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>but it might be impossible to specify the source
    ahead of time (ex: a print server)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>indirect addressing (more convenient):</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>messages are sent to a shared mailbox which
    consists of a queue of messages</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>senders place messages in the mailbox, receivers
    pick them up</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP222 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0222.htm');" onmouseover="Over(this)"
  id=PPTL222 onmouseout="Out(this)">Mailboxes and Ports</a></font></div>
  <div id=PPTC222 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB222 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>A mailbox can be private to one sender/receiver
    pair</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>The same mailbox can be shared among several
    senders and receivers</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>the OS may then allow the use of message types
    (for selection)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Port: is a mailbox associated with one receiver
    and multiple senders</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>used for client/server applications: the
    receiver is the server</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP223 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0223.htm');" onmouseover="Over(this)"
  id=PPTL223 onmouseout="Out(this)">Ownership of ports and mailboxes</a></font></div>
  <div id=PPTC223 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB223 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>A port is usually owned and created by the
    receiving process</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The port is destroyed when the receiver
    terminates</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The OS creates a mailbox on behalf of a process
    (which becomes the owner)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The mailbox is destroyed at the owners request
    or when the owner terminates</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP224 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0224.htm');" onmouseover="Over(this)"
  id=PPTL224 onmouseout="Out(this)">Message format</a></font></div>
  <div id=PPTC224 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB224 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Consists of header and<span style="mso-spacerun:
    yes">  </span>body of message</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>In Unix: no ID, only message type</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>control info:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>what to do if run out of buffer space</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>sequence numbers</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>priority...</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Queuing discipline: varying: FIFO or can also
    include priorities</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP225 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0225.htm');" onmouseover="Over(this)"
  id=PPTL225 onmouseout="Out(this)">Enforcing mutual exclusion with message
  passing</a></font></div>
  <div id=PPTC225 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB225 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>create<span style="mso-spacerun: yes">  </span>a
    mailbox mutex shared by n processes</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>send() is non blocking</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>receive() blocks when mutex is empty</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Initialization: send(mutex, go);</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The first Pi who executes receive() will enter
    CS. Others will be blocked until Pi resends msg.</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP226 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0226.htm');" onmouseover="Over(this)"
  id=PPTL226 onmouseout="Out(this)">The Global View</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP227 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0227.htm');" onmouseover="Over(this)"
  id=PPTL227 onmouseout="Out(this)">The bounded-buffer P/C problem with message
  passing</a></font></div>
  <div id=PPTC227 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB227 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>We will now make use of messages</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The producer place items (inside messages) in
    the mailbox mayconsume</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>mayconsume acts as our buffer: consumer can
    consume item when at least one message is present</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Mailbox mayproduce is filled initially with k
    null messages (k= buffer size)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The size of mayproduce shrinks with each
    production and grows with each consumption</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>can support multiple producers/consumers</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP228 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0228.htm');" onmouseover="Over(this)"
  id=PPTL228 onmouseout="Out(this)">The bounded-buffer P/C problem with message
  passing</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP229 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0229.htm');" onmouseover="Over(this)"
  id=PPTL229 onmouseout="Out(this)">Conclusions on synchro. mechanisms</a></font></div>
  <div id=PPTC229 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB229 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>A variety of methods exist, and each method has
    different variations.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The most commonly used are semaphores, monitors,
    and message passing.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Monitors and message passing are the easiest to
    use, closest to programmers needs.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The simpler mechanisms can be used to implement
    more sophisticated ones.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>No mechanism prevents in principle deadlocks,
    starvation, or busy waiting but more sophisticated mechanisms make it
    easier to avoid them.</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP230 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0230.htm');" onmouseover="Over(this)"
  id=PPTL230 onmouseout="Out(this)">Unix SVR4 concurrency mechanisms</a></font></div>
  <div id=PPTC230 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB230 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>To communicate data across processes:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Pipes</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Messages</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Shared memory</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>To trigger actions by other processes:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Signals</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Semaphores</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP231 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0231.htm');" onmouseover="Over(this)"
  id=PPTL231 onmouseout="Out(this)">Unix Pipes</a></font></div>
  <div id=PPTC231 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB231 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>A shared bounded FIFO queue written by one
    process and read by another</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>based on the producer/consumer model</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>OS enforces Mutual Exclusion: only one process
    at a time can access the pipe</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>if there is not enough room to write, the
    producer is blocked, else he writes</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>consumer is blocked if attempting to read more
    bytes that are currently in the pipe</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>accessed by a file descriptor, like an ordinary
    file</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>processes sharing the pipe are unaware of each
    others existence</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP232 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0232.htm');" onmouseover="Over(this)"
  id=PPTL232 onmouseout="Out(this)">Unix Messages</a></font></div>
  <div id=PPTC232 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB232 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>A process can create or access a message queue
    (like a mailbox) with the msgget system call.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>msgsnd and msgrcv system calls are used to send
    and receive messages to a queue</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>There is a type field in message headers</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>FIFO access within each message type</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>each type defines a communication channel</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Process is blocked (put asleep) when:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>trying to receive from an empty queue</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>trying to send to a full queue</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP233 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0233.htm');" onmouseover="Over(this)"
  id=PPTL233 onmouseout="Out(this)">Shared memory in Unix</a></font></div>
  <div id=PPTC233 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB233 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>A block of virtual memory shared by multiple
    processes</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The shmget system call creates a new region of
    shared memory or return an existing one</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>A process attaches a shared memory region to its
    virtual address space with the shmat system call</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Mutual exclusion must be provided by processes
    using the shared memory</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Fastest form of IPC provided by Unix</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP234 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0234.htm');" onmouseover="Over(this)"
  id=PPTL234 onmouseout="Out(this)">Unix signals</a></font></div>
  <div id=PPTC234 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB234 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Similar to hardware interrupts without
    priorities</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Each signal is represented by a numeric value.
    Ex:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>02, SIGINT: to interrupt a process</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>09, SIGKILL: to terminate a process</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Each signal is maintained as a single bit in the
    process table entry of the receiving process: the bit is set when the
    corresponding signal arrives (no waiting queues)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>A signal is processed as soon as the process
    runs in user mode</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>A default action (eg: termination) is performed
    unless a signal handler function is provided for that signal (by using the signal
    system call)</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP235 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0235.htm');" onmouseover="Over(this)"
  id=PPTL235 onmouseout="Out(this)">Unix Semaphores</a></font></div>
  <div id=PPTC235 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB235 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Are a generalization of the counting semaphores
    (more operations are permitted).</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>A semaphore includes:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>the current value S of the semaphore</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>number of processes waiting for S to increase</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>number of processes waiting for S to be 0</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>We have queues of processes that are blocked on
    a semaphore</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>The system call semget creates an array of
    semaphores</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>The system call semop performs a list of
    operations: one on each semaphore (atomically)</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP236 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0236.htm');" onmouseover="Over(this)"
  id=PPTL236 onmouseout="Out(this)">Unix Semaphores</a></font></div>
  <div id=PPTC236 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB236 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Each operation to be done is specified by a
    value sem_op.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Let S be the semaphore value</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>if sem_op &gt; 0:</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>S is incremented and process awaiting for S to
    increase are awaken</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>if sem_op = 0:</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>If S=0: do nothing</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>if S!=0, block the current<span
    style="mso-spacerun: yes">  </span>process on the event that S=0</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP237 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0237.htm');" onmouseover="Over(this)"
  id=PPTL237 onmouseout="Out(this)">Unix Semaphores</a></font></div>
  <div id=PPTC237 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB237 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>if sem_op &lt; 0 and |sem_op| &lt;= S:</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>set S:= S + sem_op (ie: S decreases)</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>then if S=0: awake processes waiting for S=0</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>if sem_op &lt; 0 and |sem_op| &gt; S:</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>current process is blocked on the event that S
    increases</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Hence: flexibility in usage (many operations are
    permitted)</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP238 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0238.htm');" onmouseover="Over(this)"
  id=PPTL238 onmouseout="Out(this)">Slide 238</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP239 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0239.htm');" onmouseover="Over(this)"
  id=PPTL239 onmouseout="Out(this)">Memory Management</a></font></div>
  <div id=PPTC239 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB239 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Chapter 7</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP240 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0240.htm');" onmouseover="Over(this)"
  id=PPTL240 onmouseout="Out(this)">Two fundamental concepts (p. 311)</a></font></div>
  <div id=PPTC240 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB240 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Linking.<span style="mso-spacerun: yes"> 
    </span>We bind together the different parts of a program in order to make
    them into a runnable entity - Linkage editor</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>static (before execution)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>dynamic (on demand during execution)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>note: parts of program = modules = segments</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Loading. Program is put, whole or in part, ready
    to execute. May involve address translation.</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>static, dynamic</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP241 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0241.htm');" onmouseover="Over(this)"
  id=PPTL241 onmouseout="Out(this)">Linking: intermodule addressing</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP242 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0242.htm');" onmouseover="Over(this)"
  id=PPTL242 onmouseout="Out(this)">Aspects of loading</a></font></div>
  <div id=PPTC242 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB242 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Finding free memory for load module: could be
    contiguous or not contiguous</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Translate program addresses with respect to
    memory addresses where module is loaded</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP243 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0243.htm');" onmouseover="Over(this)"
  id=PPTL243 onmouseout="Out(this)">Loading (here not contiguous)</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP244 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0244.htm');" onmouseover="Over(this)"
  id=PPTL244 onmouseout="Out(this)">Linking and Loading</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP245 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0245.htm');" onmouseover="Over(this)"
  id=PPTL245 onmouseout="Out(this)">Memory Management</a></font></div>
  <div id=PPTC245 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB245 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Is the task carried out by the OS and hardware
    to accommodate several programs in main memory</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>If only a few programs can be kept in main
    memory, then much of the time all processes will be waiting for I/O and the
    CPU will be idle</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Hence, memory needs to be allocated efficiently
    in order to pack as many programs into memory as possible</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP246 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0246.htm');" onmouseover="Over(this)"
  id=PPTL246 onmouseout="Out(this)">Memory Management</a></font></div>
  <div id=PPTC246 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB246 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>In most schemes, the kernel occupies some fixed
    portion of main memory</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>the rest is shared by other programs</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP247 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0247.htm');" onmouseover="Over(this)"
  id=PPTL247 onmouseout="Out(this)">Memory Management Requirements</a></font></div>
  <div id=PPTC247 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB247 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Relocation</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>programmer cannot know where the program will be
    loaded in memory when it is executed</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>a program may be (often) relocated in main
    memory due to swapping</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>swapping enables the OS to have a larger pool of
    ready-to-execute processes</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>memory references in code (for both instructions
    and data) must be translated to actual physical memory addresses</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP248 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0248.htm');" onmouseover="Over(this)"
  id=PPTL248 onmouseout="Out(this)">Memory Management Requirements</a></font></div>
  <div id=PPTC248 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB248 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Protection</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>processes should not be able to reference memory
    locations in another process without permission</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>impossible to check addresses at compile time in
    programs since the program could be relocated</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>address references must be checked at run time
    by hardware</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP249 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0249.htm');" onmouseover="Over(this)"
  id=PPTL249 onmouseout="Out(this)">Memory Management Requirements</a></font></div>
  <div id=PPTC249 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB249 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Sharing</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>must allow several processes to access a common
    portion of data or program without compromising protection</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>cooperating processes may need to share access
    to the same data structure</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>better to allow each process to access the same
    copy of the program rather than have their own separate copy</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP250 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0250.htm');" onmouseover="Over(this)"
  id=PPTL250 onmouseout="Out(this)">Memory Management Requirements</a></font></div>
  <div id=PPTC250 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB250 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Logical Organization</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>users write programs in modules with different
    characteristics</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>program modules may be execute-only (reentrant)</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>data modules are either read-only or read/write</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>some modules are private others are public</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP251 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0251.htm');" onmouseover="Over(this)"
  id=PPTL251 onmouseout="Out(this)">Memory Management Requirements</a></font></div>
  <div id=PPTC251 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB251 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Physical Organization</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>Memory hierarchy: there are several types of
    secondary memory: from slow and large to small and fast.</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>secondary memory is the long term store for
    programs and data while main memory holds program and data currently in use</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>moving information between levels of memory is a
    major concern of memory and file management (OS)</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>as much as possible, the application programmer
    should be relieved of this responsibility.</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP252 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0252.htm');" onmouseover="Over(this)"
  id=PPTL252 onmouseout="Out(this)">Physical and virtual memory</a></font></div>
  <div id=PPTC252 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB252 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Physical memory: the main memory (RAM) of the
    computer</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Virtual memory: the address space of a program:
    can be much larger (or much smaller) than the physical memory.</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP253 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0253.htm');" onmouseover="Over(this)"
  id=PPTL253 onmouseout="Out(this)">Simple Memory Management</a></font></div>
  <div id=PPTC253 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB253 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>In this chapter we study the case where virtual
    memory is projected in simple fashion on physical memory</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>normally, this implies that virtual memory is
    smaller than physical memory and the program is fully loaded for execution
    (but see overlays)..</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>program = process.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Although the following simple memory management
    techniques are not much used in modern OS, conceptually they are important</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>fixed partitioning</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>dynamic partitioning</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>simple paging</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>simple segmentation</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP254 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0254.htm');" onmouseover="Over(this)"
  id=PPTL254 onmouseout="Out(this)">Overlays</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP255 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0255.htm');" onmouseover="Over(this)"
  id=PPTL255 onmouseout="Out(this)">Fixed Partitioning</a></font></div>
  <div id=PPTC255 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB255 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Partition main memory into a set of non
    overlapping regions called partitions</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Partitions can be of equal or unequal sizes</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP256 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0256.htm');" onmouseover="Over(this)"
  id=PPTL256 onmouseout="Out(this)">Fixed Partitioning</a></font></div>
  <div id=PPTC256 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB256 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>any program whose size is less than or equal to
    a<span style="mso-spacerun: yes">  </span>partition size can be loaded into
    the partition</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>if all partitions are occupied, the operating
    system can swap a process out of a partition</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>a program may be too large to fit in a
    partition.<span style="mso-spacerun: yes">  </span>The programmer must then
    design the program with overlays</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>when the module needed is not present the user
    program must load that module into the programs partition, overlaying
    whatever program or data are there</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP257 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0257.htm');" onmouseover="Over(this)"
  id=PPTL257 onmouseout="Out(this)">Fixed Partitioning</a></font></div>
  <div id=PPTC257 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB257 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Main memory use is inefficient.<span
    style="mso-spacerun: yes">  </span>Any program, no matter how small,
    occupies an entire partition.<span style="mso-spacerun: yes">  </span>This
    is called internal fragmentation.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Unequal-size partitions lessens these problems
    but they still remain...</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Equal-size partitions was used in early IBMs
    OS/MFT (Multiprogramming with a Fixed number of Tasks)</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP258 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0258.htm');" onmouseover="Over(this)"
  id=PPTL258 onmouseout="Out(this)">Placement Algorithm with Partitions</a></font></div>
  <div id=PPTC258 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB258 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Equal-size partitions</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>If there is an available partition, a program
    can be loaded into that partition</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>because all partitions are of equal size, it
    does not matter which partition is used</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>If all partitions are occupied by blocked
    processes, choose one program to swap out to make room for a new program</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP259 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0259.htm');" onmouseover="Over(this)"
  id=PPTL259 onmouseout="Out(this)">Placement Algorithm with Partitions</a></font></div>
  <div id=PPTC259 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB259 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Unequal-size partitions: use of multiple queues</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>assign each program to the smallest partition
    within which it will fit</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>A queue for each partition size</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>tries to minimize internal fragmentation</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Problem: some queues will be empty if no program
    within a size range is present</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP260 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0260.htm');" onmouseover="Over(this)"
  id=PPTL260 onmouseout="Out(this)">Placement Algorithm with Partitions</a></font></div>
  <div id=PPTC260 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB260 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Unequal-size partitions: use of a single queue</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>When its time to load a process into main memory
    the smallest available partition that will hold the program is selected</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>increases the level of multiprogramming possibly
    at the expense of internal fragmentation</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP261 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0261.htm');" onmouseover="Over(this)"
  id=PPTL261 onmouseout="Out(this)">Dynamic Partitioning</a></font></div>
  <div id=PPTC261 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB261 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Partitions are of variable length and number</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Each program is allocated exactly as much memory
    as it requires</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Eventually holes are formed in main memory. This
    is called external fragmentation</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Periodically, must use compaction to shift
    programs so they are contiguous and all free memory is in one block</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Used in IBMs OS/MVT (Multiprogramming with a
    Variable number of Tasks)</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP262 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0262.htm');" onmouseover="Over(this)"
  id=PPTL262 onmouseout="Out(this)">Dynamic Partitioning: an example</a></font></div>
  <div id=PPTC262 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB262 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>A hole of 64K is left after loading 3 programs:
    not enough room for program 4 of 128K.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Eventually all 3 processes are blocked, the OS
    can swap out program 2 (closest fit) to bring in program 4 = 128K</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP263 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0263.htm');" onmouseover="Over(this)"
  id=PPTL263 onmouseout="Out(this)">Dynamic Partitioning: an example</a></font></div>
  <div id=PPTC263 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB263 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Program 2 is suspended, a hole of 224-128=96K is
    created (external fragmentation)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Suppose that all programs become blocked. The OS
    may suspend program 1 to bring in again program 2 and another hole of
    320-224=96K is created...</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>We have 3 small and probably useless holes.
    Compaction would produce a single hole of 96+96+64=256K</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP264 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0264.htm');" onmouseover="Over(this)"
  id=PPTL264 onmouseout="Out(this)">Placement Algorithm</a></font></div>
  <div id=PPTC264 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB264 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Used to decide which free block to allocate to a
    program</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Goal: to reduce usage of compaction (time
    consuming)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Possible algorithms:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Best-fit: choose smallest hole</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>First-fit: choose first hole from beginning</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Next-fit: choose first hole from last placement</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP265 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0265.htm');" onmouseover="Over(this)"
  id=PPTL265 onmouseout="Out(this)">Placement Algorithm: comments</a></font></div>
  <div id=PPTC265 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB265 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>What is the best algorithm?<span
    style="mso-spacerun: yes">  </span>Simulation showed that first fit usually
    is (see book)!</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Best fit may seem to be optimal, but it creates
    small holes hence it exacerbates fragmentation!</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>First fit is also the most efficient and
    simplest to implement</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Next fit tends to generate holes towards the end
    of the memory</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP266 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0266.htm');" onmouseover="Over(this)"
  id=PPTL266 onmouseout="Out(this)">Replacement Algorithm</a></font></div>
  <div id=PPTC266 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB266 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>When all programs/processes in main memory are
    blocked, the OS can choose to swap out a program (swap/suspend)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>A program can be swapped out (to a
    Blocked-Suspend state) and be replaced by a program ready to be executed</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>This latter process performs a transition from
    state New or Ready-Suspend to state Ready</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP267 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0267.htm');" onmouseover="Over(this)"
  id=PPTL267 onmouseout="Out(this)">Buddy System</a></font></div>
  <div id=PPTC267 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB267 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>A reasonable compromise to overcome
    disadvantages of both fixed and variable partitioning schemes</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>A modified form is used in Unix SVR4 for kernel
    memory allocation</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Memory blocks are available in size of 2^{K}
    where L &lt;= K &lt;= U and where</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>2^{L} = smallest size of free block</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>2^{U} = largest size of free block</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>(generally, the entire memory available)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP268 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0268.htm');" onmouseover="Over(this)"
  id=PPTL268 onmouseout="Out(this)">Buddy System</a></font></div>
  <div id=PPTC268 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB268 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>We start with the entire block of size 2^{U}</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>When a request of size S is made:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>If 2^{U-1} &lt; S &lt;= 2^{U} then allocate the
    entire block of size 2^{U}</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Else, split this block into two buddies, each of
    size 2^{U-1}</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>If 2^{U-2} &lt; S &lt;= 2^{U-1} then allocate
    one of the 2 buddies</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Otherwise one of the 2 buddies is split again</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>This process is repeated until the smallest
    block greater or equal to S is generated</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Two buddies are coalesced whenever both of them
    become free</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP269 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0269.htm');" onmouseover="Over(this)"
  id=PPTL269 onmouseout="Out(this)">Buddy System</a></font></div>
  <div id=PPTC269 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB269 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>The OS maintains several lists of holes</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>the i-list is the list of holes of size 2^{i}</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>whenever a pair of buddies in the i-list occur,
    they are removed from that list and coalesced into a single hole in the
    (i+1)-list</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Presented with a request<span
    style="mso-spacerun: yes">  </span>for an allocation of size k such that
    2^{i-1} &lt; k &lt;= 2^{i}:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>the i-list is first examined</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>if the i-list is empty, the (i+1)-list is then
    examined...</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP270 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0270.htm');" onmouseover="Over(this)"
  id=PPTL270 onmouseout="Out(this)">Example of Buddy System</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP271 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0271.htm');" onmouseover="Over(this)"
  id=PPTL271 onmouseout="Out(this)">Advantages of buddy systems</a></font></div>
  <div id=PPTC271 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB271 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Average memory waste (internal fragmentation) is
    25%</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>on the avg for each program there will be one
    full power of two partition, plus one half-used</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>plus of course wasted blocks if there arent any
    programs<span style="mso-spacerun: yes">  </span>waiting small enough for
    them.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Programs are not moved in memory (this
    simplifies memory management and address translation).</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP272 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0272.htm');" onmouseover="Over(this)"
  id=PPTL272 onmouseout="Out(this)">Relocation</a></font></div>
  <div id=PPTC272 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB272 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Because of swapping and compaction, a program
    may occupy different main memory locations during its lifetime</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Hence physical memory references by a program
    cannot be fixed</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>It is necessary to distinguish between logical
    address and physical address</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP273 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0273.htm');" onmouseover="Over(this)"
  id=PPTL273 onmouseout="Out(this)">Address Terminology</a></font></div>
  <div id=PPTC273 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB273 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>A physical address is a<span
    style="mso-spacerun: yes">  </span>physical location in main memory. The
    kernel may use only ph. addr. (absolute addresses).</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>A logical address is a reference to a memory
    location independent of the physical structure/organization of memory. This
    is what a compiler produces.</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>The virtual memory of a process is the set of
    all logical addresses in the process</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>A relative address is an example of logical
    address in which the address is expressed as a location relative to some
    known point in the program (normally the beginning)</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP274 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0274.htm');" onmouseover="Over(this)"
  id=PPTL274 onmouseout="Out(this)">Address Translation</a></font></div>
  <div id=PPTC274 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB274 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Relative address is the most frequent type of
    logical address used in pgm modules</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Such modules are loaded in main memory with all
    memory references in relative form</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>In the old times, the loader program replaced
    relative addresses with physical ones at load time.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Nowadays physical addresses are calculated on
    the fly as the instructions are executed</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>For adequate performance, the translation from
    relative to physical address must by done by hardware</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>This translation is disabled when the system
    must work with physical addresses.</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP275 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0275.htm');" onmouseover="Over(this)"
  id=PPTL275 onmouseout="Out(this)">Hardware translation of addresses</a></font></div>
  <div id=PPTC275 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB275 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>When a process is assigned to the running state,
    a base register (in CPU) gets loaded with the starting physical address of
    the program where the process executes.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>A bound register gets loaded with the programs
    ending physical address</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>When a relative addresses is encountered, it is
    added with the content of the base register to obtain the physical address
    which is compared with the content of the bound register</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>This provides hardware protection: each process
    can only access memory within its process image</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP276 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0276.htm');" onmouseover="Over(this)"
  id=PPTL276 onmouseout="Out(this)">Typical Hardware for Address Translation</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP277 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0277.htm');" onmouseover="Over(this)"
  id=PPTL277 onmouseout="Out(this)">Recall our discussion about
  linking/loading...</a></font></div>
  <div id=PPTC277 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB277 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>So far, we have only discussed loading concepts:
    how programs are loaded in physical memory.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>We have assumed that programs are loaded
    contiguously in memory.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>But programs can consist of several logical
    parts. These are the segments, or load modules, e.g.:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>one or more executable segments</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>one or more data segments</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>stack segment</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Idea: make allocation more flexible by
    allocating segments independently.</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP278 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0278.htm');" onmouseover="Over(this)"
  id=PPTL278 onmouseout="Out(this)">Simple Segmentation (p. 307)</a></font></div>
  <div id=PPTC278 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB278 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Each program is subdivided into blocks of
    non-equal size called segments</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>When a process gets loaded into main memory, its
    different segments can be located anywhere</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The methods for allocating memory to segments
    are those we have seen so far: just replace program by segment</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>However in this chapter we consider only the
    case where memory is allocated to segments by using dynamic partitioning.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP279 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0279.htm');" onmouseover="Over(this)"
  id=PPTL279 onmouseout="Out(this)">Simple Segmentation</a></font></div>
  <div id=PPTC279 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB279 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>The OS maintains a segment table for each
    program. Each entry contains:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2><span style="mso-spacerun: yes"> </span>the
    starting physical addresses of that segment.</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>the length of that segment (for protection)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP280 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0280.htm');" onmouseover="Over(this)"
  id=PPTL280 onmouseout="Out(this)">Logical address used in simple segmentation
  with dynamic partitioning</a></font></div>
  <div id=PPTC280 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB280 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>A CPU register holds the starting address of the
    the segment table of the program which the CPU executes.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Presented with a logical address (segment
    number, offset) = (n,m), the CPU indexes (with n) the segment table to
    obtain the starting physical address k and the length l of that segment</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>The physical address is obtained by adding m to
    k</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>the hardware also compares the offset m with the
    length l of that segment to determine if the address is valid</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP281 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0281.htm');" onmouseover="Over(this)"
  id=PPTL281 onmouseout="Out(this)">Slide 281</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP282 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0282.htm');" onmouseover="Over(this)"
  id=PPTL282 onmouseout="Out(this)">Logical-to-Physical Address translation in
  segmentation<br>
  with dynamic partitioning (see also Figure 8.10)</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP283 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0283.htm');" onmouseover="Over(this)"
  id=PPTL283 onmouseout="Out(this)">Evaluation of Simple Segmentation</a></font></div>
  <div id=PPTC283 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB283 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Advantage: memory allocation unit is a logically
    independent portion of program</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Segments can be loaded individually on demand (dynamic
    linking).</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Disadvantage: the problems of dynamic
    partitioning.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>The next step is to try and simplify mechanisms
    by using equally sized memory allocation units.</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP284 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0284.htm');" onmouseover="Over(this)"
  id=PPTL284 onmouseout="Out(this)">Simple Paging (p. 304)</a></font></div>
  <div id=PPTC284 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB284 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Main memory is partitioned into equal
    fixed-sized chunks called frames</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Each program is also ideally divided into chunks
    of the same size called pages</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The pages of a program can thus be assigned to
    the available frames in main memory</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Consequence: a program can be scattered all over
    the physical memory.</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP285 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0285.htm');" onmouseover="Over(this)"
  id=PPTL285 onmouseout="Out(this)">Example of program loading</a></font></div>
  <div id=PPTC285 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB285 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Now suppose that program B is swapped out</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP286 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0286.htm');" onmouseover="Over(this)"
  id=PPTL286 onmouseout="Out(this)">Example of process loading (cont.)</a></font></div>
  <div id=PPTC286 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB286 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The OS then<span style="mso-spacerun: yes"> 
    </span>loads a new program D consisting of 5 pages</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Program D does not occupy a contiguous section
    of memory</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>There is no external fragmentation</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Internal fragmentation consists only of part of
    the last page of each program (avg 1/2 page/program).</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP287 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0287.htm');" onmouseover="Over(this)"
  id=PPTL287 onmouseout="Out(this)">Page Tables</a></font></div>
  <div id=PPTC287 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB287 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The OS now needs to maintain a page table for
    each program = process</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Each entry of a page table consist of the frame
    number where the corresponding page is physically located</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The page table is indexed by the page number to
    obtain the frame number</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>A free frame list, available for pages, is
    maintained</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP288 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0288.htm');" onmouseover="Over(this)"
  id=PPTL288 onmouseout="Out(this)">Logical address used in paging</a></font></div>
  <div id=PPTC288 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB288 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Within each program, each logical address must
    consist of a page number and an offset within the page</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>A CPU register always holds the starting<span
    style="mso-spacerun: yes">  </span>physical address of the page table of
    the program/process which is running on that CPU</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Presented with a logical address (page number,
    offset) the CPU accesses the page table to obtain the physical address
    (frame number, offset)</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP289 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0289.htm');" onmouseover="Over(this)"
  id=PPTL289 onmouseout="Out(this)">Logical address in paging</a></font></div>
  <div id=PPTC289 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB289 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Page size is always chosen to be a power of 2.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Ex: if 16 bits addresses are used and page size
    = 1K,<span style="mso-spacerun: yes">  </span>we need 10 bits for offset
    and have 6 bits available for page number</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Logical address (n,m) gets translated to
    physical address (k,m) by indexing the page table and appending the page
    offset m to the frame number k</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP290 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0290.htm');" onmouseover="Over(this)"
  id=PPTL290 onmouseout="Out(this)">Slide 290</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP291 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0291.htm');" onmouseover="Over(this)"
  id=PPTL291 onmouseout="Out(this)">Logical-to-Physical Address Translation in
  Paging (see also Fig. 8.3)</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP292 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0292.htm');" onmouseover="Over(this)"
  id=PPTL292 onmouseout="Out(this)">Comparison of simple paging and simple
  segmentation w. dyn. partitions</a></font></div>
  <div id=PPTC292 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB292 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Simple segmentation suffers from external
    fragmentation (this comes from dyn. partitions)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Paging only yields internal fragmentation (1/2
    page in average per program)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Simple segmentation may requires more
    complicated hardware for address translation (addition instead of
    concatenation)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Segmentation is visible to the programmer
    whereas paging is transparent</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Segment protection and sharing is more logical
    than page protection because normally one wants protection to be based on
    logical program portions.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Segmentation allows dynamic linking of segments.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Segmentation and paging can be combined ...</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP293 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0293.htm');" onmouseover="Over(this)"
  id=PPTL293 onmouseout="Out(this)">Virtual Memory</a></font></div>
  <div id=PPTC293 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB293 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Chapter 8</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP294 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0294.htm');" onmouseover="Over(this)"
  id=PPTL294 onmouseout="Out(this)">Characteristics of Paging and Segmentation</a></font></div>
  <div id=PPTC294 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB294 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Memory references are dynamically translated
    into physical addresses at run time</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>a program may be swapped in and out of main<span
    style="mso-spacerun: yes">  </span>memory such that it occupies different
    regions</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>A program may be broken up into pieces (pages or
    segments) that do not need to be located contiguously in main memory</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Hence: it becomes possible to execute a program
    that is not entirely loaded in memory.</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>computation may proceed for some time if a
    sufficiently large portion of the program is in main memory (recall locality
    of reference)</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP295 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0295.htm');" onmouseover="Over(this)"
  id=PPTL295 onmouseout="Out(this)">Locality and Virtual Memory</a></font></div>
  <div id=PPTC295 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB295 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Principle of locality of references: memory<span
    style="mso-spacerun: yes">  </span>references within a process tend to
    cluster.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Hence: only a few pieces of a process will be
    needed over a short period of time.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>[Note: since we are now talking about
    dynamically allocating memory as we execute, it is perhaps more appropriate
    to talk about processes rather than programs]</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP296 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0296.htm');" onmouseover="Over(this)"
  id=PPTL296 onmouseout="Out(this)">Program Execution</a></font></div>
  <div id=PPTC296 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB296 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The loader brings into main memory only a few
    pieces of the process logical address space (including its starting point)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Each page/segment table entry has a present bit
    that is set only if the corresponding piece is in main memory</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The resident set<span style="mso-spacerun:
    yes">  </span>is the portion of the process address space that is in main
    memory</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>An interrupt (memory fault or paging fault) is
    generated when a memory reference is on a page/segment not present in main
    memory</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP297 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0297.htm');" onmouseover="Over(this)"
  id=PPTL297 onmouseout="Out(this)">New format of page table</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP298 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0298.htm');" onmouseover="Over(this)"
  id=PPTL298 onmouseout="Out(this)">Process Execution (cont.)</a></font></div>
  <div id=PPTC298 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB298 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>OS places the process in a Blocking state</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>OS issues a I/O Read request to bring into main
    memory the piece referenced</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>[another process may be dispatched to run while
    the Read takes place]</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>an interrupt is issued when the Read completes</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>this causes the OS to place the affected process
    in the Ready state</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP299 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0299.htm');" onmouseover="Over(this)"
  id=PPTL299 onmouseout="Out(this)">Advantages of Partial Loading</a></font></div>
  <div id=PPTC299 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB299 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>More processes can be in execution</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Only load some of the pieces of each process</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>With more processes capable of executing, it is
    more likely that the ready queue wont be empty</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>A process can now execute even if its<span
    style="mso-spacerun: yes">  </span>addressing space is much larger than the
    main memory size</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>more bits for logical addresses can be used than
    the bits needed for addressing the physical memory</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP300 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0300.htm');" onmouseover="Over(this)"
  id=PPTL300 onmouseout="Out(this)">Virtual Memory: large as you wish!</a></font></div>
  <div id=PPTC300 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB300 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Ex: 16 bits are needed to address a physical
    memory of 64KB</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Lets use a page size of 1KB so that 10 bits are
    needed for offsets within a page</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>For the page number part of a logical address we
    may use a number of bits larger than 6, because not all pages need to be in
    memory at the same time</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>The memory referenced by a logical address is
    called virtual memory</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>is maintained on secondary memory (eg: disk)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>pieces are brought into main memory only when
    needed</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP301 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0301.htm');" onmouseover="Over(this)"
  id=PPTL301 onmouseout="Out(this)">Virtual Memory (cont.)</a></font></div>
  <div id=PPTC301 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB301 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>For better performance, the file system is
    bypassed and virtual memory is stored in a special area of the disk called
    the swap space</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>By contrast, physical memory is the memory
    referenced by physical addresses</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>is located on DRAM</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>The translation from logical address to physical
    address is done by indexing the appropriate page/segment table with the
    help of address translation hardware</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP302 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0302.htm');" onmouseover="Over(this)"
  id=PPTL302 onmouseout="Out(this)">Support Needed for<br>
  Virtual Memory</a></font></div>
  <div id=PPTC302 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB302 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Memory management hardware must support paging
    and/or segmentation</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>OS must be able to manage the movement of pages
    and/or segments between secondary memory and main memory</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>We will first discuss the hardware aspects; then
    the algorithms used by the OS</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP303 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0303.htm');" onmouseover="Over(this)"
  id=PPTL303 onmouseout="Out(this)">Paging</a></font></div>
  <div id=PPTC303 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB303 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Each page table entry contains a present bit to
    indicate whether the page is in main memory or not.</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>If it is in main memory, the entry contains the
    frame number of the corresponding page in main memory</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>If it is not in main memory, the entry may
    contain the address of that page on secondary memory (directly or
    indirectly).</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP304 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0304.htm');" onmouseover="Over(this)"
  id=PPTL304 onmouseout="Out(this)">Paging</a></font></div>
  <div id=PPTC304 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB304 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>A modified bit indicates if the page has been
    altered since it was last loaded into main memory</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>If no change has been made, the page does not
    have to be written to secondary memory when it needs to be swapped out</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Other control bits may be present if protection
    is managed at the page level</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>a read-only/read-write bit</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>protection level bit: kernel page or user page
    (more bits are used when the processor supports more than 2 protection
    levels)</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP305 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0305.htm');" onmouseover="Over(this)"
  id=PPTL305 onmouseout="Out(this)">Page Table Structure</a></font></div>
  <div id=PPTC305 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB305 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Page tables are usually variable in length
    (depend on program size)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>then must be in main memory or in virtual memory
    instead of registers</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>A single register holds the starting physical
    address of the page table of the currently running process</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP306 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0306.htm');" onmouseover="Over(this)"
  id=PPTL306 onmouseout="Out(this)">Address Translation in a Paging System) (nothing
  new in figure wrt previous chapter)</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP307 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0307.htm');" onmouseover="Over(this)"
  id=PPTL307 onmouseout="Out(this)">Translation Lookaside Buffer</a></font></div>
  <div id=PPTC307 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB307 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Because the page table is in main memory, each
    virtual memory reference causes at least two physical memory accesses</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>one to fetch the page table entry</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>one to fetch the data</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>To overcome this problem a special cache is set
    up for page table entries</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>called the TLB - Translation Lookaside Buffer</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>Contains page table entries that have been most
    recently used</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>One TLB per CPU.</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP308 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0308.htm');" onmouseover="Over(this)"
  id=PPTL308 onmouseout="Out(this)">Translation Lookaside Buffer</a></font></div>
  <div id=PPTC308 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB308 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Given a logical address, the processor examines
    the TLB</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>If page table entry is present (a hit), the
    frame number is retrieved and the real (physical) address is formed</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>If page table entry is not found in the TLB (a
    miss), the page number is used to index the process page table</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>if present bit is set then the corresponding
    frame is accessed</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>if not, a page fault is issued to bring in the
    referenced page in main memory</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>The TLB is updated to include the new page entry</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP309 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0309.htm');" onmouseover="Over(this)"
  id=PPTL309 onmouseout="Out(this)">Use of a Translation Lookaside Buffer</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP310 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0310.htm');" onmouseover="Over(this)"
  id=PPTL310 onmouseout="Out(this)">Associative Search in the TLB</a></font></div>
  <div id=PPTC310 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB310 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>The TLB is a small table of hardware registers
    where each line contains:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>page #, corresponding frame #</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>When one wants to find the frame number for a
    given page number, the given page number is searched in parallel in the
    TLB, by using a special hardware feature (associative search).</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP311 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0311.htm');" onmouseover="Over(this)"
  id=PPTL311 onmouseout="Out(this)">TLB: further comments</a></font></div>
  <div id=PPTC311 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB311 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The TLB must be flushed each time a new process
    enters the Running state.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Since the TLB is small (maybe 32 registers) it
    has to implement some algorithm to replace addresses. These algo. are
    similar to the page replacement algorithms we will see later.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Note that in computers with cache, a main memory
    address may in turn refer to a page that is in cache.<span
    style="mso-spacerun: yes">  </span>This is a separate subject Caches are
    managed in a similar way as virtual memory (page 332).</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP312 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0312.htm');" onmouseover="Over(this)"
  id=PPTL312 onmouseout="Out(this)">Page Tables and Virtual Memory</a></font></div>
  <div id=PPTC312 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB312 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Most computer systems support a very large
    virtual address space</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>32 to 64 bits are used for logical addresses</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>If (only) 32 bits are used (4GB) with 12 bits
    offset (4KB pages), a page table may have 2^{20} (1M) of entries. Every
    entry will be at least several bytes.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>The entire page table may take up a lot of main
    memory. Hence, page tables usually are also subjected to paging</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>When a process is running, part of its page
    table must be in main memory (including the page table entry of the
    currently executing page)</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP313 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0313.htm');" onmouseover="Over(this)"
  id=PPTL313 onmouseout="Out(this)">Multilevel Page Tables</a></font></div>
  <div id=PPTC313 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB313 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Since a page table will generally require
    several pages to be stored. One solution is to organize page tables into a
    multilevel hierarchy</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2><span style="mso-spacerun: yes"> </span>When 2
    levels are used (ex: 386, Pentium), the page number is split into two
    numbers p1 and p2</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>p1 indexes the outer paged table (directory) in
    main memory whose entries points to a page containing page table entries
    which is itself indexed by p2. Page tables, other than the directory, are
    swapped in and out as needed</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP314 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0314.htm');" onmouseover="Over(this)"
  id=PPTL314 onmouseout="Out(this)">Sharing Pages: a text editor</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP315 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0315.htm');" onmouseover="Over(this)"
  id=PPTL315 onmouseout="Out(this)">Sharing Pages</a></font></div>
  <div id=PPTC315 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB315 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>If we share the same code among different users,
    it is sufficient to keep only one copy in main memory</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Shared code must be reentrant (ie: non
    self-modifying) so that 2 or more processes can execute the same code</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>If we use paging, each sharing process will have
    a page table whose entry points to the same frames: only one copy is in
    main memory</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>But each user needs to have its own private data
    pages</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>But note:<span style="mso-spacerun: yes"> 
    </span>sharing pages is not a logically good solution. Pages are arbitrary
    entities, have no logical meaning.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The appropriate solution is to share segments,
    which are logical units, see later.<span style="mso-spacerun: yes"> 
    </span>Unfortunately, many OS do not use segmentation.</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP316 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0316.htm');" onmouseover="Over(this)"
  id=PPTL316 onmouseout="Out(this)">Windows NT Virtual Memory</a></font></div>
  <div id=PPTC316 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB316 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Uses paging only (no segmentation) with a 4KB
    page size</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Each process has 2 levels of page tables:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>a page directory containing 1024 page-directory
    entries (PDEs) of 4 bytes each</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>each page-directory entry points to a page table
    that contains 1024 page-table entries (PTEs) of 4 bytes each</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>so we have 4MB of page tables per process</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>the page directory is in main memory but page
    tables containing PTEs are swapped in and out as needed</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP317 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0317.htm');" onmouseover="Over(this)"
  id=PPTL317 onmouseout="Out(this)">Windows NT Virtual Memory</a></font></div>
  <div id=PPTC317 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB317 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Virtual addresses (p1, p2, d) use 32 bits where
    p1 and p2 are each 10 bits wide</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>p1 selects an entry in the page directory which
    points to a page table</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>p2 selects an entry in this page table which
    points to the selected page</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Upon creation, NT commits only a certain number
    of virtual pages to a process and reserves a certain number of other pages
    for future needs</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Hence, a group of bits in each PTE indicates if
    the corresponding page is committed, reserved or not used</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP318 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0318.htm');" onmouseover="Over(this)"
  id=PPTL318 onmouseout="Out(this)">Windows NT Virtual Memory</a></font></div>
  <div id=PPTC318 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB318 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>A memory reference to an unused page traps into
    the OS (protection violation)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Each PTE also contains:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>a present bit</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>If set: 20 bits are used for the frame address
    of the selected page.</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>Else these bits are used to locate the selected
    page in a paging file (on disk)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>some bits identify the paging file used</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>a dirty bit<span style="mso-spacerun: yes"> 
    </span>(ie: a modified bit)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>some protection bits (ex: read-only, or
    read-write)</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP319 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0319.htm');" onmouseover="Over(this)"
  id=PPTL319 onmouseout="Out(this)">Inverted Page Table</a></font></div>
  <div id=PPTC319 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB319 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Another solution (PowerPC, IBM Risk 6000) to the
    problem of maintaining large page tables is to use an Inverted Page Table
    (IPT)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>We generally have only one IPT for the whole
    system</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>There is only one IPT entry per physical frame
    (rather than one per virtual page)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>this reduces a lot the amount of memory needed
    for page tables</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>The 1st entry of the IPT is for frame #1 ... the
    nth entry of the IPT is for frame #n and each of these entries contains the
    virtual page number</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Thus this table is inverted</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP320 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0320.htm');" onmouseover="Over(this)"
  id=PPTL320 onmouseout="Out(this)">Inverted Page Table</a></font></div>
  <div id=PPTC320 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB320 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>The process ID with the virtual page number
    could be used to search the IPT to obtain the frame #</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>For better performance,<span
    style="mso-spacerun: yes">  </span>hashing is used to obtain a hash table
    entry which points to a IPT entry</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>A page fault occurs if no match is found</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>chaining is used to manage hashing overflow</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP321 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0321.htm');" onmouseover="Over(this)"
  id=PPTL321 onmouseout="Out(this)">The Page Size Issue</a></font></div>
  <div id=PPTC321 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB321 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Page size is defined by hardware; always a power
    of 2 for more efficient logical to physical address translation. But
    exactly which size to use is a difficult question:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>Large page size is good since for a small page
    size, more pages are required per process</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>More pages per process means larger page tables.
    Hence, a large area of page tables in virtual memory</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>Small page size is good to minimize internal
    fragmentation, and (perhaps) to have more processes in physical memory.</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>Large page size is good since disks are designed
    to efficiently<span style="mso-spacerun: yes">  </span>transfer large
    blocks of data</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>Larger page sizes means less pages in main
    memory; this increases the TLB hit ratio</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP322 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0322.htm');" onmouseover="Over(this)"
  id=PPTL322 onmouseout="Out(this)">The Page Size Issue</a></font></div>
  <div id=PPTC322 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB322 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>With a very small page size, there will be many
    pages in memory for a program, each containing code/data recently used,
    hence normally there will be few page faults.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Increased page size causes each page to contain
    more code that is not used.<span style="mso-spacerun: yes">  </span>Page
    faults rise.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Page faults decrease if we can approach point P
    were the size of a page is equal to the size of the entire program</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP323 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0323.htm');" onmouseover="Over(this)"
  id=PPTL323 onmouseout="Out(this)">The Page Size Issue</a></font></div>
  <div id=PPTC323 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB323 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Page fault rate is also determined by the number
    of frames allocated per program</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Page faults drops to a reasonable value when W
    frames are allocated (W varies from program to program and between stages
    of execution of a program)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Drops to 0 when the number (N) of frames is such
    that a process is entirely in memory</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP324 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0324.htm');" onmouseover="Over(this)"
  id=PPTL324 onmouseout="Out(this)">The Page Size Issue</a></font></div>
  <div id=PPTC324 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB324 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Page sizes from 1KB to 4KB are most commonly
    used</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>But the issue is non trivial. Hence some
    processors are now supporting multiple page sizes. Ex:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Pentium supports 2 sizes: 4KB or 4MB</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>R4000 supports 7 sizes: 4KB to 16MB</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP325 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0325.htm');" onmouseover="Over(this)"
  id=PPTL325 onmouseout="Out(this)">Segmentation with virtual memory:<br>
  little
  change...</a></font></div>
  <div id=PPTC325 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB325 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Typically, each process has its own segment
    table</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP326 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0326.htm');" onmouseover="Over(this)"
  id=PPTL326 onmouseout="Out(this)">Address Translation in a Segmentation
  System<br>
  (nothing new here wrt simple segmentation, except that
  present and modified bits are needed)</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP327 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0327.htm');" onmouseover="Over(this)"
  id=PPTL327 onmouseout="Out(this)">Segmentation: comments</a></font></div>
  <div id=PPTC327 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB327 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>In each segment table entry we have both the
    starting address and length of the segment</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>the segment can thus dynamically grow or shrink
    as needed (but if they grow, they may need to be moved)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>address validity easily checked with the length
    field</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>But variable length segments introduce external
    fragmentation and are more difficult to swap in and out...</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>It is natural to provide protection and sharing
    at the segment level since segments are visible to the programmer (pages
    are not)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Useful protection bits in segment table entry:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>read-only/read-write bit</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Supervisor/User bit</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP328 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0328.htm');" onmouseover="Over(this)"
  id=PPTL328 onmouseout="Out(this)">Sharing in Segmentation Systems</a></font></div>
  <div id=PPTC328 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB328 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Segments are shared when entries in the segment
    tables of 2 different processes point to the same physical locations</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Ex: the same code of a text editor can be shared
    by many users</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Only one copy is kept in main memory</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>but each user would still need to have its own
    private data segment</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>more logical than sharing pages</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP329 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0329.htm');" onmouseover="Over(this)"
  id=PPTL329 onmouseout="Out(this)">Sharing of Segments: text editor example</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP330 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0330.htm');" onmouseover="Over(this)"
  id=PPTL330 onmouseout="Out(this)">Combined Segmentation and Paging</a></font></div>
  <div id=PPTC330 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB330 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>To combine their advantages some processors and
    OS page the segments.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Several combinations exists. Here is a simple
    one</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Each process has:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>one segment table</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>one page table per segment</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>The virtual address consist of:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>a segment number: used to index the segment
    table whose entry gives the starting address of the page table for that
    segment</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>a page number: used to index that page table to
    obtain the corresponding frame number</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>an offset: used to locate the word within the
    frame</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Segment and page tables can themselves be paged!</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP331 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0331.htm');" onmouseover="Over(this)"
  id=PPTL331 onmouseout="Out(this)">Address Translation in a (simple) combined
  Segmentation/Paging System (no paging of page and segment tables)</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP332 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0332.htm');" onmouseover="Over(this)"
  id=PPTL332 onmouseout="Out(this)">Simple Combined Segmentation and Paging</a></font></div>
  <div id=PPTC332 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB332 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>The Segment Base is the physical address of the
    page table of that segment</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Present and modified bits are present only in
    page table entry</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Protection and sharing info most naturally
    resides in segment table entry</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Ex: a read-only/read-write bit, a kernel/user
    bit...</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP333 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0333.htm');" onmouseover="Over(this)"
  id=PPTL333 onmouseout="Out(this)">Advantages of segmentation + paging</a></font></div>
  <div id=PPTC333 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB333 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Solves problems of both loading and linking.</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Linking a new segments amounts to adding a new
    entry to a segment table</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Segments can grow without having to be moved in
    physical memory!</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Protection and sharing can be done at the
    logical segment level.</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP334 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0334.htm');" onmouseover="Over(this)"
  id=PPTL334 onmouseout="Out(this)">Intel 386 segmentation and paging</a></font></div>
  <div id=PPTC334 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB334 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>In protected mode, the 386 (and up) uses a
    combined segmentation and paging scheme which is exploited by OS/2 (32-Bit
    version)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>The logical address is a pair (selector, offset)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>The selector contains a bit which selects
    either:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>the Global Descriptor Table; accessible by all
    processes</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>the Local Descriptor Table; accessible only by
    the process who owns it (we have one LDT per process)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Two bits in the selector are for protection and
    the remaining 13 bits are used to select an 8-byte entry either in the LDT
    or the GDT called a descriptor</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP335 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0335.htm');" onmouseover="Over(this)"
  id=PPTL335 onmouseout="Out(this)">Intel 386 segmentation and paging</a></font></div>
  <div id=PPTC335 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB335 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>The 386 has 6 segment registers each having a
    16-bit visible part that holds a selector and a 8-byte invisible part that
    contain the corresponding descriptor</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>this avoids having to read the LDT/GDT at each
    memory reference</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>The descriptor contains the base address and the
    length of the referenced segment</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>The 32-bit base address is added to the 32-bit
    offset to formed a 32-bit linear address (p1,p2,d) which is basically
    identical to the logical address format used by Windows NT</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>2 levels of page tables indexed by p1 and p2 (10
    bits each)</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP336 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0336.htm');" onmouseover="Over(this)"
  id=PPTL336 onmouseout="Out(this)">Intel 386 <br>
  address <br>
  translation</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP337 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0337.htm');" onmouseover="Over(this)"
  id=PPTL337 onmouseout="Out(this)">386 segmentation and paging: remarks</a></font></div>
  <div id=PPTC337 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB337 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>The segmentation part can be effectively
    disabled by clearing the base address of each segment descriptor</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Then the offset part of the logical address is
    identical to the linear address (p1,p2,d)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>This is used by every OS that runs on 386 (and
    up) and uses only paging:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Windows NT</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Unix versions: Linux, FreeBSD...</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP338 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0338.htm');" onmouseover="Over(this)"
  id=PPTL338 onmouseout="Out(this)">Page Fetch and Replacement (p. 339)</a></font></div>
  <div id=PPTC338 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB338 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Memory management software depends on whether
    the hardware supports paging or segmentation or both</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Pure segmentation systems are rare. Segments are
    usually paged -- memory management issues are then those of paging</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Hence we concentrate on issues associated with
    paging</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>To achieve good performance we need a low page
    fault rate</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP339 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0339.htm');" onmouseover="Over(this)"
  id=PPTL339 onmouseout="Out(this)">Fetch Policy</a></font></div>
  <div id=PPTC339 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB339 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Determines when a page should be brought into
    main memory. Two common policies:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>Demand paging only brings pages into main memory
    when a reference is made to a location on the page (ie: paging on demand
    only)</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>many page faults when process first started but
    should decrease as more pages are brought in</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>Prepaging brings in more pages than needed</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>locality of reference suggests that it is more
    efficient to bring in pages that are contiguous in virtual memory</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>efficiency not definitely established: the extra
    pages brought in are often not referenced</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP340 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0340.htm');" onmouseover="Over(this)"
  id=PPTL340 onmouseout="Out(this)">Placement policy</a></font></div>
  <div id=PPTC340 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB340 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Determines where in real memory a new page is
    placed.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>If there are free frames, the chosen frame
    location is irrelevant since all memory frames are equivalent.</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP341 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0341.htm');" onmouseover="Over(this)"
  id=PPTL341 onmouseout="Out(this)">Replacement Policy</a></font></div>
  <div id=PPTC341 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB341 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>If all memory frames contain pages, and a new
    page must be brought in to continue a program</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Deals with the selection of a page in main
    memory to be replaced</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP342 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0342.htm');" onmouseover="Over(this)"
  id=PPTL342 onmouseout="Out(this)">Replacement Policy</a></font></div>
  <div id=PPTC342 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB342 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Not all pages in main memory can be selected for
    replacement</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Some frames are locked (cannot be paged out):</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>much of the kernel is held on locked frames as
    well as key control structures and I/O buffers</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP343 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0343.htm');" onmouseover="Over(this)"
  id=PPTL343 onmouseout="Out(this)">Basic algorithms for the replacement policy</a></font></div>
  <div id=PPTC343 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB343 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>The Optimal policy selects for replacement the
    page for which the time to the next reference is the longest</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>produces the fewest number of page faults</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>impossible to implement (need to know the
    future) but serves as a standard to compare with the other algorithms we
    shall study:</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>Least recently used (LRU)</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>First-in, first-out (FIFO)</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>Clock</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP344 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0344.htm');" onmouseover="Over(this)"
  id=PPTL344 onmouseout="Out(this)">The LRU Policy</a></font></div>
  <div id=PPTC344 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB344 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Replaces the page that has not been referenced
    for the longest time</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>By the principle of locality, this should be the
    page least likely to be referenced in the near future</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>performs nearly as well as the optimal policy</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Example: A process of 5 pages with an OS that
    fixes the resident set size to 3</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Note:<span style="mso-spacerun: yes"> 
    </span>for this trace, OPT 3 faults, LRU 4 (not counting initial faults)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP345 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0345.htm');" onmouseover="Over(this)"
  id=PPTL345 onmouseout="Out(this)">Implementation of the LRU Policy</a></font></div>
  <div id=PPTC345 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB345 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Each page could be tagged (in the page table
    entry) with the time at each memory reference, or one could keep the
    history of the page references.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>This would require expensive hardware and table
    updates/lookups: page replacement algorithms must be fast.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Consequently true LRU replacement policy is
    seldom if ever used.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Approximation algorithms are used instead, to be
    described next.</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP346 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0346.htm');" onmouseover="Over(this)"
  id=PPTL346 onmouseout="Out(this)">The FIFO Policy</a></font></div>
  <div id=PPTC346 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB346 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Treats page frames allocated to a process as a
    circular buffer</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>When the buffer is full, the oldest page is
    replaced. Hence: first-in, first-out</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>This is not necessarily the same as the LRU page</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>Problem: A frequently used page is often the
    oldest, so it will be repeatedly paged out by FIFO</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>Simple to implement</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>requires only a pointer that circles through the
    page frames of the process</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP347 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0347.htm');" onmouseover="Over(this)"
  id=PPTL347 onmouseout="Out(this)">Comparison of FIFO with LRU</a></font></div>
  <div id=PPTC347 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB347 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>LRU recognizes that pages 2 and 5 are referenced
    more frequently than others but FIFO does not</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>FIFO performs relatively poorly:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>for this trace, LRU=4, FIFO=6</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP348 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0348.htm');" onmouseover="Over(this)"
  id=PPTL348 onmouseout="Out(this)">The Clock Policy</a></font></div>
  <div id=PPTC348 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB348 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>The set of frames candidate for replacement is
    considered as a circular buffer</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>When a page is replaced, a pointer is set to
    point to the next frame in buffer</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>A use bit for each frame is set to 1 whenever</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>a page is first loaded into the frame</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>the corresponding page is referenced</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>When it is time to replace a page, the first
    frame encountered<span style="mso-spacerun: yes">  </span>with the use bit
    set to 0 is replaced.</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>During the search for replacement, each use bit
    set to 1 is changed to 0</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP349 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0349.htm');" onmouseover="Over(this)"
  id=PPTL349 onmouseout="Out(this)">The Clock Policy: an example</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP350 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0350.htm');" onmouseover="Over(this)"
  id=PPTL350 onmouseout="Out(this)">Comparison of Clock with FIFO and LRU</a></font></div>
  <div id=PPTC350 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB350 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Asterisk indicates that the corresponding use
    bit is set to 1</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Clock protects frequently referenced pages by
    setting the use bit to 1 at each reference</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Note the number of faults: LRU=4, FIFO=6,
    Clock=5</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP351 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0351.htm');" onmouseover="Over(this)"
  id=PPTL351 onmouseout="Out(this)">Comparison of Clock with FIFO and LRU</a></font></div>
  <div id=PPTC351 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB351 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Numerical experiments tend to show that
    performance of Clock is close to that of LRU</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Experiments have been performed when the number
    of frames allocated to each process is fixed and when pages local to the
    page-fault process are considered for replacement</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>When few (6 to 8) frames are allocated per
    process, there is almost a factor of 2 of page faults between LRU and FIFO</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>This factor reduces close to 1 when several
    (more than 12) frames are allocated. (But then more main memory is needed
    to support the same level of multiprogramming)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Note however that modern computers have
    thousands of frames so in practice the difference between these algorithms
    may not be very important.</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP352 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0352.htm');" onmouseover="Over(this)"
  id=PPTL352 onmouseout="Out(this)">Page Buffering</a></font></div>
  <div id=PPTC352 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB352 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Pages to be replaced are kept in main memory for
    a while to guard against poorly performing replacement algorithms such as
    FIFO</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Two lists of pointers are maintained: each entry
    points to a frame selected for replacement</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>a free page list for frames that have not been
    modified since brought in (no need to swap out)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>a modified page list for frames that have been
    modified (need to write them out)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>A frame to be replace has a pointer added to the
    tail of one of the lists and the present bit is cleared in the
    corresponding page table entry</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>but the page remains in the same memory frame</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP353 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0353.htm');" onmouseover="Over(this)"
  id=PPTL353 onmouseout="Out(this)">Page Buffering</a></font></div>
  <div id=PPTC353 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB353 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>At each page fault the two lists are first
    examined to see if the needed page is still in main memory</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>If it is, we just need to set the present bit in
    the corresponding page table entry (and remove the matching entry in the
    relevant page list)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>If it is not, then the needed page is brought
    in, it is placed in the frame pointed by the head of the free frame list
    (overwriting the page that was there)</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>the head of the free frame list is moved to the
    next entry</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>(the frame number in the page table entry could
    be used to scan the two lists, or each list entry could contain the process
    id and page number of the occupied frame)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>The modified list also serves to write out
    modified pages in cluster (rather than individually)</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP354 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0354.htm');" onmouseover="Over(this)"
  id=PPTL354 onmouseout="Out(this)">Cleaning Policy</a></font></div>
  <div id=PPTC354 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB354 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>When should a modified page be written out to
    disk?</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Demand cleaning</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>a page is written out only when its frame has
    been selected for replacement</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>but a process that suffers a page fault may have
    to wait for 2 page transfers</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Precleaning</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>modified pages are written before their frame
    are needed so that they can be written out in batches</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>but makes little sense to write out so many
    pages if the majority of them will be modified again before they are
    replaced</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP355 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0355.htm');" onmouseover="Over(this)"
  id=PPTL355 onmouseout="Out(this)">Cleaning Policy</a></font></div>
  <div id=PPTC355 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB355 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>A good compromise can be achieved with page
    buffering</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>recall that pages chosen for replacement are
    maintained either on a free (unmodified) list or on a modified list</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>pages on the modified list can be periodically
    written out in batches and moved to the free list</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>a good compromise since:</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>not all dirty pages are written out but only
    those chosen for replacement</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>writing is done in batch</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP356 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0356.htm');" onmouseover="Over(this)"
  id=PPTL356 onmouseout="Out(this)">Resident Set Size</a></font></div>
  <div id=PPTC356 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB356 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>The OS must decide how many page frames to
    allocate to a process</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>large page fault rate if to few frames are
    allocated</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>low multiprogramming level if to many frames are
    allocated</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP357 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0357.htm');" onmouseover="Over(this)"
  id=PPTL357 onmouseout="Out(this)">Resident Set Size</a></font></div>
  <div id=PPTC357 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB357 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Fixed-allocation policy</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>allocates a fixed number of frames that<span
    style="mso-spacerun: yes">  </span>remains constant over time</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>the number is determined at load time and
    depends on the type of the application</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Variable-allocation policy</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>the number of frames allocated to a process may
    vary over time</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>may increase if page fault rate is high</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>may decrease if page fault rate is very low</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>requires more OS overhead to assess behavior of
    active processes</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP358 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0358.htm');" onmouseover="Over(this)"
  id=PPTL358 onmouseout="Out(this)">Replacement Scope</a></font></div>
  <div id=PPTC358 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB358 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Is the set of frames to be considered for
    replacement when a page fault occurs</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Local replacement policy</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>chooses only among the frames that are allocated
    to the process that issued the page fault</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Global replacement policy</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>any unlocked frame is a candidate for
    replacement</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Let us consider the possible combinations of
    replacement scope and resident set size policy</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP359 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0359.htm');" onmouseover="Over(this)"
  id=PPTL359 onmouseout="Out(this)">Fixed allocation + Local scope</a></font></div>
  <div id=PPTC359 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB359 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Each process is allocated a fixed number of
    pages</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>determined at load time and depends on
    application type</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>When a page fault occurs: page frames considered
    for replacement are local to the page-fault process</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>the number of frames allocated is thus constant</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>previous replacement algorithms can be used</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Problem: difficult to determine ahead of time a
    good number for the allocated frames</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>if too low: page fault rate will be high</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>if too large: multiprogramming level will be too
    low</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP360 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0360.htm');" onmouseover="Over(this)"
  id=PPTL360 onmouseout="Out(this)">Fixed allocation + Global scope</a></font></div>
  <div id=PPTC360 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB360 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Impossible to achieve</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>if all unlocked frames are candidate for
    replacement, the number of frames allocate to a process will necessary vary
    over time</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP361 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0361.htm');" onmouseover="Over(this)"
  id=PPTL361 onmouseout="Out(this)">Variable allocation + Global scope</a></font></div>
  <div id=PPTC361 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB361 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Simple to implement--adopted by many OS (like
    Unix SVR4)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>A list of free frames is maintained</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>when a process issues a page fault, a free frame
    (from this list) is allocated to it</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Hence the number of frames allocated to a page
    fault process increases</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>The choice for the process that will lose a
    frame is arbitrary: far from optimal</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Page buffering can alleviate this problem since
    a page may be reclaimed if it is referenced again soon</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP362 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0362.htm');" onmouseover="Over(this)"
  id=PPTL362 onmouseout="Out(this)">Variable allocation + Local scope</a></font></div>
  <div id=PPTC362 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB362 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>May be the best combination (used by Windows NT)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Allocate at load time a certain number of frames
    to a new process based on application type</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>use either prepaging or demand paging to fill up
    the allocation</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>When a page fault occurs, select the page to
    replace from the resident set of the process that suffers the fault</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Reevaluate periodically the allocation provided
    and increase or decrease it to improve overall performance</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP363 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0363.htm');" onmouseover="Over(this)"
  id=PPTL363 onmouseout="Out(this)">But, watch for Thrashing</a></font></div>
  <div id=PPTC363 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB363 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Attempt to have a lot of processes
    simultaneously executing in main memory (increasing the level of
    multiprogramming) may result in thrashing.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>This is the phenomenon that occurs when the
    machine is so busy with paging I/O that can find little time for actually
    executing user processes.</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The working set strategy was invented to prevent
    thrashing.</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP364 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0364.htm');" onmouseover="Over(this)"
  id=PPTL364 onmouseout="Out(this)">The Working Set Strategy</a></font></div>
  <div id=PPTC364 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB364 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Is a variable-allocation method with local scope
    based on the assumption of locality of references</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>The working set for a process at time t, W(D,t),
    is the set of pages that have been referenced in the last D virtual time
    units</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>virtual time = time elapsed while the process
    was in execution (e.g.: number of instructions executed)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>D is a window of time</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>at any t, |W(D,t)| is non decreasing with D</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>W(D,t) is an approximation of the programs
    locality</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP365 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0365.htm');" onmouseover="Over(this)"
  id=PPTL365 onmouseout="Out(this)">The Working Set Strategy</a></font></div>
  <div id=PPTC365 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB365 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>The working set of a process first grows when it
    starts executing</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Then stabilizes by the principle of locality</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>It grows again when the process enters a new
    locality (transition period)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>up to a point where the working set contains
    pages from two localities</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Then decreases after a sufficient long time
    spent in the new locality</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP366 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0366.htm');" onmouseover="Over(this)"
  id=PPTL366 onmouseout="Out(this)">The Working Set Strategy</a></font></div>
  <div id=PPTC366 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB366 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=4><font size=2>the working set concept suggest the following
    strategy to determine the resident set size</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=3><font size=2>Monitor the working set for each process</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=3><font size=2>Periodically remove from the resident set of a
    process those pages that are not in the working set</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=3><font size=2>When the resident set of a process is smaller
    than its working set, allocate more frames to it</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=2><font size=2>If not enough free frames are available, suspend
    the process (until more frames are available)</font></td>
   </tr>
   <tr>
    <td colspan=4></td>
    <td colspan=1><font size=2>I.e.: a process may execute only if its working
    set is in main memory</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP367 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0367.htm');" onmouseover="Over(this)"
  id=PPTL367 onmouseout="Out(this)">The Working Set Strategy</a></font></div>
  <div id=PPTC367 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB367 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Practical problems with this working set
    strategy</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>measurement of the working set for each process
    is impractical</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>necessary to time stamp the referenced page at
    every memory reference</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>necessary to maintain a time-ordered queue of
    referenced pages for each process</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>the optimal value for D is unknown and time
    varying</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Solution: rather than monitor the working set,
    monitor the page fault rate!</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP368 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0368.htm');" onmouseover="Over(this)"
  id=PPTL368 onmouseout="Out(this)">The Page-Fault Frequency Strategy</a></font></div>
  <div id=PPTC368 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB368 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Define an upper bound U and lower bound L for
    page fault rates</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Allocate more frames to a process if<span
    style="mso-spacerun: yes">  </span>fault rate is higher than U</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Allocate less frames if fault rate is &lt; L</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The resident set size should be close to the
    working set size W</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>We suspend the process if the PFF &gt; U and no
    more free frames are available</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP369 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0369.htm');" onmouseover="Over(this)"
  id=PPTL369 onmouseout="Out(this)">Load Control</a></font></div>
  <div id=PPTC369 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB369 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Determines the number of processes that will be
    resident in main memory (I.e.: the multiprogramming level)</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Too few processes: often all processes will be
    blocked and the processor will be idle</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Too many processes: the resident size of each
    process will be too small and flurries of page faults will result:
    thrashing</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP370 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0370.htm');" onmouseover="Over(this)"
  id=PPTL370 onmouseout="Out(this)">Load Control</a></font></div>
  <div id=PPTC370 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB370 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>A working set or page fault frequency algorithm
    implicitly incorporates load control</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>only those processes whose resident set is
    sufficiently large are allowed to execute</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Another approach is to adjust explicitly the
    multiprogramming level so that the mean time between page faults equals the
    time to process a page fault</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>performance studies indicate that this is the
    point where processor usage is at maximum</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP371 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0371.htm');" onmouseover="Over(this)"
  id=PPTL371 onmouseout="Out(this)">Process Suspension</a></font></div>
  <div id=PPTC371 class=CTxt style='display:none'>
  <table style='color:white' id=PPTB371 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Explicit load control requires that we sometimes
    swap out (suspend) processes</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=3><font size=2>Possible victim selection criteria:</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>Faulting process</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>this process may not have its working set in
    main memory so it will be blocked anyway</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>Last process activated</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>this process is least likely to have its working
    set resident</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>Process with smallest resident set</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>this process requires the least future effort to
    reload</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=2><font size=2>Largest process</font></td>
   </tr>
   <tr>
    <td colspan=3></td>
    <td colspan=1><font size=2>will yield the most free frames</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
</table>

</div>

</body>

</html>
